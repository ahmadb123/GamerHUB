{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import axios from 'axios'; // Remove axios import\nimport { PublicClientApplication } from '@azure/msal-browser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n HTTP\n Copy\n POST https://titleId.playfabapi.com/Server/LoginWithXbox\n Request Header\n Name\tRequired\tType\tDescription\n X-SecretKey\tTrue\t\n string\n This API requires a title secret key, available to title admins, from PlayFab Game Manager.\n Request Body\n Name\tRequired\tType\tDescription\n XboxToken\tTrue\t\n string\n Token provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\n */}\nconst msalConfig = {\n  auth: {\n    clientId: '0a23b968-9e79-4cba-b337-862adab7a8e2',\n    // Replace with your Azure AD client ID\n    authority: 'https://login.microsoftonline.com/682302df-55ed-430a-bb15-cf8852a65331',\n    // Replace with your tenant ID\n    redirectUri: 'http://localhost:3000' // Your redirect URI\n  },\n  cache: {\n    cacheLocation: 'sessionStorage',\n    storeAuthStateInCookie: false\n  }\n};\nconst msalInstance = new PublicClientApplication(msalConfig);\nconst AuthenticationPage = () => {\n  _s();\n  const [xboxToken, setXboxToken] = useState('');\n  const [error, setError] = useState(null);\n  const getXboxToken = async () => {\n    const loginRequest = {\n      scopes: ['XboxLive.signin', 'offline_access'] // Adjust scopes as needed\n    };\n    try {\n      const loginResponse = await msalInstance.loginPopup(loginRequest);\n      const account = loginResponse.account;\n      const tokenRequest = {\n        scopes: ['XboxLive.signin'],\n        account: account\n      };\n      const tokenResponse = await msalInstance.acquireTokenSilent(tokenRequest);\n      return tokenResponse.accessToken;\n    } catch (error) {\n      console.error('MSAL error:', error);\n      // Fallback to interactive token acquisition\n      try {\n        const tokenResponse = await msalInstance.acquireTokenPopup(tokenRequest);\n        return tokenResponse.accessToken;\n      } catch (popupError) {\n        console.error('Token acquisition failed:', popupError);\n        throw popupError;\n      }\n    }\n  };\n  const handleLogin = async () => {\n    try {\n      const token = await getXboxToken();\n      setXboxToken(token);\n      const response = await fetch('http://localhost:8080/api/auth/xbox', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          xboxToken: token\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log('Login successful:', data);\n      // Handle successful login (e.g., store session, redirect)\n    } catch (err) {\n      console.error('Error during login:', err);\n      setError('Login failed. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Xbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthenticationPage, \"W5NmGFLmj+HJMYJo5SX1NivgAkw=\");\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["React","useState","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","msalInstance","AuthenticationPage","_s","xboxToken","setXboxToken","error","setError","getXboxToken","loginRequest","scopes","loginResponse","loginPopup","account","tokenRequest","tokenResponse","acquireTokenSilent","accessToken","console","acquireTokenPopup","popupError","handleLogin","token","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","log","err","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["import React, { useState } from 'react';\n// import axios from 'axios'; // Remove axios import\nimport { PublicClientApplication } from '@azure/msal-browser';\n{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n\nHTTP\n\nCopy\nPOST https://titleId.playfabapi.com/Server/LoginWithXbox\nRequest Header\nName\tRequired\tType\tDescription\nX-SecretKey\tTrue\t\nstring\n\nThis API requires a title secret key, available to title admins, from PlayFab Game Manager.\n\nRequest Body\nName\tRequired\tType\tDescription\nXboxToken\tTrue\t\nstring\n\nToken provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\n*/}\n\nconst msalConfig = {\n    auth: {\n        clientId: '0a23b968-9e79-4cba-b337-862adab7a8e2', // Replace with your Azure AD client ID\n        authority: 'https://login.microsoftonline.com/682302df-55ed-430a-bb15-cf8852a65331', // Replace with your tenant ID\n        redirectUri: 'http://localhost:3000', // Your redirect URI\n    },\n    cache: {\n        cacheLocation: 'sessionStorage',\n        storeAuthStateInCookie: false,\n    },\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n\nconst AuthenticationPage = () => {\n    const [xboxToken, setXboxToken] = useState('');\n    const [error, setError] = useState(null);\n\n    const getXboxToken = async () => {\n        const loginRequest = {\n            scopes: ['XboxLive.signin', 'offline_access'], // Adjust scopes as needed\n        };\n\n        try {\n            const loginResponse = await msalInstance.loginPopup(loginRequest);\n            const account = loginResponse.account;\n\n            const tokenRequest = {\n                scopes: ['XboxLive.signin'],\n                account: account,\n            };\n\n            const tokenResponse = await msalInstance.acquireTokenSilent(tokenRequest);\n            return tokenResponse.accessToken;\n        } catch (error) {\n            console.error('MSAL error:', error);\n            // Fallback to interactive token acquisition\n            try {\n                const tokenResponse = await msalInstance.acquireTokenPopup(tokenRequest);\n                return tokenResponse.accessToken;\n            } catch (popupError) {\n                console.error('Token acquisition failed:', popupError);\n                throw popupError;\n            }\n        }\n    };\n\n    const handleLogin = async () => {\n        try {\n            const token = await getXboxToken();\n            setXboxToken(token);\n\n            const response = await fetch('http://localhost:8080/api/auth/xbox', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ xboxToken: token }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const data = await response.json();\n            console.log('Login successful:', data);\n            // Handle successful login (e.g., store session, redirect)\n        } catch (err) {\n            console.error('Error during login:', err);\n            setError('Login failed. Please try again.');\n        }\n    };\n\n    return (\n        <div>\n            <button onClick={handleLogin}>Login with Xbox</button>\n            {error && <p>{error}</p>}\n        </div>\n    );\n};\n\nexport default AuthenticationPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}