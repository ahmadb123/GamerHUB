{"ast":null,"code":"export const fetchSteamFriends = async () => {\n  const jwtToken = localStorage.getItem(\"jwtToken\");\n  try {\n    const response = await fetch(`${apiUrl}/api/steam/userinfo/get-friends`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + jwtToken\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Steam friends. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"Steam friends data:\", data);\n\n    // Transform the friends array so that it matches the UI format\n    const friends = data.friends.map(friend => ({\n      gamertag: friend.friendName,\n      // Map friendName to gamertag\n      displayPicRaw: friend.friendAvatar,\n      // Map friendAvatar to displayPicRaw\n      realName: friend.friendName,\n      // Use friendName or set another value if available\n      presenceState: \"Offline\",\n      // Set a default if Steam doesn't provide presence info\n      presenceText: \"Offline\",\n      // Likewise, default value for presence text\n      friendSince: friend.friendSince,\n      relationship: friend.relationship,\n      steamId: friend.steamId,\n      profileImg: friend.friendProfileUrl // In case you want to use the profile URL somewhere\n    }));\n    return friends || [];\n  } catch (error) {\n    console.error(\"Failed to fetch Steam friends:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchSteamFriends","jwtToken","localStorage","getItem","response","fetch","apiUrl","method","headers","ok","Error","status","data","json","console","log","friends","map","friend","gamertag","friendName","displayPicRaw","friendAvatar","realName","presenceState","presenceText","friendSince","relationship","steamId","profileImg","friendProfileUrl","error"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/friendsService.js"],"sourcesContent":["export const fetchSteamFriends = async () => {\n    const jwtToken = localStorage.getItem(\"jwtToken\");\n    try {\n      const response = await fetch(`${apiUrl}/api/steam/userinfo/get-friends`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + jwtToken,\n        },\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch Steam friends. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Steam friends data:\", data);\n      \n      // Transform the friends array so that it matches the UI format\n      const friends = data.friends.map(friend => ({\n        gamertag: friend.friendName,              // Map friendName to gamertag\n        displayPicRaw: friend.friendAvatar,         // Map friendAvatar to displayPicRaw\n        realName: friend.friendName,                // Use friendName or set another value if available\n        presenceState: \"Offline\",                   // Set a default if Steam doesn't provide presence info\n        presenceText: \"Offline\",                    // Likewise, default value for presence text\n        friendSince: friend.friendSince,\n        relationship: friend.relationship,\n        steamId: friend.steamId,\n        profileImg: friend.friendProfileUrl,        // In case you want to use the profile URL somewhere\n      }));\n      \n      return friends || [];\n    } catch (error) {\n      console.error(\"Failed to fetch Steam friends:\", error);\n      throw error;\n    }\n  };\n  "],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGC,MAAM,iCAAiC,EAAE;MACvEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGP;MAC/B;IACF,CAAC,CAAC;IACF,IAAI,CAACG,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0CAA0CN,QAAQ,CAACO,MAAM,EAAE,CAAC;IAC9E;IACA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,IAAI,CAAC;;IAExC;IACA,MAAMI,OAAO,GAAGJ,IAAI,CAACI,OAAO,CAACC,GAAG,CAACC,MAAM,KAAK;MAC1CC,QAAQ,EAAED,MAAM,CAACE,UAAU;MAAe;MAC1CC,aAAa,EAAEH,MAAM,CAACI,YAAY;MAAU;MAC5CC,QAAQ,EAAEL,MAAM,CAACE,UAAU;MAAiB;MAC5CI,aAAa,EAAE,SAAS;MAAoB;MAC5CC,YAAY,EAAE,SAAS;MAAqB;MAC5CC,WAAW,EAAER,MAAM,CAACQ,WAAW;MAC/BC,YAAY,EAAET,MAAM,CAACS,YAAY;MACjCC,OAAO,EAAEV,MAAM,CAACU,OAAO;MACvBC,UAAU,EAAEX,MAAM,CAACY,gBAAgB,CAAS;IAC9C,CAAC,CAAC,CAAC;IAEH,OAAOd,OAAO,IAAI,EAAE;EACtB,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}