{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/XboxLogin.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst XboxLogin = () => {\n  _s();\n  const {\n    instance\n  } = useMsal();\n  const handleXboxLogin = async () => {\n    const loginRequest = {\n      scopes: [\"XboxLive.signin\"] // Required Xbox scope\n    };\n    try {\n      // Start Microsoft authentication flow\n      const loginResponse = await instance.loginPopup(loginRequest);\n      console.log(\"Microsoft Login Success:\", loginResponse);\n\n      // XboxToken is the ID token obtained from Microsoft login\n      const xboxToken = loginResponse.idToken;\n      console.log(\"Xbox Token:\", xboxToken);\n\n      // Send the XboxToken to your backend for PlayFab login\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          xboxToken: xboxToken,\n          createAccount: false\n        })\n      });\n      const result = await response.json();\n      console.log(\"PlayFab Response:\", result);\n    } catch (error) {\n      console.error(\"Xbox Login Failed:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleXboxLogin,\n      children: \"Login with Xbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(XboxLogin, \"kNmaupTUyOO55c/HFAYpHUXUX7Y=\", false, function () {\n  return [useMsal];\n});\n_c = XboxLogin;\nexport default XboxLogin;\nvar _c;\n$RefreshReg$(_c, \"XboxLogin\");","map":{"version":3,"names":["React","useMsal","jsxDEV","_jsxDEV","XboxLogin","_s","instance","handleXboxLogin","loginRequest","scopes","loginResponse","loginPopup","console","log","xboxToken","idToken","response","fetch","method","headers","body","JSON","stringify","createAccount","result","json","error","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/XboxLogin.js"],"sourcesContent":["import React from \"react\";\nimport { useMsal } from \"@azure/msal-react\";\n\nconst XboxLogin = () => {\n  const { instance } = useMsal();\n\n  const handleXboxLogin = async () => {\n    const loginRequest = {\n      scopes: [\"XboxLive.signin\"], // Required Xbox scope\n    };\n\n    try {\n      // Start Microsoft authentication flow\n      const loginResponse = await instance.loginPopup(loginRequest);\n      console.log(\"Microsoft Login Success:\", loginResponse);\n\n      // XboxToken is the ID token obtained from Microsoft login\n      const xboxToken = loginResponse.idToken;\n      console.log(\"Xbox Token:\", xboxToken);\n\n      // Send the XboxToken to your backend for PlayFab login\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          xboxToken: xboxToken,\n          createAccount: false,\n        }),\n      });\n\n      const result = await response.json();\n      console.log(\"PlayFab Response:\", result);\n    } catch (error) {\n      console.error(\"Xbox Login Failed:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={handleXboxLogin}>Login with Xbox</button>\n    </div>\n  );\n};\n\nexport default XboxLogin;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAS,CAAC,GAAGL,OAAO,CAAC,CAAC;EAE9B,MAAMM,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAMC,YAAY,GAAG;MACnBC,MAAM,EAAE,CAAC,iBAAiB,CAAC,CAAE;IAC/B,CAAC;IAED,IAAI;MACF;MACA,MAAMC,aAAa,GAAG,MAAMJ,QAAQ,CAACK,UAAU,CAACH,YAAY,CAAC;MAC7DI,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEH,aAAa,CAAC;;MAEtD;MACA,MAAMI,SAAS,GAAGJ,aAAa,CAACK,OAAO;MACvCH,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,SAAS,CAAC;;MAErC;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBR,SAAS,EAAEA,SAAS;UACpBS,aAAa,EAAE;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,MAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACpCb,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEW,MAAM,CAAC;IAC1C,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C;EACF,CAAC;EAED,oBACEvB,OAAA;IAAAwB,QAAA,eACExB,OAAA;MAAQyB,OAAO,EAAErB,eAAgB;MAAAoB,QAAA,EAAC;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAvCID,SAAS;EAAA,QACQH,OAAO;AAAA;AAAAgC,EAAA,GADxB7B,SAAS;AAyCf,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}