{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n HTTP\n Copy\n POST https://titleId.playfabapi.com/Server/LoginWithXbox\n Request Header\n Name\tRequired\tType\tDescription\n X-SecretKey\tTrue\t\n string\n This API requires a title secret key, available to title admins, from PlayFab Game Manager.\n Request Body\n Name\tRequired\tType\tDescription\n XboxToken\tTrue\t\n string\n Token provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\n URL to use for the MSAL \n https://login.microsoftonline.com/common/\t\n */\n}\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/common/\",\n    // Common authority for all Microsoft accounts\n    redirectUri: \"http://localhost:3000\" // Replace with your application's redirect URI\n  }\n};\nconst LoginWithMicrosoft = () => {\n  _s();\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Initialize MSAL instance\n    const instance = new PublicClientApplication(msalConfig);\n    setMsalInstance(instance);\n  }, []);\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n    try {\n      // Trigger MSAL login\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"XboxLive.signin\"] // Replace with required scopes\n      });\n      console.log(\"Login response:\", loginResponse);\n\n      // Acquire token silently for the logged-in user\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"XboxLive.signin\"],\n        account: loginResponse.account\n      });\n      console.log(\"Token response:\", tokenResponse);\n      setToken(tokenResponse.accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Xbox Token Retrieval\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      children: \"Login and Get Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), token && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Token retrieved: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginWithMicrosoft, \"QEAA7ynVfDlXUzgyIHSKC6D9lp0=\");\n_c = LoginWithMicrosoft;\nexport default LoginWithMicrosoft;\nvar _c;\n$RefreshReg$(_c, \"LoginWithMicrosoft\");","map":{"version":3,"names":["React","useState","useEffect","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","LoginWithMicrosoft","_s","msalInstance","setMsalInstance","token","setToken","error","setError","instance","login","loginResponse","loginPopup","scopes","console","log","tokenResponse","acquireTokenSilent","account","accessToken","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { PublicClientApplication } from '@azure/msal-browser';\n{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n\nHTTP\n\nCopy\nPOST https://titleId.playfabapi.com/Server/LoginWithXbox\nRequest Header\nName\tRequired\tType\tDescription\nX-SecretKey\tTrue\t\nstring\n\nThis API requires a title secret key, available to title admins, from PlayFab Game Manager.\n\nRequest Body\nName\tRequired\tType\tDescription\nXboxToken\tTrue\t\nstring\n\nToken provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\nURL to use for the MSAL \nhttps://login.microsoftonline.com/common/\t\n\n*/\n}\n\nconst msalConfig = {\n    auth: {\n      clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n      authority: \"https://login.microsoftonline.com/common/\", // Common authority for all Microsoft accounts\n      redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n    },\n  };\n\nconst LoginWithMicrosoft = () => {\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Initialize MSAL instance\n    const instance = new PublicClientApplication(msalConfig);\n    setMsalInstance(instance);\n  }, []);\n\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n\n    try {\n      // Trigger MSAL login\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"XboxLive.signin\"], // Replace with required scopes\n      });\n\n      console.log(\"Login response:\", loginResponse);\n\n      // Acquire token silently for the logged-in user\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"XboxLive.signin\"],\n        account: loginResponse.account,\n      });\n\n      console.log(\"Token response:\", tokenResponse);\n      setToken(tokenResponse.accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Test Xbox Token Retrieval</h1>\n      <button onClick={login}>Login and Get Token</button>\n      {token && <p>Token retrieved: {token}</p>}\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default LoginWithMicrosoft;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}