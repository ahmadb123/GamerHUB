{"ast":null,"code":"{\n  /*\n  This function switches the user\n  account by updating user current platform\n  */\n}\n// SwitchUserAccount.js\n// SwitchUserAccount.js\nexport const switchUserAccount = (platform, navigate) => {\n  const handleRedirect = url => {\n    // Clear existing platform flag during auth flow\n    localStorage.removeItem(\"platform\");\n    window.location.href = url;\n  };\n\n  // 1. Check for tokens in localStorage\n  if (platform === \"xbox\") {\n    const xstsToken = localStorage.getItem(\"XSTS_token\");\n    const uhs = localStorage.getItem(\"uhs\");\n    if (!xstsToken || !uhs) {\n      console.log(\"Initiating Xbox authentication...\");\n      handleRedirect(\"http://localhost:8080/api/auth/login/xbox\");\n      return;\n    }\n  } else if (platform === \"steam\") {\n    const steamId = localStorage.getItem(\"steamId\");\n    if (!steamId) {\n      console.log(\"Initiating Steam authentication...\");\n      handleRedirect(\"http://localhost:8080/api/auth/login/steam\");\n      return;\n    }\n  }\n\n  // 2. If tokens exist, set the new platform\n  localStorage.setItem(\"platform\", platform);\n\n  // 3. Navigate to main (or another page) with React Router\n  navigate(\"/main\", {\n    replace: true,\n    state: {\n      fromSwitch: true\n    }\n  });\n};\n{\n  /*\n  This function switches the user\n  account by updating user current platform\n  */\n}\n// SwitchUserAccount.js\n{\n  /* \n      *This function switches the user account by updating user current platform\n      * to do so -> \n      * 1. Find the user's record in DB by userId\n      * 2.  Retrieve the tokens / credentials for the requested platform\n      * 3.  Update the user’s \"activePlatform\" in their session\n      * 4.  Now your server calls the correct provider using the correct tokens\n  */\n}","map":{"version":3,"names":["switchUserAccount","platform","navigate","handleRedirect","url","localStorage","removeItem","window","location","href","xstsToken","getItem","uhs","console","log","steamId","setItem","replace","state","fromSwitch"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/utility/SwitchUserAccount.js"],"sourcesContent":["{\n    /*\n    This function switches the user\n    account by updating user current platform\n    */\n}\n// SwitchUserAccount.js\n// SwitchUserAccount.js\nexport const switchUserAccount = (platform, navigate) => {\n    const handleRedirect = (url) => {\n      // Clear existing platform flag during auth flow\n      localStorage.removeItem(\"platform\");\n      window.location.href = url;\n    };\n    \n    // 1. Check for tokens in localStorage\n    if (platform === \"xbox\") {\n      const xstsToken = localStorage.getItem(\"XSTS_token\");\n      const uhs = localStorage.getItem(\"uhs\");\n      if (!xstsToken || !uhs) {\n        console.log(\"Initiating Xbox authentication...\");\n        handleRedirect(\"http://localhost:8080/api/auth/login/xbox\");\n        return;\n      }\n    } else if (platform === \"steam\") {\n      const steamId = localStorage.getItem(\"steamId\");\n      if (!steamId) {\n        console.log(\"Initiating Steam authentication...\");\n        handleRedirect(\"http://localhost:8080/api/auth/login/steam\");\n        return;\n      }\n    }\n  \n    // 2. If tokens exist, set the new platform\n    localStorage.setItem(\"platform\", platform);\n  \n    // 3. Navigate to main (or another page) with React Router\n    navigate(\"/main\", { replace: true, state: { fromSwitch: true } });\n  };\n  \n{\n    /*\n    This function switches the user\n    account by updating user current platform\n    */\n}\n// SwitchUserAccount.js\n{\n    /* \n        *This function switches the user account by updating user current platform\n        * to do so -> \n        * 1. Find the user's record in DB by userId\n        * 2.  Retrieve the tokens / credentials for the requested platform\n        * 3.  Update the user’s \"activePlatform\" in their session\n        * 4.  Now your server calls the correct provider using the correct tokens\n    */\n   \n}"],"mappings":"AAAA;EACI;AACJ;AACA;AACA;AAHI;AAKJ;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EACrD,MAAMC,cAAc,GAAIC,GAAG,IAAK;IAC9B;IACAC,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;IACnCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGL,GAAG;EAC5B,CAAC;;EAED;EACA,IAAIH,QAAQ,KAAK,MAAM,EAAE;IACvB,MAAMS,SAAS,GAAGL,YAAY,CAACM,OAAO,CAAC,YAAY,CAAC;IACpD,MAAMC,GAAG,GAAGP,YAAY,CAACM,OAAO,CAAC,KAAK,CAAC;IACvC,IAAI,CAACD,SAAS,IAAI,CAACE,GAAG,EAAE;MACtBC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChDX,cAAc,CAAC,2CAA2C,CAAC;MAC3D;IACF;EACF,CAAC,MAAM,IAAIF,QAAQ,KAAK,OAAO,EAAE;IAC/B,MAAMc,OAAO,GAAGV,YAAY,CAACM,OAAO,CAAC,SAAS,CAAC;IAC/C,IAAI,CAACI,OAAO,EAAE;MACZF,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDX,cAAc,CAAC,4CAA4C,CAAC;MAC5D;IACF;EACF;;EAEA;EACAE,YAAY,CAACW,OAAO,CAAC,UAAU,EAAEf,QAAQ,CAAC;;EAE1C;EACAC,QAAQ,CAAC,OAAO,EAAE;IAAEe,OAAO,EAAE,IAAI;IAAEC,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAK;EAAE,CAAC,CAAC;AACnE,CAAC;AAEH;EACI;AACJ;AACA;AACA;AAHI;AAKJ;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAPI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}