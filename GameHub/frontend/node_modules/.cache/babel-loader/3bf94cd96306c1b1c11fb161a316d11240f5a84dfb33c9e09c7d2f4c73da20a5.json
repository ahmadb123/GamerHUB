{"ast":null,"code":"// // src/components/HomePage.jsx\n// import React, { Component } from \"react\";\n// import { toast } from \"react-toastify\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../assests/HomePage.css\";\n// import NavHelper  from '../component/NavHelper';\n// import {\n//   fetchXboxProfile,\n//   fetchPSNProfile,\n//   fetchSteamProfile,\n// } from \"../service/profileService\";\n\n// import { fetchXboxFriends } from \"../service/friendsService\";\n// import { getRecentGames } from \"../service/RecentGamesXbox\";\n// import { fetchRecentNews } from \"../service/NewsService\";\n// import { postNews } from \"../service/PostNewsService\";\n// import { checkAccountType } from \"../utility/CheckAccountType\";\n// import {\n//   searchUserProfile,\n//   getAllLinkedProfiles,\n// } from \"../service/searchUserProfile\"; // Added getAllLinkedProfiles\n// import { addFriend } from \"../service/AddFriendService\"; // add friend service\n// import {\n//   checkFriendRequest,\n//   acceptFriendRequest,\n//   getAllFriends,\n// } from \"../service/AddFriendService\";\n\n// class HomePage extends Component {\n//   state = {\n//     accountInfo: null,\n//     platform: null,\n//     isFetching: true,\n\n//     friends: [], // from fetchXboxFriends (Xbox only)\n//     isFetchingFriends: true,\n\n//     recentGames: [],\n//     isFetchingRecentGames: true,\n\n//     recentNews: [],\n//     isFetchingRecentNews: true,\n\n//     showMoreGames: false,\n\n//     // For searching other users:\n//     searchQuery: \"\",\n//     searchResult: null,\n//     selectedUser: null,\n//     selectedUserProfile: null,\n//     selectedUserGames: [],\n//     showMoreSelectedUserGames: false,\n\n//     // For linked profiles (for example, Xbox linked accounts)\n//     linkedProfiles: [],\n//     showLinkedProfiles: false, // Controls whether the linked profiles list is visible\n\n//     pendingRequests: [],\n//     showPendingList: false,\n\n//     showFriendList: false,\n//     acceptFriendRequest: [],\n\n//     // For custom friend list from your backend\n//     friendsList: [], // Mismatch corrected: we store the entire friend object(s) here\n//     isFriendsDropdownOpen: false,\n//     // state for dropdwon visibility \n//     accountOptionVisible: false,\n//   };\n\n//   // methods to handle mouse hover events - \n//   mouseOverToggle = () =>{\n//     this.setState({accountOptionVisible: true});\n//   };\n\n//   mouseOutToggle = () =>{\n//     this.setState({accountOptionVisible: false});\n//   };\n\n//   componentDidMount() {\n//     this.fetchNews();\n//     const platform = localStorage.getItem(\"platform\");\n//     console.log(\"HomePage mounting with platform:\", platform);\n\n//     if (!platform) {\n//       toast.error(\"No platform selected. Please log in again.\");\n//       window.location.href = \"/\";\n//       return;\n//     }\n\n//     // pick the right profile fetcher\n//     const profileFetchers = {\n//       xbox: fetchXboxProfile,\n//       psn: fetchPSNProfile,\n//       steam: fetchSteamProfile,\n//     };\n\n//     const fetchProfile = profileFetchers[platform];\n//     if (!fetchProfile) {\n//       toast.error(\"Unsupported platform. Please log in again.\");\n//       window.location.href = \"/\";\n//       return;\n//     }\n\n//     this.setState({ platform });\n\n//     // load the user account info, then friends & linked profiles if needed\n//     const fetchAccountInfo = async () => {\n//       try {\n//         const accountInfo = await fetchProfile();\n//         this.setState({ accountInfo, isFetching: false });\n\n//         if (platform === \"xbox\") {\n//           // Fetch friends for Xbox\n//           try {\n//             const friends = await fetchXboxFriends();\n//             this.setState({ friends, isFetchingFriends: false });\n//           } catch (error) {\n//             console.error(error);\n//             toast.error(\"Failed to fetch friends list.\");\n//           }\n\n//           // Fetch linked profiles\n//           try {\n//             const linkedProfiles = await getAllLinkedProfiles();\n//             this.setState({ linkedProfiles });\n//           } catch (error) {\n//             console.error(error);\n//             toast.error(\"Failed to fetch linked profiles.\");\n//           }\n//         }\n\n//         // steam - \n//         if (platform === \"steam\") {\n//           // fetch profile info for steam - \n//         }\n\n//         // Fetch recent games\n//         try {\n//           const recentGames = await getRecentGames();\n//           this.setState({ recentGames, isFetchingRecentGames: false });\n//         } catch (error) {\n//           console.error(error);\n//           toast.error(\"Failed to fetch recent games.\");\n//         }\n//       } catch (error) {\n//         console.error(error);\n//         localStorage.removeItem(\"platform\");\n//         toast.error(\"Failed to fetch profile information.\");\n//         window.location.href = \"/\";\n//       }\n//     };\n\n//     fetchAccountInfo();\n//     this.checkForPendingRequests();\n\n//     // Optionally fetch the custom friend list from your own backend\n//     this.fetchFriendsList();\n//   }\n\n//   fetchNews = async () => {\n//     this.setState({ isFetchingRecentNews: true });\n//     try {\n//       const news = await fetchRecentNews();\n//       this.setState({ recentNews: news, isFetchingRecentNews: false });\n//     } catch (error) {\n//       console.error(error);\n//       toast.error(\"Failed to fetch recent news.\");\n//       this.setState({ isFetchingRecentNews: false });\n//     }\n//   };\n\n//   // fetch the custom friend list from your backend\n//   fetchFriendsList = async () => {\n//     try {\n//       const friendsList = await getAllFriends(); // from AddFriendService\n//       console.log(\"All friends list:\", friendsList);\n//       this.setState({ friendsList });\n//     } catch (err) {\n//       console.error(\"Failed to fetch all friends list:\", err);\n//     }\n//   };\n\n//   // Toggle the collapsible friend list\n//   toggleFriendsDropDown = async () => {\n//     // If about to open the dropdown, refresh the data (optional)\n//     if (!this.state.isFriendsDropdownOpen) {\n//       await this.fetchFriendsList();\n//     }\n//     this.setState((prev) => ({\n//       isFriendsDropdownOpen: !prev.isFriendsDropdownOpen,\n//     }));\n//   };\n\n//   // If you want to navigate to a friendâ€™s page\n//   navigateToFriendPage = (friendId) => {\n//     this.props.navigate(`/user/${friendId}`);\n//   };\n\n//   // Check for pending friend requests\n//   checkForPendingRequests = async () => {\n//     try {\n//       const pendingRequests = await checkFriendRequest();\n//       console.log(\"Pending friend requests:\", pendingRequests);\n//       this.setState({ pendingRequests });\n//       if (this.state.pendingRequests[0]?.status === \"accept\") {\n//         this.setState({ showFriendList: true, showPendingList: false });\n//       }\n//     } catch (err) {\n//       console.error(\"Failed to fetch pending friend requests:\", err);\n//     }\n//   };\n\n//   togglePendingList = () => {\n//     this.setState((prev) => ({ showPendingList: !prev.showPendingList }));\n//   };\n\n//   // handle accept button\n//   handleAcceptBtn = async () => {\n//     try {\n//       // username of requester from the pending request\n//       const username = this.state.pendingRequests[0].username;\n//       const acceptFriend = await acceptFriendRequest(username);\n//       console.log(\"Accepting friend request:\", acceptFriend);\n//       this.setState({ acceptFriendRequest: acceptFriend });\n//     } catch (err) {\n//       console.error(\"Failed to accept friend request:\", err);\n//     }\n//   };\n\n//   // handle adding a friend\n//   handleFriendBtn = async () => {\n//     try {\n//       const userToRequest = this.state.selectedUserProfile.username;\n//       console.log(\"Adding friend:\", userToRequest);\n\n//       const result = await addFriend(userToRequest);\n//       if (result.success) {\n//         toast.success(\"Friend request sent successfully.\");\n//       } else {\n//         toast.error(\"Failed to send friend request.\");\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error(\"Failed to send friend request.\");\n//     }\n//   };\n\n//   // handle search user change\n//   handleSearchChange = async (event) => {\n//     const newQuery = event.target.value;\n//     this.setState({ searchQuery: newQuery, selectedUser: null }, async () => {\n//       if (newQuery.length < 3) {\n//         this.setState({ searchResult: null });\n//         return;\n//       }\n\n//       try {\n//         const result = await searchUserProfile(newQuery);\n//         console.log(\"Search result:\", result);\n\n//         if (result) {\n//           this.setState({\n//             searchResult: result,\n//             selectedUserProfile: result.profile,\n//             selectedUserGames: result.recentGames,\n//           });\n//         } else {\n//           this.setState({\n//             searchResult: null,\n//             selectedUserProfile: null,\n//             selectedUserGames: [],\n//           });\n//         }\n//       } catch (error) {\n//         console.error(\"Auto-search error:\", error);\n//         toast.error(\"Failed to search user profile.\");\n//         this.setState({ searchResult: null });\n//       }\n//     });\n//   };\n\n//   // Close the selected user profile box\n//   handleCloseBtn = () => {\n//     this.setState({\n//       selectedUser: null,\n//       selectedUserProfile: null,\n//       selectedUserGames: [],\n//     });\n//   };\n\n//   // Toggle to show more user games (for search results)\n//   toggleShowMoreSelectedUserGames = () => {\n//     this.setState((prevState) => ({\n//       showMoreSelectedUserGames: !prevState.showMoreSelectedUserGames,\n//     }));\n//   };\n\n//   // Toggle to show/hide the linked profiles list\n//   toggleLinkedProfiles = () => {\n//     this.setState((prevState) => ({\n//       showLinkedProfiles: !prevState.showLinkedProfiles,\n//     }));\n//   };\n\n//   // Toggle to show more games (own profile)\n//   handleShowMoreGames = () => {\n//     this.setState((prevState) => ({\n//       showMoreGames: !prevState.showMoreGames,\n//     }));\n//   };\n\n//   // navigation helpers\n//   navigateClips = () => {\n//     this.props.navigate(\"/clips\");\n//   };\n//   navigateCommunity = () => {\n//     this.props.navigate(\"/community\");\n//   };\n//   navigateNews = () => {\n//     this.props.navigate(\"/news\");\n//   }\n//   navigateMyGames = () => {\n//     this.props.navigate(\"/mygames\");\n//   }\n\n//   // share news\n//   handleShareNews = async (news) => {\n//     const contentText = `Check out this news: ${news.name}`;\n//     const sharedNewsId = news.slug; \n//     console.log(\"Sharing news with ID:\", sharedNewsId);\n\n//     try {\n//       const result = await postNews(contentText, sharedNewsId);\n//       if (result.success) {\n//         toast.success(\"News shared successfully.\");\n//       } else {\n//         toast.error(\"Failed to share news.\");\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error(\"Failed to share news.\");\n//     }\n//   };\n\n//   render() {\n//     // Destructure the main state variables you need in render\n//     const {\n//       accountInfo,\n//       isFetching,\n//       friends,\n//       isFetchingFriends,\n//       recentGames,\n//       isFetchingRecentGames,\n//       recentNews,\n//       isFetchingRecentNews,\n//       searchQuery,\n//       searchResult,\n//       selectedUserProfile,\n//       selectedUserGames,\n//       showMoreSelectedUserGames,\n//       linkedProfiles,\n//       showLinkedProfiles,\n//       pendingRequests,\n//       showPendingList,\n//       // newly destructured:\n//       friendsList,\n//       isFriendsDropdownOpen,\n//     } = this.state;\n\n//     if (isFetching) {\n//       return <p>Loading profile...</p>;\n//     }\n\n//     // Filter out linked profiles so that only unsinged (other) profiles are shown\n//     const nonSignedLinkedProfiles = linkedProfiles.filter(\n//       (profile) => profile.gamertag !== accountInfo.gamertag\n//     );\n\n//     return (\n//       <div className=\"gamerhub\">\n//         {/* HEADER / NAV */}\n//         <header className=\"header\">\n//           <h1 className=\"logo\">GamerHUB</h1>\n//           <nav className=\"navbar\">\n//             <button onClick={this.navigateNews} className=\"nav-button\">\n//               News\n//             </button>\n//             <button onClick={this.navigateClips} className=\"nav-button\">\n//               CLIPS\n//             </button>\n//             <button onClick={this.navigateCommunity} className=\"nav-button\">\n//               Community Insight\n//             </button>\n\n//             {/* SEARCH BAR */}\n//             <div className=\"search-bar\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Search User...\"\n//                 className=\"search-input\"\n//                 value={searchQuery || \"\"}\n//                 onChange={this.handleSearchChange}\n//               />\n//               {/* If user typed >=3 chars and we have a searchResult, show a preview */}\n//               {searchQuery.length >= 3 && searchResult && (\n//                 <div\n//                   className=\"search-result-preview\"\n//                   onClick={() =>\n//                     this.setState({\n//                       selectedUser: searchResult,\n//                       searchQuery: \"\",\n//                       searchResult: null,\n//                     })\n//                   }\n//                 >\n//                   <img\n//                     className=\"search-avatar-preview\"\n//                     src={\n//                       searchResult.profile.appDisplayPicRaw ||\n//                       \"/default-avatar.png\"\n//                     }\n//                     alt=\"User Avatar\"\n//                   />                  \n//                     <span>{searchResult.profile.gamertag}</span>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Account Info Section with Linked Profiles Toggle */}\n//             <div className=\"account-section\" \n//                 onMouseEnter={() => this.setState({ accountOptionVisible: true })} \n//                 onMouseLeave={() => this.setState({ accountOptionVisible: false })}\n//               >\n//                 <div className=\"gamertag-display\">\n//                   <p>{accountInfo.gamertag}</p>\n//                   {nonSignedLinkedProfiles.length > 0 && (\n//                     <button\n//                       onClick={this.toggleLinkedProfiles}\n//                       className=\"toggle-linked-profiles\"\n//                     >\n//                       {showLinkedProfiles ? \"â–²\" : \"â–¼\"}\n//                     </button>\n//                   )}\n//                 </div>\n\n//                 {/* Profile Image */}\n//                 <img\n//                   src={accountInfo.appDisplayPicRaw}\n//                   alt=\"Profile\"\n//                   className=\"profile-image\"\n//                 />\n\n//                 {/* Hover Dropdown */}\n//                 {this.state.accountOptionVisible && (\n//                   <div className=\"account-options-dropdown\">\n//                     <ul>\n//                       <li>Profile</li>\n//                       <li>Friends</li>\n//                       <li>\n//                         <NavHelper page=\"/my-games\">My Games</NavHelper>\n//                       </li>\n//                       <li>Wishlist</li>\n//                       <li>Collections</li>\n//                       <li>Settings</li>\n//                     </ul>\n//                   </div>\n//                 )}\n//               </div>\n//               {/* Render additional linked profiles when toggled */}\n//               {showLinkedProfiles && (\n//                 <div className=\"linked-profiles\">\n//                   {nonSignedLinkedProfiles.map((profile, index) => (\n//                     <div key={index} className=\"linked-profile-item\">\n//                       <img\n//                         src={profile.appDisplayPicRaw}\n//                         alt=\"Linked Profile\"\n//                         style={{\n//                           width: \"30px\",\n//                           height: \"30px\",\n//                           borderRadius: \"50%\",\n//                         }}\n//                       />\n//                       <span>{profile.gamertag}</span>\n//                     </div>\n//                   ))}\n//                 </div>\n//               )}\n//             {/* </div> */}\n\n//             {/* Only show mailbox if we have at least one pending request */}\n//             {pendingRequests.length > 0 && (\n//               <>\n//                 <button\n//                   className=\"mailbox-button\"\n//                   onClick={this.togglePendingList}\n//                   style={{ position: \"relative\" }}\n//                 >\n//                   Mailbox\n//                   <span className=\"badge\">{pendingRequests.length}</span>\n//                 </button>\n//                 {showPendingList && (\n//                   <div className=\"pending-dropdown\">\n//                     {pendingRequests.length === 0 ? (\n//                       <p>No pending requests</p>\n//                     ) : (\n//                       <ul>\n//                         {pendingRequests.map((req) => (\n//                           <li key={req.id}>\n//                             <p>\n//                               {req.username} sent a follow request ({req.status})\n//                             </p>\n//                             <button onClick={this.handleAcceptBtn}>Accept</button>\n//                             <button>Decline</button>\n//                           </li>\n//                         ))}\n//                       </ul>\n//                     )}\n//                   </div>\n//                 )}\n//               </>\n//             )}\n//           </nav>\n//         </header>\n\n//         {/* Collapsible \"My Friends\" section (outside nav if you prefer) */}\n//         <div\n//           className=\"friends-drop-down\"\n//           onClick={this.toggleFriendsDropDown}\n//           style={{ cursor: \"pointer\", margin: \"8px 16px\" }}\n//         >\n//           <span>My Friends</span>\n//           <span style={{ marginLeft: \"8px\" }}>\n//             {isFriendsDropdownOpen ? \"â–²\" : \"â–¼\"}\n//           </span>\n//         </div>\n\n//         {/* If open, show the friend list */}\n//         {isFriendsDropdownOpen && (\n//           <div className=\"friends-dropdown-content\" style={{ marginLeft: \"32px\" }}>\n//             {friendsList.length === 0 ? (\n//               <p style={{ padding: \"8px\" }}>No friends found.</p>\n//             ) : (\n//               <ul style={{ listStyle: \"none\", margin: 0, padding: 0 }}>\n//                 {friendsList.map((friend) => {\n//                   // If your friend object includes an array of xboxProfiles,\n//                   // let's assume the first one holds the gamertag\n\n//                   let gamertag = \"\";\n//                   if (friend.xboxProfiles && friend.xboxProfiles.length > 0) {\n//                     gamertag = friend.xboxProfiles[0].xboxGamertag;\n//                   }\n\n//                   return (\n//                     <li\n//                       key={friend.id}\n//                       onClick={() => this.navigateToFriendPage(friend.id)}\n//                       style={{\n//                         padding: \"8px\",\n//                         cursor: \"pointer\",\n//                         borderBottom: \"1px solid #ccc\",\n//                       }}\n//                     >\n//                       {friend.username}\n//                       {gamertag ? ` - ${gamertag}` : \"\"}\n//                     </li>\n//                   );\n//                 })}\n//               </ul>\n//             )}\n//           </div>\n//         )}\n\n//         <div className=\"container\">\n//           {/* If a user was found (via search) and we have user profile data */}\n//           {selectedUserProfile && (\n//             <div className=\"selected-user-container\">\n//               <button className=\"close-btn\" onClick={this.handleCloseBtn}>\n//                 X\n//               </button>\n//               <h2>Xbox Profile Details</h2>\n//               <p>Gamertag: {selectedUserProfile.gamertag}</p>\n//               <p>Account Tier: {selectedUserProfile.accountTier}</p>\n//               <p>Gamerscore: {selectedUserProfile.gamerscore}</p>\n//               <p>Tenure Level: {selectedUserProfile.tenureLevel}</p>\n//               <button className=\"add-friend-button\" onClick={this.handleFriendBtn}>\n//                 Add Friend\n//               </button>\n//               <img\n//                 src={selectedUserProfile.gameDisplayPicRaw}\n//                 alt=\"User Avatar\"\n//                 className=\"selected-user-avatar\"\n//               />\n\n//               {/* Show some recent games for the searched user */}\n//               <div className=\"selected-user-games\">\n//                 <h3>Recent Games</h3>\n//                 <div className=\"selected-user-games-list\">\n//                   {selectedUserGames\n//                     .slice(\n//                       0,\n//                       showMoreSelectedUserGames\n//                         ? selectedUserGames.length\n//                         : 2\n//                     )\n//                     .map((game, index) => (\n//                       <div className=\"selected-user-game-card\" key={index}>\n//                         <img src={game.displayImage} alt={game.gameName} />\n//                         <div>{game.gameName}</div>\n//                       </div>\n//                     ))}\n//                 </div>\n//                 {selectedUserGames.length > 2 && (\n//                   <button\n//                     onClick={this.toggleShowMoreSelectedUserGames}\n//                     className=\"toggle-games-button\"\n//                   >\n//                     {showMoreSelectedUserGames ? \"Show Less\" : \"Show More\"}\n//                   </button>\n//                 )}\n//               </div>\n//             </div>\n//           )}\n\n//           <div className=\"main-content\">\n//             <div className=\"news-and-games\">\n//               {/* NEWS FEED */}\n//               <section className=\"news-feed\">\n//                 <h2>News Feed</h2>\n//                 <div className=\"content-box\">\n//                   {isFetchingRecentNews ? (\n//                     <p>Loading news...</p>\n//                   ) : recentNews.length > 0 ? (\n//                     <ul className=\"news-feed-container\">\n//                       {recentNews.map((newsItem, index) => (\n//                         <li className=\"news-item\" key={index}>\n//                           <img\n//                             className=\"news-main-image\"\n//                             src={newsItem.background_image}\n//                             alt={newsItem.name}\n//                           />\n//                           <div className=\"news-item-content\">\n//                             <h2 className=\"news-title\">{newsItem.name}</h2>\n//                             <p className=\"news-available-on\">\n//                               Available on:{\" \"}\n//                               {newsItem.platforms && newsItem.platforms.length > 0\n//                                 ? checkAccountType(\n//                                     [\n//                                       ...new Set(\n//                                         newsItem.platforms.map((p) =>\n//                                           p.platform.name.toLowerCase()\n//                                         )\n//                                       ),\n//                                     ]\n//                                   )\n//                                 : \"N/A\"}\n//                             </p>\n\n//                             <div className=\"news-extra-details\">\n//                               <p className=\"news-release-date\">\n//                                 Release Date: {newsItem.released}\n//                               </p>\n//                               <div className=\"genres\">\n//                                 <ul>\n//                                   {newsItem.genres?.map((genre, idx) => (\n//                                     <li key={idx}>{genre.name}</li>\n//                                   ))}\n//                                 </ul>\n//                               </div>\n//                               <button\n//                                 className=\"share-button\"\n//                                 onClick={() => this.handleShareNews(newsItem)}\n//                               >\n//                                 Share to Community\n//                               </button>\n//                               <div className=\"screenshots-container\">\n//                                 {newsItem.short_screenshots?.map(\n//                                   (screenshot, idx) => (\n//                                     <img\n//                                       key={idx}\n//                                       className=\"screenshot-img\"\n//                                       src={screenshot.image}\n//                                       alt={`Screenshot ${idx + 1}`}\n//                                     />\n//                                   )\n//                                 )}\n//                               </div>\n//                             </div>\n//                           </div>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   ) : (\n//                     <p>No news found.</p>\n//                   )}\n//                 </div>\n//               </section>\n\n//               {/* RECENT GAMES */}\n//               <section className=\"recent-games\">\n//                 <h2>Recent Games</h2>\n//                 <div className=\"content-box\">\n//                   {isFetchingRecentGames ? (\n//                     <p>Loading recent games...</p>\n//                   ) : recentGames.length > 0 ? (\n//                     <div className=\"game-list\">\n//                       {recentGames.map((game, index) => (\n//                         <div className=\"game-card\" key={index}>\n//                           <img src={game.displayImage} alt={game.name} />\n//                           <div className=\"game-name\">{game.name}</div>\n//                           <div className=\"game-info\">\n//                             {game.titleHistory &&\n//                             game.titleHistory.lastTimePlayedFormatted\n//                               ? `Last Played: ${game.titleHistory.lastTimePlayedFormatted}`\n//                               : \"Playtime not available\"}\n//                           </div>\n//                           <div className=\"game-devices\">\n//                             {game.devices && game.devices.length > 0\n//                               ? `Played on: ${game.devices.join(\", \")}`\n//                               : \"No devices found\"}\n//                           </div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   ) : (\n//                     <p>No recent games found.</p>\n//                   )}\n//                 </div>\n//               </section>\n//             </div>\n\n//             {/* FRIENDS LIST (Xbox friends, if platform is Xbox) */}\n//             <aside className=\"friends-list\">\n//               <h2>Friends</h2>\n//               <div className=\"content-box\">\n//                 {isFetchingFriends ? (\n//                   <p>Loading friends...</p>\n//                 ) : friends.length > 0 ? (\n//                   <ul className=\"friends-list-container\">\n//                     {friends.map((friend, index) => (\n//                       <li className=\"friend-item\" key={index}>\n//                         <img\n//                           className=\"friend-avatar\"\n//                           src={friend.displayPicRaw || \"/default-avatar.png\"}\n//                           alt={`Avatar of ${friend.gamertag}`}\n//                         />\n//                         <div className=\"friend-details\">\n//                           <p className=\"friend-gamertag\">{friend.gamertag}</p>\n//                           <p className=\"friend-realname\">\n//                             {friend.realName || \"Unknown\"}\n//                           </p>\n//                           <p className=\"friend-presence\">\n//                             {friend.presenceState === \"Online\" ? (\n//                               <span style={{ color: \"green\" }}>Online</span>\n//                             ) : (\n//                               friend.presenceText || \"Offline\"\n//                             )}\n//                           </p>\n//                         </div>\n//                         {friend.isFavorite && (\n//                           <span className=\"favorite-icon\">â˜…</span>\n//                         )}\n//                       </li>\n//                     ))}\n//                   </ul>\n//                 ) : (\n//                   <p>No friends found.</p>\n//                 )}\n//               </div>\n//             </aside>\n//           </div>\n//         </div>\n\n//         <footer className=\"footer\">\n//           <p>About: Created by Ahmad Bishara</p>\n//           <a\n//             href=\"https://github.com/ahmadb123\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             GitHub: ahmadb123\n//           </a>\n//         </footer>\n//       </div>\n//     );\n//   }\n// }\n\n// // Higher-order component to wrap HomePage with navigate\n// const HomePageWithNavigate = (props) => {\n//   const navigate = useNavigate();\n//   return <HomePage {...props} navigate={navigate} />;\n// };\n\n// export default HomePageWithNavigate;","map":{"version":3,"names":[],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/HomePage.js"],"sourcesContent":["// // src/components/HomePage.jsx\n// import React, { Component } from \"react\";\n// import { toast } from \"react-toastify\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../assests/HomePage.css\";\n// import NavHelper  from '../component/NavHelper';\n// import {\n//   fetchXboxProfile,\n//   fetchPSNProfile,\n//   fetchSteamProfile,\n// } from \"../service/profileService\";\n\n// import { fetchXboxFriends } from \"../service/friendsService\";\n// import { getRecentGames } from \"../service/RecentGamesXbox\";\n// import { fetchRecentNews } from \"../service/NewsService\";\n// import { postNews } from \"../service/PostNewsService\";\n// import { checkAccountType } from \"../utility/CheckAccountType\";\n// import {\n//   searchUserProfile,\n//   getAllLinkedProfiles,\n// } from \"../service/searchUserProfile\"; // Added getAllLinkedProfiles\n// import { addFriend } from \"../service/AddFriendService\"; // add friend service\n// import {\n//   checkFriendRequest,\n//   acceptFriendRequest,\n//   getAllFriends,\n// } from \"../service/AddFriendService\";\n\n// class HomePage extends Component {\n//   state = {\n//     accountInfo: null,\n//     platform: null,\n//     isFetching: true,\n\n//     friends: [], // from fetchXboxFriends (Xbox only)\n//     isFetchingFriends: true,\n\n//     recentGames: [],\n//     isFetchingRecentGames: true,\n\n//     recentNews: [],\n//     isFetchingRecentNews: true,\n\n//     showMoreGames: false,\n\n//     // For searching other users:\n//     searchQuery: \"\",\n//     searchResult: null,\n//     selectedUser: null,\n//     selectedUserProfile: null,\n//     selectedUserGames: [],\n//     showMoreSelectedUserGames: false,\n\n//     // For linked profiles (for example, Xbox linked accounts)\n//     linkedProfiles: [],\n//     showLinkedProfiles: false, // Controls whether the linked profiles list is visible\n\n//     pendingRequests: [],\n//     showPendingList: false,\n\n//     showFriendList: false,\n//     acceptFriendRequest: [],\n\n//     // For custom friend list from your backend\n//     friendsList: [], // Mismatch corrected: we store the entire friend object(s) here\n//     isFriendsDropdownOpen: false,\n//     // state for dropdwon visibility \n//     accountOptionVisible: false,\n//   };\n\n//   // methods to handle mouse hover events - \n//   mouseOverToggle = () =>{\n//     this.setState({accountOptionVisible: true});\n//   };\n\n//   mouseOutToggle = () =>{\n//     this.setState({accountOptionVisible: false});\n//   };\n\n//   componentDidMount() {\n//     this.fetchNews();\n//     const platform = localStorage.getItem(\"platform\");\n//     console.log(\"HomePage mounting with platform:\", platform);\n\n//     if (!platform) {\n//       toast.error(\"No platform selected. Please log in again.\");\n//       window.location.href = \"/\";\n//       return;\n//     }\n\n//     // pick the right profile fetcher\n//     const profileFetchers = {\n//       xbox: fetchXboxProfile,\n//       psn: fetchPSNProfile,\n//       steam: fetchSteamProfile,\n//     };\n\n//     const fetchProfile = profileFetchers[platform];\n//     if (!fetchProfile) {\n//       toast.error(\"Unsupported platform. Please log in again.\");\n//       window.location.href = \"/\";\n//       return;\n//     }\n\n//     this.setState({ platform });\n\n//     // load the user account info, then friends & linked profiles if needed\n//     const fetchAccountInfo = async () => {\n//       try {\n//         const accountInfo = await fetchProfile();\n//         this.setState({ accountInfo, isFetching: false });\n\n//         if (platform === \"xbox\") {\n//           // Fetch friends for Xbox\n//           try {\n//             const friends = await fetchXboxFriends();\n//             this.setState({ friends, isFetchingFriends: false });\n//           } catch (error) {\n//             console.error(error);\n//             toast.error(\"Failed to fetch friends list.\");\n//           }\n\n//           // Fetch linked profiles\n//           try {\n//             const linkedProfiles = await getAllLinkedProfiles();\n//             this.setState({ linkedProfiles });\n//           } catch (error) {\n//             console.error(error);\n//             toast.error(\"Failed to fetch linked profiles.\");\n//           }\n//         }\n\n//         // steam - \n//         if (platform === \"steam\") {\n//           // fetch profile info for steam - \n//         }\n\n//         // Fetch recent games\n//         try {\n//           const recentGames = await getRecentGames();\n//           this.setState({ recentGames, isFetchingRecentGames: false });\n//         } catch (error) {\n//           console.error(error);\n//           toast.error(\"Failed to fetch recent games.\");\n//         }\n//       } catch (error) {\n//         console.error(error);\n//         localStorage.removeItem(\"platform\");\n//         toast.error(\"Failed to fetch profile information.\");\n//         window.location.href = \"/\";\n//       }\n//     };\n\n//     fetchAccountInfo();\n//     this.checkForPendingRequests();\n\n//     // Optionally fetch the custom friend list from your own backend\n//     this.fetchFriendsList();\n//   }\n\n//   fetchNews = async () => {\n//     this.setState({ isFetchingRecentNews: true });\n//     try {\n//       const news = await fetchRecentNews();\n//       this.setState({ recentNews: news, isFetchingRecentNews: false });\n//     } catch (error) {\n//       console.error(error);\n//       toast.error(\"Failed to fetch recent news.\");\n//       this.setState({ isFetchingRecentNews: false });\n//     }\n//   };\n\n//   // fetch the custom friend list from your backend\n//   fetchFriendsList = async () => {\n//     try {\n//       const friendsList = await getAllFriends(); // from AddFriendService\n//       console.log(\"All friends list:\", friendsList);\n//       this.setState({ friendsList });\n//     } catch (err) {\n//       console.error(\"Failed to fetch all friends list:\", err);\n//     }\n//   };\n\n//   // Toggle the collapsible friend list\n//   toggleFriendsDropDown = async () => {\n//     // If about to open the dropdown, refresh the data (optional)\n//     if (!this.state.isFriendsDropdownOpen) {\n//       await this.fetchFriendsList();\n//     }\n//     this.setState((prev) => ({\n//       isFriendsDropdownOpen: !prev.isFriendsDropdownOpen,\n//     }));\n//   };\n\n//   // If you want to navigate to a friendâ€™s page\n//   navigateToFriendPage = (friendId) => {\n//     this.props.navigate(`/user/${friendId}`);\n//   };\n\n//   // Check for pending friend requests\n//   checkForPendingRequests = async () => {\n//     try {\n//       const pendingRequests = await checkFriendRequest();\n//       console.log(\"Pending friend requests:\", pendingRequests);\n//       this.setState({ pendingRequests });\n//       if (this.state.pendingRequests[0]?.status === \"accept\") {\n//         this.setState({ showFriendList: true, showPendingList: false });\n//       }\n//     } catch (err) {\n//       console.error(\"Failed to fetch pending friend requests:\", err);\n//     }\n//   };\n\n//   togglePendingList = () => {\n//     this.setState((prev) => ({ showPendingList: !prev.showPendingList }));\n//   };\n\n//   // handle accept button\n//   handleAcceptBtn = async () => {\n//     try {\n//       // username of requester from the pending request\n//       const username = this.state.pendingRequests[0].username;\n//       const acceptFriend = await acceptFriendRequest(username);\n//       console.log(\"Accepting friend request:\", acceptFriend);\n//       this.setState({ acceptFriendRequest: acceptFriend });\n//     } catch (err) {\n//       console.error(\"Failed to accept friend request:\", err);\n//     }\n//   };\n\n//   // handle adding a friend\n//   handleFriendBtn = async () => {\n//     try {\n//       const userToRequest = this.state.selectedUserProfile.username;\n//       console.log(\"Adding friend:\", userToRequest);\n\n//       const result = await addFriend(userToRequest);\n//       if (result.success) {\n//         toast.success(\"Friend request sent successfully.\");\n//       } else {\n//         toast.error(\"Failed to send friend request.\");\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error(\"Failed to send friend request.\");\n//     }\n//   };\n\n//   // handle search user change\n//   handleSearchChange = async (event) => {\n//     const newQuery = event.target.value;\n//     this.setState({ searchQuery: newQuery, selectedUser: null }, async () => {\n//       if (newQuery.length < 3) {\n//         this.setState({ searchResult: null });\n//         return;\n//       }\n\n//       try {\n//         const result = await searchUserProfile(newQuery);\n//         console.log(\"Search result:\", result);\n\n//         if (result) {\n//           this.setState({\n//             searchResult: result,\n//             selectedUserProfile: result.profile,\n//             selectedUserGames: result.recentGames,\n//           });\n//         } else {\n//           this.setState({\n//             searchResult: null,\n//             selectedUserProfile: null,\n//             selectedUserGames: [],\n//           });\n//         }\n//       } catch (error) {\n//         console.error(\"Auto-search error:\", error);\n//         toast.error(\"Failed to search user profile.\");\n//         this.setState({ searchResult: null });\n//       }\n//     });\n//   };\n\n//   // Close the selected user profile box\n//   handleCloseBtn = () => {\n//     this.setState({\n//       selectedUser: null,\n//       selectedUserProfile: null,\n//       selectedUserGames: [],\n//     });\n//   };\n\n//   // Toggle to show more user games (for search results)\n//   toggleShowMoreSelectedUserGames = () => {\n//     this.setState((prevState) => ({\n//       showMoreSelectedUserGames: !prevState.showMoreSelectedUserGames,\n//     }));\n//   };\n\n//   // Toggle to show/hide the linked profiles list\n//   toggleLinkedProfiles = () => {\n//     this.setState((prevState) => ({\n//       showLinkedProfiles: !prevState.showLinkedProfiles,\n//     }));\n//   };\n\n//   // Toggle to show more games (own profile)\n//   handleShowMoreGames = () => {\n//     this.setState((prevState) => ({\n//       showMoreGames: !prevState.showMoreGames,\n//     }));\n//   };\n\n//   // navigation helpers\n//   navigateClips = () => {\n//     this.props.navigate(\"/clips\");\n//   };\n//   navigateCommunity = () => {\n//     this.props.navigate(\"/community\");\n//   };\n//   navigateNews = () => {\n//     this.props.navigate(\"/news\");\n//   }\n//   navigateMyGames = () => {\n//     this.props.navigate(\"/mygames\");\n//   }\n\n//   // share news\n//   handleShareNews = async (news) => {\n//     const contentText = `Check out this news: ${news.name}`;\n//     const sharedNewsId = news.slug; \n//     console.log(\"Sharing news with ID:\", sharedNewsId);\n\n//     try {\n//       const result = await postNews(contentText, sharedNewsId);\n//       if (result.success) {\n//         toast.success(\"News shared successfully.\");\n//       } else {\n//         toast.error(\"Failed to share news.\");\n//       }\n//     } catch (error) {\n//       console.error(error);\n//       toast.error(\"Failed to share news.\");\n//     }\n//   };\n\n//   render() {\n//     // Destructure the main state variables you need in render\n//     const {\n//       accountInfo,\n//       isFetching,\n//       friends,\n//       isFetchingFriends,\n//       recentGames,\n//       isFetchingRecentGames,\n//       recentNews,\n//       isFetchingRecentNews,\n//       searchQuery,\n//       searchResult,\n//       selectedUserProfile,\n//       selectedUserGames,\n//       showMoreSelectedUserGames,\n//       linkedProfiles,\n//       showLinkedProfiles,\n//       pendingRequests,\n//       showPendingList,\n//       // newly destructured:\n//       friendsList,\n//       isFriendsDropdownOpen,\n//     } = this.state;\n\n//     if (isFetching) {\n//       return <p>Loading profile...</p>;\n//     }\n\n//     // Filter out linked profiles so that only unsinged (other) profiles are shown\n//     const nonSignedLinkedProfiles = linkedProfiles.filter(\n//       (profile) => profile.gamertag !== accountInfo.gamertag\n//     );\n\n//     return (\n//       <div className=\"gamerhub\">\n//         {/* HEADER / NAV */}\n//         <header className=\"header\">\n//           <h1 className=\"logo\">GamerHUB</h1>\n//           <nav className=\"navbar\">\n//             <button onClick={this.navigateNews} className=\"nav-button\">\n//               News\n//             </button>\n//             <button onClick={this.navigateClips} className=\"nav-button\">\n//               CLIPS\n//             </button>\n//             <button onClick={this.navigateCommunity} className=\"nav-button\">\n//               Community Insight\n//             </button>\n\n//             {/* SEARCH BAR */}\n//             <div className=\"search-bar\">\n//               <input\n//                 type=\"text\"\n//                 placeholder=\"Search User...\"\n//                 className=\"search-input\"\n//                 value={searchQuery || \"\"}\n//                 onChange={this.handleSearchChange}\n//               />\n//               {/* If user typed >=3 chars and we have a searchResult, show a preview */}\n//               {searchQuery.length >= 3 && searchResult && (\n//                 <div\n//                   className=\"search-result-preview\"\n//                   onClick={() =>\n//                     this.setState({\n//                       selectedUser: searchResult,\n//                       searchQuery: \"\",\n//                       searchResult: null,\n//                     })\n//                   }\n//                 >\n//                   <img\n//                     className=\"search-avatar-preview\"\n//                     src={\n//                       searchResult.profile.appDisplayPicRaw ||\n//                       \"/default-avatar.png\"\n//                     }\n//                     alt=\"User Avatar\"\n//                   />                  \n//                     <span>{searchResult.profile.gamertag}</span>\n//                 </div>\n//               )}\n//             </div>\n\n//             {/* Account Info Section with Linked Profiles Toggle */}\n//             <div className=\"account-section\" \n//                 onMouseEnter={() => this.setState({ accountOptionVisible: true })} \n//                 onMouseLeave={() => this.setState({ accountOptionVisible: false })}\n//               >\n//                 <div className=\"gamertag-display\">\n//                   <p>{accountInfo.gamertag}</p>\n//                   {nonSignedLinkedProfiles.length > 0 && (\n//                     <button\n//                       onClick={this.toggleLinkedProfiles}\n//                       className=\"toggle-linked-profiles\"\n//                     >\n//                       {showLinkedProfiles ? \"â–²\" : \"â–¼\"}\n//                     </button>\n//                   )}\n//                 </div>\n\n//                 {/* Profile Image */}\n//                 <img\n//                   src={accountInfo.appDisplayPicRaw}\n//                   alt=\"Profile\"\n//                   className=\"profile-image\"\n//                 />\n\n//                 {/* Hover Dropdown */}\n//                 {this.state.accountOptionVisible && (\n//                   <div className=\"account-options-dropdown\">\n//                     <ul>\n//                       <li>Profile</li>\n//                       <li>Friends</li>\n//                       <li>\n//                         <NavHelper page=\"/my-games\">My Games</NavHelper>\n//                       </li>\n//                       <li>Wishlist</li>\n//                       <li>Collections</li>\n//                       <li>Settings</li>\n//                     </ul>\n//                   </div>\n//                 )}\n//               </div>\n//               {/* Render additional linked profiles when toggled */}\n//               {showLinkedProfiles && (\n//                 <div className=\"linked-profiles\">\n//                   {nonSignedLinkedProfiles.map((profile, index) => (\n//                     <div key={index} className=\"linked-profile-item\">\n//                       <img\n//                         src={profile.appDisplayPicRaw}\n//                         alt=\"Linked Profile\"\n//                         style={{\n//                           width: \"30px\",\n//                           height: \"30px\",\n//                           borderRadius: \"50%\",\n//                         }}\n//                       />\n//                       <span>{profile.gamertag}</span>\n//                     </div>\n//                   ))}\n//                 </div>\n//               )}\n//             {/* </div> */}\n\n//             {/* Only show mailbox if we have at least one pending request */}\n//             {pendingRequests.length > 0 && (\n//               <>\n//                 <button\n//                   className=\"mailbox-button\"\n//                   onClick={this.togglePendingList}\n//                   style={{ position: \"relative\" }}\n//                 >\n//                   Mailbox\n//                   <span className=\"badge\">{pendingRequests.length}</span>\n//                 </button>\n//                 {showPendingList && (\n//                   <div className=\"pending-dropdown\">\n//                     {pendingRequests.length === 0 ? (\n//                       <p>No pending requests</p>\n//                     ) : (\n//                       <ul>\n//                         {pendingRequests.map((req) => (\n//                           <li key={req.id}>\n//                             <p>\n//                               {req.username} sent a follow request ({req.status})\n//                             </p>\n//                             <button onClick={this.handleAcceptBtn}>Accept</button>\n//                             <button>Decline</button>\n//                           </li>\n//                         ))}\n//                       </ul>\n//                     )}\n//                   </div>\n//                 )}\n//               </>\n//             )}\n//           </nav>\n//         </header>\n\n//         {/* Collapsible \"My Friends\" section (outside nav if you prefer) */}\n//         <div\n//           className=\"friends-drop-down\"\n//           onClick={this.toggleFriendsDropDown}\n//           style={{ cursor: \"pointer\", margin: \"8px 16px\" }}\n//         >\n//           <span>My Friends</span>\n//           <span style={{ marginLeft: \"8px\" }}>\n//             {isFriendsDropdownOpen ? \"â–²\" : \"â–¼\"}\n//           </span>\n//         </div>\n\n//         {/* If open, show the friend list */}\n//         {isFriendsDropdownOpen && (\n//           <div className=\"friends-dropdown-content\" style={{ marginLeft: \"32px\" }}>\n//             {friendsList.length === 0 ? (\n//               <p style={{ padding: \"8px\" }}>No friends found.</p>\n//             ) : (\n//               <ul style={{ listStyle: \"none\", margin: 0, padding: 0 }}>\n//                 {friendsList.map((friend) => {\n//                   // If your friend object includes an array of xboxProfiles,\n//                   // let's assume the first one holds the gamertag\n                  \n//                   let gamertag = \"\";\n//                   if (friend.xboxProfiles && friend.xboxProfiles.length > 0) {\n//                     gamertag = friend.xboxProfiles[0].xboxGamertag;\n//                   }\n\n//                   return (\n//                     <li\n//                       key={friend.id}\n//                       onClick={() => this.navigateToFriendPage(friend.id)}\n//                       style={{\n//                         padding: \"8px\",\n//                         cursor: \"pointer\",\n//                         borderBottom: \"1px solid #ccc\",\n//                       }}\n//                     >\n//                       {friend.username}\n//                       {gamertag ? ` - ${gamertag}` : \"\"}\n//                     </li>\n//                   );\n//                 })}\n//               </ul>\n//             )}\n//           </div>\n//         )}\n\n//         <div className=\"container\">\n//           {/* If a user was found (via search) and we have user profile data */}\n//           {selectedUserProfile && (\n//             <div className=\"selected-user-container\">\n//               <button className=\"close-btn\" onClick={this.handleCloseBtn}>\n//                 X\n//               </button>\n//               <h2>Xbox Profile Details</h2>\n//               <p>Gamertag: {selectedUserProfile.gamertag}</p>\n//               <p>Account Tier: {selectedUserProfile.accountTier}</p>\n//               <p>Gamerscore: {selectedUserProfile.gamerscore}</p>\n//               <p>Tenure Level: {selectedUserProfile.tenureLevel}</p>\n//               <button className=\"add-friend-button\" onClick={this.handleFriendBtn}>\n//                 Add Friend\n//               </button>\n//               <img\n//                 src={selectedUserProfile.gameDisplayPicRaw}\n//                 alt=\"User Avatar\"\n//                 className=\"selected-user-avatar\"\n//               />\n\n//               {/* Show some recent games for the searched user */}\n//               <div className=\"selected-user-games\">\n//                 <h3>Recent Games</h3>\n//                 <div className=\"selected-user-games-list\">\n//                   {selectedUserGames\n//                     .slice(\n//                       0,\n//                       showMoreSelectedUserGames\n//                         ? selectedUserGames.length\n//                         : 2\n//                     )\n//                     .map((game, index) => (\n//                       <div className=\"selected-user-game-card\" key={index}>\n//                         <img src={game.displayImage} alt={game.gameName} />\n//                         <div>{game.gameName}</div>\n//                       </div>\n//                     ))}\n//                 </div>\n//                 {selectedUserGames.length > 2 && (\n//                   <button\n//                     onClick={this.toggleShowMoreSelectedUserGames}\n//                     className=\"toggle-games-button\"\n//                   >\n//                     {showMoreSelectedUserGames ? \"Show Less\" : \"Show More\"}\n//                   </button>\n//                 )}\n//               </div>\n//             </div>\n//           )}\n\n//           <div className=\"main-content\">\n//             <div className=\"news-and-games\">\n//               {/* NEWS FEED */}\n//               <section className=\"news-feed\">\n//                 <h2>News Feed</h2>\n//                 <div className=\"content-box\">\n//                   {isFetchingRecentNews ? (\n//                     <p>Loading news...</p>\n//                   ) : recentNews.length > 0 ? (\n//                     <ul className=\"news-feed-container\">\n//                       {recentNews.map((newsItem, index) => (\n//                         <li className=\"news-item\" key={index}>\n//                           <img\n//                             className=\"news-main-image\"\n//                             src={newsItem.background_image}\n//                             alt={newsItem.name}\n//                           />\n//                           <div className=\"news-item-content\">\n//                             <h2 className=\"news-title\">{newsItem.name}</h2>\n//                             <p className=\"news-available-on\">\n//                               Available on:{\" \"}\n//                               {newsItem.platforms && newsItem.platforms.length > 0\n//                                 ? checkAccountType(\n//                                     [\n//                                       ...new Set(\n//                                         newsItem.platforms.map((p) =>\n//                                           p.platform.name.toLowerCase()\n//                                         )\n//                                       ),\n//                                     ]\n//                                   )\n//                                 : \"N/A\"}\n//                             </p>\n\n//                             <div className=\"news-extra-details\">\n//                               <p className=\"news-release-date\">\n//                                 Release Date: {newsItem.released}\n//                               </p>\n//                               <div className=\"genres\">\n//                                 <ul>\n//                                   {newsItem.genres?.map((genre, idx) => (\n//                                     <li key={idx}>{genre.name}</li>\n//                                   ))}\n//                                 </ul>\n//                               </div>\n//                               <button\n//                                 className=\"share-button\"\n//                                 onClick={() => this.handleShareNews(newsItem)}\n//                               >\n//                                 Share to Community\n//                               </button>\n//                               <div className=\"screenshots-container\">\n//                                 {newsItem.short_screenshots?.map(\n//                                   (screenshot, idx) => (\n//                                     <img\n//                                       key={idx}\n//                                       className=\"screenshot-img\"\n//                                       src={screenshot.image}\n//                                       alt={`Screenshot ${idx + 1}`}\n//                                     />\n//                                   )\n//                                 )}\n//                               </div>\n//                             </div>\n//                           </div>\n//                         </li>\n//                       ))}\n//                     </ul>\n//                   ) : (\n//                     <p>No news found.</p>\n//                   )}\n//                 </div>\n//               </section>\n\n//               {/* RECENT GAMES */}\n//               <section className=\"recent-games\">\n//                 <h2>Recent Games</h2>\n//                 <div className=\"content-box\">\n//                   {isFetchingRecentGames ? (\n//                     <p>Loading recent games...</p>\n//                   ) : recentGames.length > 0 ? (\n//                     <div className=\"game-list\">\n//                       {recentGames.map((game, index) => (\n//                         <div className=\"game-card\" key={index}>\n//                           <img src={game.displayImage} alt={game.name} />\n//                           <div className=\"game-name\">{game.name}</div>\n//                           <div className=\"game-info\">\n//                             {game.titleHistory &&\n//                             game.titleHistory.lastTimePlayedFormatted\n//                               ? `Last Played: ${game.titleHistory.lastTimePlayedFormatted}`\n//                               : \"Playtime not available\"}\n//                           </div>\n//                           <div className=\"game-devices\">\n//                             {game.devices && game.devices.length > 0\n//                               ? `Played on: ${game.devices.join(\", \")}`\n//                               : \"No devices found\"}\n//                           </div>\n//                         </div>\n//                       ))}\n//                     </div>\n//                   ) : (\n//                     <p>No recent games found.</p>\n//                   )}\n//                 </div>\n//               </section>\n//             </div>\n\n//             {/* FRIENDS LIST (Xbox friends, if platform is Xbox) */}\n//             <aside className=\"friends-list\">\n//               <h2>Friends</h2>\n//               <div className=\"content-box\">\n//                 {isFetchingFriends ? (\n//                   <p>Loading friends...</p>\n//                 ) : friends.length > 0 ? (\n//                   <ul className=\"friends-list-container\">\n//                     {friends.map((friend, index) => (\n//                       <li className=\"friend-item\" key={index}>\n//                         <img\n//                           className=\"friend-avatar\"\n//                           src={friend.displayPicRaw || \"/default-avatar.png\"}\n//                           alt={`Avatar of ${friend.gamertag}`}\n//                         />\n//                         <div className=\"friend-details\">\n//                           <p className=\"friend-gamertag\">{friend.gamertag}</p>\n//                           <p className=\"friend-realname\">\n//                             {friend.realName || \"Unknown\"}\n//                           </p>\n//                           <p className=\"friend-presence\">\n//                             {friend.presenceState === \"Online\" ? (\n//                               <span style={{ color: \"green\" }}>Online</span>\n//                             ) : (\n//                               friend.presenceText || \"Offline\"\n//                             )}\n//                           </p>\n//                         </div>\n//                         {friend.isFavorite && (\n//                           <span className=\"favorite-icon\">â˜…</span>\n//                         )}\n//                       </li>\n//                     ))}\n//                   </ul>\n//                 ) : (\n//                   <p>No friends found.</p>\n//                 )}\n//               </div>\n//             </aside>\n//           </div>\n//         </div>\n\n//         <footer className=\"footer\">\n//           <p>About: Created by Ahmad Bishara</p>\n//           <a\n//             href=\"https://github.com/ahmadb123\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             GitHub: ahmadb123\n//           </a>\n//         </footer>\n//       </div>\n//     );\n//   }\n// }\n\n// // Higher-order component to wrap HomePage with navigate\n// const HomePageWithNavigate = (props) => {\n//   const navigate = useNavigate();\n//   return <HomePage {...props} navigate={navigate} />;\n// };\n\n// export default HomePageWithNavigate;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}