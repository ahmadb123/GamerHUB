{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n HTTP\n Copy\n POST https://titleId.playfabapi.com/Server/LoginWithXbox\n Request Header\n Name\tRequired\tType\tDescription\n X-SecretKey\tTrue\t\n string\n This API requires a title secret key, available to title admins, from PlayFab Game Manager.\n Request Body\n Name\tRequired\tType\tDescription\n XboxToken\tTrue\t\n string\n Token provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\n URL to use for the MSAL \n https://login.microsoftonline.com/common/\t\n */\n}\nconst msalConfig = {\n  auth: {\n    clientId: \"your_client_id\",\n    // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/common/\",\n    // Common authority for all Microsoft accounts\n    redirectUri: \"http://localhost:3000\" // Replace with your application's redirect URI\n  }\n};\nconst LoginWithMicrosoft = () => {\n  _s();\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n  const msalInstance = new PublicClientApplication(msalConfig);\n  const login = async () => {\n    try {\n      // Trigger MSAL login\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"XboxLive.signin\", \"user.read\"] // Define the required scopes\n      });\n\n      // Get the access token\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"XboxLive.signin\", \"user.read\"],\n        account: loginResponse.account\n      });\n      setToken(tokenResponse.accessToken);\n\n      // Send the token to the backend\n      const response = await fetch(\"http://your-backend-url/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          XboxToken: tokenResponse.accessToken // Token to be exchanged with PlayFab\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Login successful:\", data);\n      } else {\n        console.error(\"Error during backend login:\", response.statusText);\n      }\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Login error:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login with Microsoft\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), token && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Token retrieved: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 7\n  }, this);\n};\n_s(LoginWithMicrosoft, \"nfS37zQFpPmfVO5pRBjF5Jb6zvc=\");\n_c = LoginWithMicrosoft;\nexport default LoginWithMicrosoft;\nvar _c;\n$RefreshReg$(_c, \"LoginWithMicrosoft\");","map":{"version":3,"names":["React","useState","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","LoginWithMicrosoft","_s","token","setToken","error","setError","msalInstance","login","loginResponse","loginPopup","scopes","tokenResponse","acquireTokenSilent","account","accessToken","response","fetch","method","headers","body","JSON","stringify","XboxToken","ok","data","json","console","log","statusText","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\n{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n\nHTTP\n\nCopy\nPOST https://titleId.playfabapi.com/Server/LoginWithXbox\nRequest Header\nName\tRequired\tType\tDescription\nX-SecretKey\tTrue\t\nstring\n\nThis API requires a title secret key, available to title admins, from PlayFab Game Manager.\n\nRequest Body\nName\tRequired\tType\tDescription\nXboxToken\tTrue\t\nstring\n\nToken provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\nURL to use for the MSAL \nhttps://login.microsoftonline.com/common/\t\n\n*/\n}\n\nconst msalConfig = {\n    auth: {\n      clientId: \"your_client_id\", // Replace with your Azure AD app's client ID\n      authority: \"https://login.microsoftonline.com/common/\", // Common authority for all Microsoft accounts\n      redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n    },\n  };\n\n  \n  const LoginWithMicrosoft = () => {\n    const [token, setToken] = useState(null);\n    const [error, setError] = useState(null);\n  \n    const msalInstance = new PublicClientApplication(msalConfig);\n  \n    const login = async () => {\n      try {\n        // Trigger MSAL login\n        const loginResponse = await msalInstance.loginPopup({\n          scopes: [\"XboxLive.signin\", \"user.read\"], // Define the required scopes\n        });\n  \n        // Get the access token\n        const tokenResponse = await msalInstance.acquireTokenSilent({\n          scopes: [\"XboxLive.signin\", \"user.read\"],\n          account: loginResponse.account,\n        });\n  \n        setToken(tokenResponse.accessToken);\n  \n        // Send the token to the backend\n        const response = await fetch(\"http://your-backend-url/api/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            XboxToken: tokenResponse.accessToken, // Token to be exchanged with PlayFab\n          }),\n        });\n  \n        if (response.ok) {\n          const data = await response.json();\n          console.log(\"Login successful:\", data);\n        } else {\n          console.error(\"Error during backend login:\", response.statusText);\n        }\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Login error:\", err);\n      }\n    };\n  \n    return (\n      <div>\n        <h1>Login with Microsoft</h1>\n        <button onClick={login}>Login</button>\n        {token && <p>Token retrieved: {token}</p>}\n        {error && <p>Error: {error}</p>}\n      </div>\n    );\n  };\n  \n  export default LoginWithMicrosoft;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}