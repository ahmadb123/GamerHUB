{"ast":null,"code":"import { PublicClientApplication } from \"@azure/msal-browser\";\nimport axios from 'axios';\nconst msalConfig = {\n  auth: {\n    clientId: \"f6916aa3-e279-4c0c-90a7-c9706fd211fe\",\n    // Your Client ID\n    authority: \"https://login.microsoftonline.com/common\",\n    redirectUri: \"http://localhost:3000\" // Your redirect URI\n  }\n};\nconst msalInstance = new PublicClientApplication(msalConfig);\n\n// You might have a button for the user to \"Sign in with Xbox\"\nasync function signInWithXbox() {\n  try {\n    // Use MSAL to sign the user in and get a Microsoft access token\n    const authResult = await msalInstance.loginPopup({\n      scopes: [\"openid\", \"profile\", \"User.Read\"]\n    });\n    const microsoftAccessToken = authResult.accessToken;\n\n    // Now you have a Microsoft access token. \n    // This is NOT the same as an Xbox Live token. You'll need to exchange it with Xbox Live endpoints:\n    // The steps usually involve calling the Xbox Live authorization endpoints:\n    // 1. Get Xbox Live User Token (xblToken)\n    // 2. Get XSTS token\n    //\n    // Pseudo steps (not production-ready):\n    // const xblResponse = await fetchXboxLiveUserToken(microsoftAccessToken);\n    // const xblToken = xblResponse.Token;\n    // const xstsResponse = await fetchXSTSToken(xblToken);\n    // const xboxToken = xstsResponse.Token; // This is what you ultimately send to your backend\n\n    const xboxToken = await getXboxTokenFromMicrosoftAccessToken(microsoftAccessToken);\n    // `getXboxTokenFromMicrosoftAccessToken` is a placeholder function where you'd implement\n    // the calls to the Xbox Live endpoints to retrieve the final XSTS token.\n\n    // Once you have the xboxToken (XSTS), send it to your backend\n    const response = await axios.post(\"http://localhost:8080/api/auth/xbox\", {\n      XboxToken: xboxToken,\n      CreateAccount: true\n    });\n    console.log(\"Login successful:\", response.data);\n  } catch (error) {\n    console.error(\"Error during sign-in:\", error);\n  }\n}\n\n// Placeholder function: You must implement the actual calls\nasync function getXboxTokenFromMicrosoftAccessToken(msToken) {\n  // 1. Call Xbox Live auth endpoint (e.g., XblUserAuth)\n  // 2. Exchange for XSTS token\n  // Return the XSTS token\n  return \"FAKE_XSTS_TOKEN_FOR_EXAMPLE\";\n}","map":{"version":3,"names":["PublicClientApplication","axios","msalConfig","auth","clientId","authority","redirectUri","msalInstance","signInWithXbox","authResult","loginPopup","scopes","microsoftAccessToken","accessToken","xboxToken","getXboxTokenFromMicrosoftAccessToken","response","post","XboxToken","CreateAccount","console","log","data","error","msToken"],"sources":["/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/msalConfig.js"],"sourcesContent":["import { PublicClientApplication } from \"@azure/msal-browser\";\nimport axios from 'axios';\n\nconst msalConfig = {\n  auth: {\n    clientId: \"f6916aa3-e279-4c0c-90a7-c9706fd211fe\", // Your Client ID\n    authority: \"https://login.microsoftonline.com/common\",\n    redirectUri: \"http://localhost:3000\", // Your redirect URI\n  },\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n\n// You might have a button for the user to \"Sign in with Xbox\"\nasync function signInWithXbox() {\n  try {\n    // Use MSAL to sign the user in and get a Microsoft access token\n    const authResult = await msalInstance.loginPopup({\n      scopes: [\"openid\", \"profile\", \"User.Read\"], \n    });\n\n    const microsoftAccessToken = authResult.accessToken;\n\n    // Now you have a Microsoft access token. \n    // This is NOT the same as an Xbox Live token. You'll need to exchange it with Xbox Live endpoints:\n    // The steps usually involve calling the Xbox Live authorization endpoints:\n    // 1. Get Xbox Live User Token (xblToken)\n    // 2. Get XSTS token\n    //\n    // Pseudo steps (not production-ready):\n    // const xblResponse = await fetchXboxLiveUserToken(microsoftAccessToken);\n    // const xblToken = xblResponse.Token;\n    // const xstsResponse = await fetchXSTSToken(xblToken);\n    // const xboxToken = xstsResponse.Token; // This is what you ultimately send to your backend\n\n    const xboxToken = await getXboxTokenFromMicrosoftAccessToken(microsoftAccessToken); \n    // `getXboxTokenFromMicrosoftAccessToken` is a placeholder function where you'd implement\n    // the calls to the Xbox Live endpoints to retrieve the final XSTS token.\n\n    // Once you have the xboxToken (XSTS), send it to your backend\n    const response = await axios.post(\"http://localhost:8080/api/auth/xbox\", {\n      XboxToken: xboxToken,\n      CreateAccount: true,\n    });\n\n    console.log(\"Login successful:\", response.data);\n\n  } catch (error) {\n    console.error(\"Error during sign-in:\", error);\n  }\n}\n\n// Placeholder function: You must implement the actual calls\nasync function getXboxTokenFromMicrosoftAccessToken(msToken) {\n  // 1. Call Xbox Live auth endpoint (e.g., XblUserAuth)\n  // 2. Exchange for XSTS token\n  // Return the XSTS token\n  return \"FAKE_XSTS_TOKEN_FOR_EXAMPLE\";\n}\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,qBAAqB;AAC7D,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAG;EACjBC,IAAI,EAAE;IACJC,QAAQ,EAAE,sCAAsC;IAAE;IAClDC,SAAS,EAAE,0CAA0C;IACrDC,WAAW,EAAE,uBAAuB,CAAE;EACxC;AACF,CAAC;AAED,MAAMC,YAAY,GAAG,IAAIP,uBAAuB,CAACE,UAAU,CAAC;;AAE5D;AACA,eAAeM,cAAcA,CAAA,EAAG;EAC9B,IAAI;IACF;IACA,MAAMC,UAAU,GAAG,MAAMF,YAAY,CAACG,UAAU,CAAC;MAC/CC,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW;IAC3C,CAAC,CAAC;IAEF,MAAMC,oBAAoB,GAAGH,UAAU,CAACI,WAAW;;IAEnD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMC,SAAS,GAAG,MAAMC,oCAAoC,CAACH,oBAAoB,CAAC;IAClF;IACA;;IAEA;IACA,MAAMI,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,qCAAqC,EAAE;MACvEC,SAAS,EAAEJ,SAAS;MACpBK,aAAa,EAAE;IACjB,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,QAAQ,CAACM,IAAI,CAAC;EAEjD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C;AACF;;AAEA;AACA,eAAeR,oCAAoCA,CAACS,OAAO,EAAE;EAC3D;EACA;EACA;EACA,OAAO,6BAA6B;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}