{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\n{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n HTTP\n Copy\n POST https://titleId.playfabapi.com/Server/LoginWithXbox\n Request Header\n Name\tRequired\tType\tDescription\n X-SecretKey\tTrue\t\n string\n This API requires a title secret key, available to title admins, from PlayFab Game Manager.\n Request Body\n Name\tRequired\tType\tDescription\n XboxToken\tTrue\t\n string\n Token provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\n */}\nimport React, { useEffect, useState } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// MSAL Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    authority: \"https://login.microsoftonline.com/682302df-55ed-430a-bb15-cf8852a65331\",\n    redirectUri: \"http://localhost:3000\" // Update with your app's redirect URI\n  }\n};\nconst msalInstance = new PublicClientApplication(msalConfig);\nconst AuthenticationPage = () => {\n  _s();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Initialize MSAL when the component mounts\n  useEffect(() => {\n    const initializeMsal = async () => {\n      try {\n        await msalInstance.initialize(); // Await initialization\n        setIsInitialized(true); // Mark as initialized\n      } catch (err) {\n        setError(`Failed to initialize MSAL: ${err.message}`);\n      }\n    };\n    initializeMsal();\n  }, []);\n  const handleLogin = async () => {\n    if (!isInitialized) {\n      setError(\"MSAL is not initialized yet. Please try again later.\");\n      return;\n    }\n    try {\n      // Login and get an access token\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"XboxLive.signin\"]\n      });\n\n      // Obtain the Xbox Live Token\n      const xboxToken = await getXboxLiveToken(loginResponse.accessToken);\n\n      // Log the Xbox token or send it to the backend\n      console.log(\"Xbox Token:\", xboxToken);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const getXboxLiveToken = async accessToken => {\n    // Replace this with actual Xbox Live SDK implementation\n    return \"mockXboxToken\"; // Replace with GetTokenAndSignatureAsync or equivalent\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Authentication Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), isInitialized ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Microsoft\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Initializing Microsoft Authentication...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), token && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Authentication successful! Token: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthenticationPage, \"lmgOxmeaSdQnQGzzwkDDIC8klIg=\");\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["React","useEffect","useState","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","msalInstance","AuthenticationPage","_s","isInitialized","setIsInitialized","token","setToken","error","setError","initializeMsal","initialize","err","message","handleLogin","loginResponse","loginPopup","scopes","xboxToken","getXboxLiveToken","accessToken","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n\nHTTP\n\nCopy\nPOST https://titleId.playfabapi.com/Server/LoginWithXbox\nRequest Header\nName\tRequired\tType\tDescription\nX-SecretKey\tTrue\t\nstring\n\nThis API requires a title secret key, available to title admins, from PlayFab Game Manager.\n\nRequest Body\nName\tRequired\tType\tDescription\nXboxToken\tTrue\t\nstring\n\nToken provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\n*/}\nimport React, { useEffect, useState } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    authority: \"https://login.microsoftonline.com/682302df-55ed-430a-bb15-cf8852a65331\",\n    redirectUri: \"http://localhost:3000\", // Update with your app's redirect URI\n  },\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n\nconst AuthenticationPage = () => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Initialize MSAL when the component mounts\n  useEffect(() => {\n    const initializeMsal = async () => {\n      try {\n        await msalInstance.initialize(); // Await initialization\n        setIsInitialized(true); // Mark as initialized\n      } catch (err) {\n        setError(`Failed to initialize MSAL: ${err.message}`);\n      }\n    };\n\n    initializeMsal();\n  }, []);\n\n  const handleLogin = async () => {\n    if (!isInitialized) {\n      setError(\"MSAL is not initialized yet. Please try again later.\");\n      return;\n    }\n\n    try {\n      // Login and get an access token\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"XboxLive.signin\"]\n    });\n      \n\n      // Obtain the Xbox Live Token\n      const xboxToken = await getXboxLiveToken(loginResponse.accessToken);\n\n      // Log the Xbox token or send it to the backend\n      console.log(\"Xbox Token:\", xboxToken);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const getXboxLiveToken = async (accessToken) => {\n    // Replace this with actual Xbox Live SDK implementation\n    return \"mockXboxToken\"; // Replace with GetTokenAndSignatureAsync or equivalent\n  };\n\n  return (\n    <div>\n      <h1>Authentication Page</h1>\n      {isInitialized ? (\n        <button onClick={handleLogin}>Login with Microsoft</button>\n      ) : (\n        <p>Initializing Microsoft Authentication...</p>\n      )}\n      {token && <p>Authentication successful! Token: {token}</p>}\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default AuthenticationPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}