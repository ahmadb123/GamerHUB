{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/components/XboxLogin.js\",\n  _s = $RefreshSig$();\n// src/components/XboxLogin.js\nimport React, { useCallback } from 'react';\nimport { msalInstance } from '../msalConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst XboxLogin = () => {\n  _s();\n  const signInWithXbox = useCallback(async () => {\n    try {\n      // Initiate MSAL login with Xbox Live scopes\n      const authResult = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"XboxLive.signin\", \"XboxLive.offline_access\"]\n      });\n      const microsoftAccessToken = authResult.accessToken;\n\n      // Send the MSA access token to your backend for Xbox Live authentication\n      const response = await fetch(\"http://localhost:8080/api/auth/xboxExchange\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          msToken: microsoftAccessToken\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Backend exchange failed: ${errorText}`);\n      }\n      const backendData = await response.json();\n      console.log(\"PlayFab login successful:\", backendData);\n    } catch (error) {\n      console.error(\"Error during sign-in:\", error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: signInWithXbox,\n    children: \"Sign in with Xbox\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(XboxLogin, \"RWitseS9vnvZae3Qh8+gAJ8Eu8c=\");\n_c = XboxLogin;\nexport default XboxLogin;\nvar _c;\n$RefreshReg$(_c, \"XboxLogin\");","map":{"version":3,"names":["React","useCallback","msalInstance","jsxDEV","_jsxDEV","XboxLogin","_s","signInWithXbox","authResult","loginPopup","scopes","microsoftAccessToken","accessToken","response","fetch","method","headers","body","JSON","stringify","msToken","ok","errorText","text","Error","backendData","json","console","log","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/components/XboxLogin.js"],"sourcesContent":["// src/components/XboxLogin.js\nimport React, { useCallback } from 'react';\nimport { msalInstance } from '../msalConfig';\n\nconst XboxLogin = () => {\n  const signInWithXbox = useCallback(async () => {\n    try {\n      // Initiate MSAL login with Xbox Live scopes\n      const authResult = await msalInstance.loginPopup({\n        scopes: [\n          \"openid\",\n          \"profile\",\n          \"XboxLive.signin\",\n          \"XboxLive.offline_access\"\n        ],\n      });\n\n      const microsoftAccessToken = authResult.accessToken;\n\n      // Send the MSA access token to your backend for Xbox Live authentication\n      const response = await fetch(\"http://localhost:8080/api/auth/xboxExchange\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ msToken: microsoftAccessToken })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Backend exchange failed: ${errorText}`);\n      }\n\n      const backendData = await response.json();\n      console.log(\"PlayFab login successful:\", backendData);\n\n    } catch (error) {\n      console.error(\"Error during sign-in:\", error);\n    }\n  }, []);\n\n  return (\n    <button onClick={signInWithXbox}>Sign in with Xbox</button>\n  );\n};\n\nexport default XboxLogin;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,YAAY,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,cAAc,GAAGN,WAAW,CAAC,YAAY;IAC7C,IAAI;MACF;MACA,MAAMO,UAAU,GAAG,MAAMN,YAAY,CAACO,UAAU,CAAC;QAC/CC,MAAM,EAAE,CACN,QAAQ,EACR,SAAS,EACT,iBAAiB,EACjB,yBAAyB;MAE7B,CAAC,CAAC;MAEF,MAAMC,oBAAoB,GAAGH,UAAU,CAACI,WAAW;;MAEnD;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,OAAO,EAAET;QAAqB,CAAC;MACxD,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAAC,4BAA4BF,SAAS,EAAE,CAAC;MAC1D;MAEA,MAAMG,WAAW,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MACzCC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,WAAW,CAAC;IAEvD,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzB,OAAA;IAAQ0B,OAAO,EAAEvB,cAAe;IAAAwB,QAAA,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAE/D,CAAC;AAAC7B,EAAA,CAxCID,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}