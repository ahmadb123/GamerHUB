{"ast":null,"code":"// src/utils/oauth.js\n\nimport crypto from 'crypto';\nconst CLIENT_ID = '0a23b968-9e79-4cba-b337-862adab7a8e2'; // Replace with your MSA Application (client) ID\nconst REDIRECT_URI = 'http://localhost:3000'; // Ensure this matches your registered redirect URI\nconst AUTHORIZATION_ENDPOINT = 'https://login.live.com/oauth20_authorize.srf';\nconst TOKEN_ENDPOINT = 'https://login.live.com/oauth20_token.srf';\nconst SCOPES = 'XboxLive.signin XboxLive.offline_access'; // Scopes required for Xbox Live\n\n// Generate a random string for state and code verifier\nexport const generateRandomString = length => {\n  return [...Array(length)].map(() => Math.random().toString(36)[2]).join('');\n};\n\n// Generate Code Challenge from Code Verifier\nexport const generateCodeChallenge = codeVerifier => {\n  return crypto.createHash('sha256').update(codeVerifier).digest('base64url');\n};","map":{"version":3,"names":["crypto","CLIENT_ID","REDIRECT_URI","AUTHORIZATION_ENDPOINT","TOKEN_ENDPOINT","SCOPES","generateRandomString","length","Array","map","Math","random","toString","join","generateCodeChallenge","codeVerifier","createHash","update","digest"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/utils/oauth.js"],"sourcesContent":["// src/utils/oauth.js\n\nimport crypto from 'crypto';\n\nconst CLIENT_ID = '0a23b968-9e79-4cba-b337-862adab7a8e2'; // Replace with your MSA Application (client) ID\nconst REDIRECT_URI = 'http://localhost:3000'; // Ensure this matches your registered redirect URI\nconst AUTHORIZATION_ENDPOINT = 'https://login.live.com/oauth20_authorize.srf';\nconst TOKEN_ENDPOINT = 'https://login.live.com/oauth20_token.srf';\nconst SCOPES = 'XboxLive.signin XboxLive.offline_access'; // Scopes required for Xbox Live\n\n// Generate a random string for state and code verifier\nexport const generateRandomString = (length) => {\n  return [...Array(length)]\n    .map(() => Math.random().toString(36)[2])\n    .join('');\n};\n\n// Generate Code Challenge from Code Verifier\nexport const generateCodeChallenge = (codeVerifier) => {\n  return crypto\n    .createHash('sha256')\n    .update(codeVerifier)\n    .digest('base64url');\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,SAAS,GAAG,sCAAsC,CAAC,CAAC;AAC1D,MAAMC,YAAY,GAAG,uBAAuB,CAAC,CAAC;AAC9C,MAAMC,sBAAsB,GAAG,8CAA8C;AAC7E,MAAMC,cAAc,GAAG,0CAA0C;AACjE,MAAMC,MAAM,GAAG,yCAAyC,CAAC,CAAC;;AAE1D;AACA,OAAO,MAAMC,oBAAoB,GAAIC,MAAM,IAAK;EAC9C,OAAO,CAAC,GAAGC,KAAK,CAACD,MAAM,CAAC,CAAC,CACtBE,GAAG,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CACxCC,IAAI,CAAC,EAAE,CAAC;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAIC,YAAY,IAAK;EACrD,OAAOf,MAAM,CACVgB,UAAU,CAAC,QAAQ,CAAC,CACpBC,MAAM,CAACF,YAAY,CAAC,CACpBG,MAAM,CAAC,WAAW,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}