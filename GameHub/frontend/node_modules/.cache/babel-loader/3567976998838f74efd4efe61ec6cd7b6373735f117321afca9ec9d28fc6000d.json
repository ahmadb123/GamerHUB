{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/XboxAuthService.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = 'http://localhost:8080';\nexport const exchangeCodeForTokens = async () => {\n  // Get code from deep link\n  const url = await Linking.getInitialURL();\n  if (!url) return;\n  const parsedUrl = new URL(url);\n  const code = parsedUrl.searchParams.get(\"code\");\n  if (!code) {\n    Toast.show({\n      type: \"error\",\n      text1: \"Missing authorization code in the redirect URL.\"\n    });\n    return;\n  }\n  try {\n    const response = await fetch(`${apiUrl}/api/auth/mobile-callback?code=${code}`, {\n      method: \"GET\"\n    });\n    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n    const data = await response.json();\n    console.log(\"Callback API JSON Response:\", data);\n\n    // Store tokens using AsyncStorage\n    await AsyncStorage.multiSet([[\"uhs\", data.uhs], [\"XSTS_token\", data.XSTS_token]]);\n    Toast.show({\n      type: \"success\",\n      text1: \"Xbox login successful!\"\n    });\n  } catch (error) {\n    Toast.show({\n      type: \"error\",\n      text1: error.message\n    });\n  }\n};\nexport const handleLogin = async () => {\n  try {\n    const response = await fetch(`${apiUrl}/api/auth/login`, {\n      method: \"GET\",\n      credentials: \"include\"\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to retrieve tokens. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.redirectUrl) {\n      window.location.href = data.redirectUrl;\n    } else {\n      toast.error(\"Error during Xbox login\");\n    }\n  } catch (error) {\n    toast.error(`Error during Xbox login: ${error.message}`);\n  }\n};\nfunction XboxLogin() {\n  _s();\n  useEffect(() => {\n    exchangeCodeForTokens();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tes\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Xbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 8\n  }, this);\n}\n_s(XboxLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = XboxLogin;\nexport default XboxLogin;\nvar _c;\n$RefreshReg$(_c, \"XboxLogin\");","map":{"version":3,"names":["React","useEffect","toast","ToastContainer","jsxDEV","_jsxDEV","apiUrl","exchangeCodeForTokens","url","Linking","getInitialURL","parsedUrl","URL","code","searchParams","get","Toast","show","type","text1","response","fetch","method","ok","Error","status","data","json","console","log","AsyncStorage","multiSet","uhs","XSTS_token","error","message","handleLogin","credentials","redirectUrl","window","location","href","XboxLogin","_s","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/XboxAuthService.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { toast, ToastContainer } from \"react-toastify\";\n\nconst apiUrl = 'http://localhost:8080';\n\nexport const exchangeCodeForTokens = async () => {\n    // Get code from deep link\n    const url = await Linking.getInitialURL();\n    if (!url) return;\n  \n    const parsedUrl = new URL(url);\n    const code = parsedUrl.searchParams.get(\"code\");\n  \n    if (!code) {\n      Toast.show({ type: \"error\", text1: \"Missing authorization code in the redirect URL.\" });\n      return;\n    }\n  \n    try {\n      const response = await fetch(\n        `${apiUrl}/api/auth/mobile-callback?code=${code}`,\n        { method: \"GET\" }\n      );\n  \n      if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);\n  \n      const data = await response.json();\n      console.log(\"Callback API JSON Response:\", data);\n  \n      // Store tokens using AsyncStorage\n      await AsyncStorage.multiSet([\n        [\"uhs\", data.uhs],\n        [\"XSTS_token\", data.XSTS_token]\n      ]);\n  \n      Toast.show({ type: \"success\", text1: \"Xbox login successful!\" });\n    } catch (error) {\n      Toast.show({ type: \"error\", text1: error.message });\n    }\n  };\n  \n\nexport const handleLogin = async () => {\n    try {\n        const response = await fetch(`${apiUrl}/api/auth/login`, {\n            method: \"GET\",\n            credentials: \"include\",\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to retrieve tokens. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.redirectUrl) {\n            window.location.href = data.redirectUrl;\n        } else {\n            toast.error(\"Error during Xbox login\");\n        }\n    } catch (error) {\n        toast.error(`Error during Xbox login: ${error.message}`);\n    }\n};\n\nfunction XboxLogin() {\n    useEffect(() => {\n        exchangeCodeForTokens();\n    }, []);\n\n    return (\n       <div className=\"tes\">\n              <button onClick={handleLogin}>Login with Xbox</button>\n       </div>\n    );\n}\n\nexport default XboxLogin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}