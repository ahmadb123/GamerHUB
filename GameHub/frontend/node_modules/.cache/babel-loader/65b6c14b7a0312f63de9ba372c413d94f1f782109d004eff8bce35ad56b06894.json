{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/component/LoginAuthCrossplatform.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = 'http://localhost:8080';\nfunction LoginAuthCrossplatform() {\n  _s();\n  const {\n    platform\n  } = useParams(); // Get the platform from the URL parameters\n  const navigate = useNavigate();\n  useEffect(() => {\n    const exchangeCodeForTokens = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get(\"code\");\n      if (code && platform) {\n        try {\n          const response = await fetch(`${apiUrl}/api/auth/callback/${platform}?code=${code}`, {\n            method: \"GET\",\n            credentials: \"include\"\n          });\n          if (!response.ok) {\n            throw new Error(`Failed to retrieve tokens for ${platform}. Status: ${response.status}`);\n          }\n          const data = await response.json();\n\n          // Store tokens based on platform\n          if (platform === \"xbox\") {\n            localStorage.setItem(\"uhs\", data.uhs);\n            localStorage.setItem(\"XSTS_token\", data.XSTS_token);\n          } else {\n            localStorage.setItem(`${platform}Token`, data.token); // Generic token storage\n          }\n          toast.success(`${platform.toUpperCase()} login successful!`);\n          navigate(\"/main\"); // Redirect to the main page\n        } catch (error) {\n          toast.error(`Error during ${platform} login: ${error.message}`);\n        }\n      }\n    };\n    exchangeCodeForTokens();\n  }, [platform, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"oauth-login\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Logging in with \", platform ? platform.toUpperCase() : \"Platform\", \"...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginAuthCrossplatform, \"rva9YXpq32aHojo8wp22LPu848U=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = LoginAuthCrossplatform;\nexport default LoginAuthCrossplatform;\nvar _c;\n$RefreshReg$(_c, \"LoginAuthCrossplatform\");","map":{"version":3,"names":["React","useEffect","toast","useParams","useNavigate","jsxDEV","_jsxDEV","apiUrl","LoginAuthCrossplatform","_s","platform","navigate","exchangeCodeForTokens","urlParams","URLSearchParams","window","location","search","code","get","response","fetch","method","credentials","ok","Error","status","data","json","localStorage","setItem","uhs","XSTS_token","token","success","toUpperCase","error","message","className","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/component/LoginAuthCrossplatform.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nconst apiUrl = 'http://localhost:8080';\n\nfunction LoginAuthCrossplatform() {\n    const { platform } = useParams(); // Get the platform from the URL parameters\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const exchangeCodeForTokens = async () => {\n            const urlParams = new URLSearchParams(window.location.search);\n            const code = urlParams.get(\"code\");\n\n            if (code && platform) {\n                try {\n                    const response = await fetch(`${apiUrl}/api/auth/callback/${platform}?code=${code}`, {\n                        method: \"GET\",\n                        credentials: \"include\",\n                    });\n\n                    if (!response.ok) {\n                        throw new Error(`Failed to retrieve tokens for ${platform}. Status: ${response.status}`);\n                    }\n\n                    const data = await response.json();\n\n                    // Store tokens based on platform\n                    if (platform === \"xbox\") {\n                        localStorage.setItem(\"uhs\", data.uhs);\n                        localStorage.setItem(\"XSTS_token\", data.XSTS_token);\n                    } else {\n                        localStorage.setItem(`${platform}Token`, data.token); // Generic token storage\n                    }\n\n                    toast.success(`${platform.toUpperCase()} login successful!`);\n                    navigate(\"/main\"); // Redirect to the main page\n                } catch (error) {\n                    toast.error(`Error during ${platform} login: ${error.message}`);\n                }\n            }\n        };\n\n        exchangeCodeForTokens();\n    }, [platform, navigate]);\n\n    return (\n        <div className=\"oauth-login\" style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n            <h1>Logging in with {platform ? platform.toUpperCase() : \"Platform\"}...</h1>\n        </div>\n    );\n}\n\nexport default LoginAuthCrossplatform;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,MAAM,GAAG,uBAAuB;AAEtC,SAASC,sBAAsBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAS,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAClC,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACZ,MAAMW,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACtC,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;MAC7D,MAAMC,IAAI,GAAGL,SAAS,CAACM,GAAG,CAAC,MAAM,CAAC;MAElC,IAAID,IAAI,IAAIR,QAAQ,EAAE;QAClB,IAAI;UACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,MAAM,sBAAsBG,QAAQ,SAASQ,IAAI,EAAE,EAAE;YACjFI,MAAM,EAAE,KAAK;YACbC,WAAW,EAAE;UACjB,CAAC,CAAC;UAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;YACd,MAAM,IAAIC,KAAK,CAAC,iCAAiCf,QAAQ,aAAaU,QAAQ,CAACM,MAAM,EAAE,CAAC;UAC5F;UAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;UAElC;UACA,IAAIlB,QAAQ,KAAK,MAAM,EAAE;YACrBmB,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC;YACrCF,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEH,IAAI,CAACK,UAAU,CAAC;UACvD,CAAC,MAAM;YACHH,YAAY,CAACC,OAAO,CAAC,GAAGpB,QAAQ,OAAO,EAAEiB,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC;UAC1D;UAEA/B,KAAK,CAACgC,OAAO,CAAC,GAAGxB,QAAQ,CAACyB,WAAW,CAAC,CAAC,oBAAoB,CAAC;UAC5DxB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QACvB,CAAC,CAAC,OAAOyB,KAAK,EAAE;UACZlC,KAAK,CAACkC,KAAK,CAAC,gBAAgB1B,QAAQ,WAAW0B,KAAK,CAACC,OAAO,EAAE,CAAC;QACnE;MACJ;IACJ,CAAC;IAEDzB,qBAAqB,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACF,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAExB,oBACIL,OAAA;IAAKgC,SAAS,EAAC,aAAa;IAACC,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,eAC3EpC,OAAA;MAAAoC,QAAA,GAAI,kBAAgB,EAAChC,QAAQ,GAAGA,QAAQ,CAACyB,WAAW,CAAC,CAAC,GAAG,UAAU,EAAC,KAAG;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEd;AAACrC,EAAA,CA9CQD,sBAAsB;EAAA,QACNL,SAAS,EACbC,WAAW;AAAA;AAAA2C,EAAA,GAFvBvC,sBAAsB;AAgD/B,eAAeA,sBAAsB;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}