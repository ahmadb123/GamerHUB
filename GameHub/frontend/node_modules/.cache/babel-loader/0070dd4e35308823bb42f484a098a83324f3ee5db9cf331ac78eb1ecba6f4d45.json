{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/msalConfig.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalConfig = {\n  auth: {\n    clientId: \"f6916aa3-e279-4c0c-90a7-c9706fd211fe\",\n    // Your Client ID\n    authority: \"https://login.microsoftonline.com/common\",\n    redirectUri: \"http://localhost:3000\" // Your redirect URI\n  }\n};\nconst msalInstance = new PublicClientApplication(msalConfig);\nconst XboxLoginButton = () => {\n  _s();\n  const signInWithXbox = useCallback(async () => {\n    try {\n      // Use MSAL to sign the user in and get a Microsoft access token\n      const authResult = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"User.Read\"]\n      });\n      const microsoftAccessToken = authResult.accessToken;\n\n      // Exchange the Microsoft access token for an Xbox Live token (XSTS)\n      const xboxToken = await getXboxTokenFromMicrosoftAccessToken(microsoftAccessToken);\n\n      // Send the token to the backend using fetch\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          XboxToken: xboxToken,\n          CreateAccount: true\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to log in via Xbox: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"Login successful:\", data);\n    } catch (error) {\n      console.error(\"Error during sign-in:\", error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: signInWithXbox,\n    children: \"Sign in with Xbox\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n// Placeholder function for token exchange\n_s(XboxLoginButton, \"RWitseS9vnvZae3Qh8+gAJ8Eu8c=\");\n_c = XboxLoginButton;\nasync function getXboxTokenFromMicrosoftAccessToken(msToken) {\n  // 1. Call Xbox Live auth endpoint (XblUserAuth) with the MS token to get a user token\n  // 2. Call XSTS auth endpoint with the XblUserToken to get XSTS token\n  // Return that XSTS token as xboxToken\n  return \"FAKE_XSTS_TOKEN_FOR_EXAMPLE\";\n}\nexport default XboxLoginButton;\nvar _c;\n$RefreshReg$(_c, \"XboxLoginButton\");","map":{"version":3,"names":["React","useCallback","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","msalInstance","XboxLoginButton","_s","signInWithXbox","authResult","loginPopup","scopes","microsoftAccessToken","accessToken","xboxToken","getXboxTokenFromMicrosoftAccessToken","response","fetch","method","headers","body","JSON","stringify","XboxToken","CreateAccount","ok","errorText","text","Error","data","json","console","log","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","msToken","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/msalConfig.js"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nconst msalConfig = {\n  auth: {\n    clientId: \"f6916aa3-e279-4c0c-90a7-c9706fd211fe\", // Your Client ID\n    authority: \"https://login.microsoftonline.com/common\",\n    redirectUri: \"http://localhost:3000\", // Your redirect URI\n  },\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n\nconst XboxLoginButton = () => {\n  \n  const signInWithXbox = useCallback(async () => {\n    try {\n      // Use MSAL to sign the user in and get a Microsoft access token\n      const authResult = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"User.Read\"], \n      });\n\n      const microsoftAccessToken = authResult.accessToken;\n\n      // Exchange the Microsoft access token for an Xbox Live token (XSTS)\n      const xboxToken = await getXboxTokenFromMicrosoftAccessToken(microsoftAccessToken);\n\n      // Send the token to the backend using fetch\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          XboxToken: xboxToken,\n          CreateAccount: true,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to log in via Xbox: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"Login successful:\", data);\n\n    } catch (error) {\n      console.error(\"Error during sign-in:\", error);\n    }\n  }, []);\n\n  return (\n    <button onClick={signInWithXbox}>Sign in with Xbox</button>\n  );\n};\n\n// Placeholder function for token exchange\nasync function getXboxTokenFromMicrosoftAccessToken(msToken) {\n  // 1. Call Xbox Live auth endpoint (XblUserAuth) with the MS token to get a user token\n  // 2. Call XSTS auth endpoint with the XblUserToken to get XSTS token\n  // Return that XSTS token as xboxToken\n  return \"FAKE_XSTS_TOKEN_FOR_EXAMPLE\";\n}\n\nexport default XboxLoginButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,uBAAuB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,UAAU,GAAG;EACjBC,IAAI,EAAE;IACJC,QAAQ,EAAE,sCAAsC;IAAE;IAClDC,SAAS,EAAE,0CAA0C;IACrDC,WAAW,EAAE,uBAAuB,CAAE;EACxC;AACF,CAAC;AAED,MAAMC,YAAY,GAAG,IAAIR,uBAAuB,CAACG,UAAU,CAAC;AAE5D,MAAMM,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE5B,MAAMC,cAAc,GAAGZ,WAAW,CAAC,YAAY;IAC7C,IAAI;MACF;MACA,MAAMa,UAAU,GAAG,MAAMJ,YAAY,CAACK,UAAU,CAAC;QAC/CC,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW;MAC3C,CAAC,CAAC;MAEF,MAAMC,oBAAoB,GAAGH,UAAU,CAACI,WAAW;;MAEnD;MACA,MAAMC,SAAS,GAAG,MAAMC,oCAAoC,CAACH,oBAAoB,CAAC;;MAElF;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,SAAS,EAAET,SAAS;UACpBU,aAAa,EAAE;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAAC,8BAA8BF,SAAS,EAAE,CAAC;MAC5D;MAEA,MAAMG,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;IAExC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElC,OAAA;IAAQmC,OAAO,EAAE1B,cAAe;IAAA2B,QAAA,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAE/D,CAAC;;AAED;AAAAhC,EAAA,CA5CMD,eAAe;AAAAkC,EAAA,GAAflC,eAAe;AA6CrB,eAAeS,oCAAoCA,CAAC0B,OAAO,EAAE;EAC3D;EACA;EACA;EACA,OAAO,6BAA6B;AACtC;AAEA,eAAenC,eAAe;AAAC,IAAAkC,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}