{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Ensure useEffect is imported\nimport { PublicClientApplication } from '@azure/msal-browser';\n\n// MSAL Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/consumer/\",\n    // Common authority for all Microsoft accounts\n    redirectUri: \"http://localhost:3000\" // Replace with your application's redirect URI\n  }\n};\nconst LoginWithMicrosoft = () => {\n  _s();\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [xboxToken, setXboxToken] = useState(null); // Added xboxToken state\n\n  useEffect(() => {\n    const initializeMsal = async () => {\n      const instance = new PublicClientApplication(msalConfig);\n      await instance.initialize(); // Added initialization\n      setMsalInstance(instance);\n    };\n    initializeMsal();\n  }, []); // useEffect runs once to initialize the instance\n\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n    try {\n      await msalInstance.initialize(); // Ensure initialization before login\n\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"]\n      });\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n        account: loginResponse.account\n      });\n      console.log(\"Token response:\", tokenResponse);\n      setToken(tokenResponse.accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n  const returnTokenToServer = async () => {\n    if (!token) {\n      setError(\"No token to return to server.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox-token\", {\n        // Updated URL to match backend endpoint\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          xboxToken: token,\n          createAccount: false\n        }) // Match xboxLoginRequest structure\n      });\n      if (!response.ok) {\n        throw new Error(`Server responded with ${response.status}`);\n      }\n      const data = await response.text(); // Adjusted to match return type\n      console.log(\"Server response:\", data);\n      setXboxToken(data); // Set xboxToken state\n\n      // Now use the Xbox token to log in to PlayFab\n      await loginXboxServer(data);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error returning token to server:\", err);\n    }\n  };\n\n  // login xbox server - \n  const loginXboxServer = async xboxToken => {\n    try {\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          xboxToken,\n          createAccount: false\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server responded with ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Server response:\", data);\n    } catch (e) {\n      setError(e.message);\n      console.error(\"Error logging into xbox server:\", e);\n    }\n  };\n  const loginAndSendToken = async () => {\n    if (!xboxToken) {\n      setError(\"No Xbox Live token available. Please log in first.\");\n      return;\n    }\n    try {\n      // Get XSTS token with user hash\n      const xstsResponse = await getXSTSToken(xboxToken.token);\n      const userHash = xboxToken.userHash;\n\n      // Format token for PlayFab\n      const formattedToken = `XBL3.0 x=${userHash};${xstsResponse.Token}`;\n      console.log(\"Formatted token:\", formattedToken);\n\n      // Send to backend\n      const xboxResponse = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          xboxToken: formattedToken,\n          createAccount: false\n        })\n      });\n      if (!xboxResponse.ok) {\n        const errorData = await xboxResponse.text();\n        throw new Error(`Xbox server error: ${errorData}`);\n      }\n      const xboxData = await xboxResponse.json();\n      console.log(\"Xbox server response:\", xboxData);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login and token submission:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Xbox Token Retrieval\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      children: \"Login and Get Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: returnTokenToServer,\n      children: \"Send Token to Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), token && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Token retrieved: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginWithMicrosoft, \"Hc9/8i7IjhuyFBITQyujcwAzP5k=\");\n_c = LoginWithMicrosoft;\nexport default LoginWithMicrosoft;\nvar _c;\n$RefreshReg$(_c, \"LoginWithMicrosoft\");","map":{"version":3,"names":["React","useState","useEffect","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","LoginWithMicrosoft","_s","msalInstance","setMsalInstance","token","setToken","error","setError","xboxToken","setXboxToken","initializeMsal","instance","initialize","login","loginResponse","loginPopup","scopes","tokenResponse","acquireTokenSilent","account","console","log","accessToken","err","message","returnTokenToServer","response","fetch","method","headers","body","JSON","stringify","createAccount","ok","Error","status","data","text","loginXboxServer","json","e","loginAndSendToken","xstsResponse","getXSTSToken","userHash","formattedToken","Token","xboxResponse","errorData","xboxData","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Ensure useEffect is imported\nimport { PublicClientApplication } from '@azure/msal-browser';\n\n// MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/consumer/\", // Common authority for all Microsoft accounts\n    redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n  },\n};\n\nconst LoginWithMicrosoft = () => {\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [xboxToken, setXboxToken] = useState(null); // Added xboxToken state\n\n  useEffect(() => {\n    const initializeMsal = async () => {\n      const instance = new PublicClientApplication(msalConfig);\n      await instance.initialize(); // Added initialization\n      setMsalInstance(instance);\n    };\n\n    initializeMsal();\n  }, []); // useEffect runs once to initialize the instance\n\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n\n    try {\n      await msalInstance.initialize(); // Ensure initialization before login\n\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n      });\n      \n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n        account: loginResponse.account,\n      });\n      \n\n      console.log(\"Token response:\", tokenResponse);\n      setToken(tokenResponse.accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n\n  const returnTokenToServer = async () => {\n    if (!token) {\n        setError(\"No token to return to server.\");\n        return;\n    }\n    try {\n        const response = await fetch(\"http://localhost:8080/api/auth/xbox-token\", { // Updated URL to match backend endpoint\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ xboxToken: token, createAccount: false }), // Match xboxLoginRequest structure\n        });\n        if (!response.ok) {\n            throw new Error(`Server responded with ${response.status}`);\n        }\n        const data = await response.text(); // Adjusted to match return type\n        console.log(\"Server response:\", data);\n        setXboxToken(data); // Set xboxToken state\n\n        // Now use the Xbox token to log in to PlayFab\n        await loginXboxServer(data);\n    } catch (err) {\n        setError(err.message);\n        console.error(\"Error returning token to server:\", err);\n    }\n  };\n\n  // login xbox server - \n  const loginXboxServer = async (xboxToken) =>{\n    try{\n        const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ xboxToken, createAccount: false }),\n        });\n        if (!response.ok) {\n            throw new Error(`Server responded with ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Server response:\", data);\n    }catch(e){\n        setError(e.message);\n        console.error(\"Error logging into xbox server:\", e);\n    }\n  }\n\n  const loginAndSendToken = async () => {\n    if (!xboxToken) {\n      setError(\"No Xbox Live token available. Please log in first.\");\n      return;\n    }\n    try {\n      // Get XSTS token with user hash\n      const xstsResponse = await getXSTSToken(xboxToken.token);\n      const userHash = xboxToken.userHash;\n      \n      // Format token for PlayFab\n      const formattedToken = `XBL3.0 x=${userHash};${xstsResponse.Token}`;\n      console.log(\"Formatted token:\", formattedToken);\n\n      // Send to backend\n      const xboxResponse = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ xboxToken: formattedToken, createAccount: false }),\n      });\n\n      if (!xboxResponse.ok) {\n        const errorData = await xboxResponse.text();\n        throw new Error(`Xbox server error: ${errorData}`);\n      }\n\n      const xboxData = await xboxResponse.json();\n      console.log(\"Xbox server response:\", xboxData);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login and token submission:\", err);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Test Xbox Token Retrieval</h1>\n      <button onClick={login}>Login and Get Token</button>\n      <button onClick={returnTokenToServer}>Send Token to Server</button>\n      {token && <p>Token retrieved: {token}</p>}\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default LoginWithMicrosoft;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}