{"ast":null,"code":"const apiUrl = 'http://localhost:8080';\n\n// fetch xbox friends - \n\nexport const fetchXboxFriends = async () => {\n  // uhs and token - \n  const uhs = localStorage.getItem(\"uhs\");\n  const XSTS_token = localStorage.getItem(\"XSTS_token\");\n  console.log(\"XBOX FRIENFS FETCH tokens - UHS:\", uhs, \"XSTS_token:\", XSTS_token);\n  if (!uhs || !XSTS_token) {\n    console.error(\"Xbox authentication tokens missing. Please log in again.\");\n    throw new Error(\"Xbox authentication tokens missing.\");\n  }\n  try {\n    const response = await fetch(`${apiUrl}/api/xbox/friends/top-ten`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `XBL3.0 x=${uhs};${XSTS_token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Xbox friends. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.people || [];\n  } catch (error) {\n    console.error(error);\n    console.error(\"Failed to fetch Xbox friends.\");\n    throw error;\n  }\n};\n\n// fetch steam friends -\nexport const fetchSteamFriends = async () => {\n  const jwtToken = localStorage.getItem(\"jwtToken\");\n  try {\n    const response = await fetch(`${apiUrl}/api/steam/userinfo/get-friends`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + jwtToken\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Steam friends. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.friends || [];\n  } catch (error) {\n    console.error(\"Failed to fetch Steam friends:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiUrl","fetchXboxFriends","uhs","localStorage","getItem","XSTS_token","console","log","error","Error","response","fetch","method","headers","Authorization","ok","status","data","json","people","fetchSteamFriends","jwtToken","friends"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/friendsService.js"],"sourcesContent":["\nconst apiUrl = 'http://localhost:8080';\n\n\n// fetch xbox friends - \n\nexport const fetchXboxFriends = async () =>{\n    // uhs and token - \n    const uhs = localStorage.getItem(\"uhs\");\n    const XSTS_token = localStorage.getItem(\"XSTS_token\");\n    console.log(\"XBOX FRIENFS FETCH tokens - UHS:\", uhs, \"XSTS_token:\", XSTS_token);\n\n    if (!uhs || !XSTS_token) {\n        console.error(\"Xbox authentication tokens missing. Please log in again.\");\n        throw new Error(\"Xbox authentication tokens missing.\");\n    }\n\n    try{\n        const response = await fetch(`${apiUrl}/api/xbox/friends/top-ten`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `XBL3.0 x=${uhs};${XSTS_token}`,\n            },\n        });\n        if(!response.ok){\n            throw new Error(`Failed to fetch Xbox friends. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.people || [];\n    }catch(error){\n        console.error(error);\n        console.error(\"Failed to fetch Xbox friends.\");\n        throw error;\n    }\n};\n\n// fetch steam friends -\nexport const fetchSteamFriends = async () => {\n    const jwtToken = localStorage.getItem(\"jwtToken\");\n    try {\n        const response = await fetch(`${apiUrl}/api/steam/userinfo/get-friends`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": \"Bearer \" + jwtToken,\n            },\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch Steam friends. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.friends || [];\n    } catch (error) {\n        console.error(\"Failed to fetch Steam friends:\", error);\n        throw error;\n    }\n}"],"mappings":"AACA,MAAMA,MAAM,GAAG,uBAAuB;;AAGtC;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAW;EACvC;EACA,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;EACvC,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EACrDE,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEL,GAAG,EAAE,aAAa,EAAEG,UAAU,CAAC;EAE/E,IAAI,CAACH,GAAG,IAAI,CAACG,UAAU,EAAE;IACrBC,OAAO,CAACE,KAAK,CAAC,0DAA0D,CAAC;IACzE,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EAEA,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,MAAM,2BAA2B,EAAE;MAC/DY,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,YAAYZ,GAAG,IAAIG,UAAU;MAChD;IACJ,CAAC,CAAC;IACF,IAAG,CAACK,QAAQ,CAACK,EAAE,EAAC;MACZ,MAAM,IAAIN,KAAK,CAAC,yCAAyCC,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC/E;IACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,MAAM,IAAI,EAAE;EAC5B,CAAC,QAAMX,KAAK,EAAC;IACTF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;IACpBF,OAAO,CAACE,KAAK,CAAC,+BAA+B,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAMC,QAAQ,GAAGlB,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,IAAI;IACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGX,MAAM,iCAAiC,EAAE;MACrEY,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGQ;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAACX,QAAQ,CAACK,EAAE,EAAE;MACd,MAAM,IAAIN,KAAK,CAAC,0CAA0CC,QAAQ,CAACM,MAAM,EAAE,CAAC;IAChF;IACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACK,OAAO,IAAI,EAAE;EAC7B,CAAC,CAAC,OAAOd,KAAK,EAAE;IACZF,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}