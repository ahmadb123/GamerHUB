{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/utility/CheckAccountType.js\";\nimport Icon from \"react-native-vector-icons/FontAwesome5\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const checkAccountType = platforms => {\n  if (!Array.isArray(platforms)) {\n    throw new Error(\"Expected an array of platforms\");\n  }\n  const platformCount = {\n    pc: 0,\n    xbox: 0,\n    playstation: 0,\n    other: 0\n  };\n\n  // Count each platform category\n  platforms.forEach(platform => {\n    switch (platform.toLowerCase()) {\n      case \"pc\":\n        platformCount.pc++;\n        break;\n      case \"xbox one\":\n      case \"xbox series s/x\":\n      case \"xbox\":\n        platformCount.xbox++;\n        break;\n      case \"playstation 5\":\n      case \"ps4\":\n      case \"ps5\":\n      case \"playstation\":\n        platformCount.playstation++;\n        break;\n      default:\n        platformCount.other++;\n        break;\n    }\n  });\n\n  // Adjust counts to a maximum of 1 for each category\n  const keys = Object.keys(platformCount);\n  let maxCount = Math.max(...Object.values(platformCount));\n  while (maxCount > 1) {\n    keys.forEach(key => {\n      if (platformCount[key] > 1) {\n        platformCount[key] = 1;\n      }\n    });\n    maxCount = Math.max(...Object.values(platformCount));\n  }\n\n  // Prepare the icons based on detected platforms\n  const icons = [];\n  if (platformCount.pc > 0) {\n    icons.push(/*#__PURE__*/_jsxDEV(Icon, {\n      name: \"desktop\",\n      style: {\n        marginRight: 5\n      }\n    }, \"pc\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this));\n  }\n  if (platformCount.xbox > 0) {\n    icons.push(/*#__PURE__*/_jsxDEV(Icon, {\n      name: \"xbox\",\n      style: {\n        marginRight: 5\n      }\n    }, \"xbox\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 16\n    }, this));\n  }\n  if (platformCount.playstation > 0) {\n    icons.push(/*#__PURE__*/_jsxDEV(Icon, {\n      name: \"playstation\",\n      style: {\n        marginRight: 5\n      }\n    }, \"playstation\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this));\n  }\n  if (icons.length === 0) {\n    icons.push(/*#__PURE__*/_jsxDEV(Icon, {\n      name: \"gamepad\",\n      style: {\n        marginRight: 5\n      }\n    }, \"other\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: icons\n  }, void 0, false);\n};","map":{"version":3,"names":["Icon","jsxDEV","_jsxDEV","Fragment","_Fragment","checkAccountType","platforms","Array","isArray","Error","platformCount","pc","xbox","playstation","other","forEach","platform","toLowerCase","keys","Object","maxCount","Math","max","values","key","icons","push","name","style","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","length","children"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/utility/CheckAccountType.js"],"sourcesContent":["import Icon from \"react-native-vector-icons/FontAwesome5\";\n\nexport const checkAccountType = (platforms) => {\n  if (!Array.isArray(platforms)) {\n    throw new Error(\"Expected an array of platforms\");\n  }\n\n  const platformCount = {\n    pc: 0,\n    xbox: 0,\n    playstation: 0,\n    other: 0,\n  };\n\n  // Count each platform category\n  platforms.forEach((platform) => {\n    switch (platform.toLowerCase()) {\n      case \"pc\":\n        platformCount.pc++;\n        break;\n      case \"xbox one\":\n      case \"xbox series s/x\":\n      case \"xbox\":\n        platformCount.xbox++;\n        break;\n      case \"playstation 5\":\n      case \"ps4\":\n      case \"ps5\":\n      case \"playstation\":\n        platformCount.playstation++;\n        break;\n      default:\n        platformCount.other++;\n        break;\n    }\n  });\n\n  // Adjust counts to a maximum of 1 for each category\n  const keys = Object.keys(platformCount);\n  let maxCount = Math.max(...Object.values(platformCount));\n\n  while (maxCount > 1) {\n    keys.forEach((key) => {\n      if (platformCount[key] > 1) {\n        platformCount[key] = 1; \n      }\n    });\n    maxCount = Math.max(...Object.values(platformCount));\n  }\n\n  // Prepare the icons based on detected platforms\n  const icons = [];\n  if (platformCount.pc > 0) {\n    icons.push(<Icon name=\"desktop\" key=\"pc\" style={{ marginRight: 5 }} />);\n  }\n  if (platformCount.xbox > 0) {\n    icons.push(<Icon name=\"xbox\" key=\"xbox\" style={{ marginRight: 5 }} />);\n  }\n  if (platformCount.playstation > 0) {\n    icons.push(<Icon name=\"playstation\" key=\"playstation\" style={{ marginRight: 5 }} />);\n  }\n  if (icons.length === 0) {\n    icons.push(<Icon name=\"gamepad\" key=\"other\" style={{ marginRight: 5 }} />);\n  }\n\n  return <>{icons}</>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}