{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/News.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { fetchAllNews, searchForGame, getGenres } from \"../service/NewsService\";\nimport { useSearchParams, useNavigate } from \"react-router-dom\";\nimport \"../assests/News.css\";\nimport { checkAccountType } from \"../utility/CheckAccountType\";\nimport { fetchGameTrailers } from \"../service/GameTrailersFromYoutubeService\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction News() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const selectedGenre = searchParams.get(\"genre\") || \"\";\n  const [newsData, setNewsData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const textRef = useRef(\"\");\n  const navigate = useNavigate();\n  const username = localStorage.getItem(\"username\");\n  const [genres, setGenres] = useState([]);\n\n  // Track which game is hovered\n  const [hoveredGameSlug, setHoveredGameSlug] = useState(null);\n  const [hoveredGameName, setHoveredGameName] = useState(null);\n\n  // Store ALL fetched trailers in an object: { [gameName]: arrayOfTrailers }\n  const [gameTrailers, setGameTrailers] = useState({});\n\n  // Use a ref if you want to avoid re-fetching for the same game,\n  // but we still need to set state so the UI updates.\n  const gameTrailersRef = useRef({});\n\n  // -- EVENT HANDLERS --\n\n  // On Enter key, do a search\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  // Optional: fetch trailer on click, then navigate\n  const handleImageClick = async game => {\n    // If you want to store the trailer on click, do something like:\n    // const data = await fetchGameTrailers({ gameName: game.name });\n    // (Then store it if needed, or just navigate.)\n    navigate(`/news/game/${game.id}`);\n  };\n\n  // Mouse enters: set hovered states\n  const handleMouseEnter = game => {\n    setHoveredGameSlug(game.slug);\n    setHoveredGameName(game.name);\n  };\n\n  // Mouse leaves: clear hovered states\n  const handleMouseLeave = () => {\n    setHoveredGameSlug(null);\n    setHoveredGameName(null);\n  };\n\n  // Searching for games\n  const handleSearch = async () => {\n    const inputValue = textRef.current.value.trim();\n    try {\n      if (!inputValue) {\n        const data = await fetchAllNews(null, selectedGenre || null);\n        setNewsData(data);\n      } else {\n        const results = await searchForGame(inputValue);\n        setNewsData(results || []);\n      }\n    } catch (err) {\n      setError(err);\n    }\n    textRef.current.value = \"\";\n  };\n\n  // -- useEffect: Fetch Trailers Whenever hoveredGameName Changes --\n  useEffect(() => {\n    if (!hoveredGameName) return; // No game => do nothing\n\n    const fetchTrailers = async () => {\n      // 1) If we already have trailers for this game in a ref, just set it from the ref\n      if (gameTrailersRef.current[hoveredGameName]) {\n        setGameTrailers(prev => ({\n          ...prev,\n          [hoveredGameName]: gameTrailersRef.current[hoveredGameName]\n        }));\n        return;\n      }\n\n      // 2) Otherwise, fetch from API\n      try {\n        const data = await fetchGameTrailers({\n          gameName: hoveredGameName\n        });\n        if (data !== null && data !== void 0 && data.items && data.items.length > 0) {\n          // Save in the ref\n          gameTrailersRef.current[hoveredGameName] = data.items;\n          // Also save in state so the UI updates\n          setGameTrailers(prev => ({\n            ...prev,\n            [hoveredGameName]: data.items\n          }));\n          console.log(\"Fetched trailers for:\", hoveredGameName);\n        } else {\n          // No trailers found => store empty array\n          setGameTrailers(prev => ({\n            ...prev,\n            [hoveredGameName]: []\n          }));\n          console.log(\"No trailers found for:\", hoveredGameName);\n        }\n      } catch (error) {\n        console.error(\"Error fetching trailer:\", error);\n        // On error, also store empty so we don't keep trying\n        setGameTrailers(prev => ({\n          ...prev,\n          [hoveredGameName]: []\n        }));\n      }\n    };\n    fetchTrailers();\n  }, [hoveredGameName]);\n\n  // -- useEffect: Fetch News Data --\n  useEffect(() => {\n    async function getNews() {\n      try {\n        setLoading(true);\n        const data = await fetchAllNews(null, selectedGenre || null);\n        setNewsData(data);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getNews();\n  }, [selectedGenre]);\n\n  // -- useEffect: Fetch Genre Options --\n  useEffect(() => {\n    async function fetchGenreOptions() {\n      try {\n        const data = await getGenres();\n        setGenres(data);\n      } catch (err) {\n        console.error(\"Error fetching genres:\", err);\n      }\n    }\n    fetchGenreOptions();\n  }, []);\n\n  // -- RENDER --\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"News and Trending Games For \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"genre-select\",\n        style: {\n          marginRight: \"0.5rem\"\n        },\n        children: \"Filter by Genre:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"genre-select\",\n        value: selectedGenre,\n        onChange: e => navigate(e.target.value ? `/news?genre=${e.target.value}` : \"/news\"),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Genres\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), genres.map(genre => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: genre.slug,\n          children: genre.name\n        }, genre.slug, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: textRef,\n        type: \"text\",\n        placeholder: \"Search for Game\",\n        onKeyDown: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-grid\",\n      children: newsData.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-media\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.background_image,\n            alt: item.name,\n            style: {\n              width: \"300px\",\n              height: \"auto\"\n            },\n            onClick: () => handleImageClick(item),\n            onMouseEnter: () => handleMouseEnter(item),\n            onMouseLeave: handleMouseLeave\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), hoveredGameSlug === item.slug && gameTrailers[item.name] && gameTrailers[item.name].length > 0 && /*#__PURE__*/_jsxDEV(\"iframe\", {\n            className: \"card-video\",\n            src: `https://www.youtube.com/embed/${gameTrailers[item.name][0].id.videoId}?autoplay=1&mute=1&rel=0&controls=0`,\n            allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n            allowFullScreen: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: checkAccountType(item.platforms.map(p => p.platform.name))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), hoveredGameSlug === item.slug && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-mini-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Release: \", item.released]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"genre-for-game\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Genres:\", \" \", item.genres.map((genre, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  marginRight: \"0.5rem\"\n                },\n                children: genre.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-rating\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Rating: \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 19\n            }, this), item.rating > 0 ? item.rating : item.averageRating]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }, this)]\n      }, item.slug || item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(News, \"0bHxjlg1OUCYvssllJJeDNj/J/o=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = News;\nexport default News;\nvar _c;\n$RefreshReg$(_c, \"News\");","map":{"version":3,"names":["React","useEffect","useState","useRef","fetchAllNews","searchForGame","getGenres","useSearchParams","useNavigate","checkAccountType","fetchGameTrailers","jsxDEV","_jsxDEV","Fragment","_Fragment","News","_s","searchParams","selectedGenre","get","newsData","setNewsData","loading","setLoading","error","setError","textRef","navigate","username","localStorage","getItem","genres","setGenres","hoveredGameSlug","setHoveredGameSlug","hoveredGameName","setHoveredGameName","gameTrailers","setGameTrailers","gameTrailersRef","handleKeyPress","event","key","handleSearch","handleImageClick","game","id","handleMouseEnter","slug","name","handleMouseLeave","inputValue","current","value","trim","data","results","err","fetchTrailers","prev","gameName","items","length","console","log","getNews","fetchGenreOptions","children","fileName","_jsxFileName","lineNumber","columnNumber","message","style","marginBottom","htmlFor","marginRight","onChange","e","target","map","genre","className","ref","type","placeholder","onKeyDown","onClick","item","src","background_image","alt","width","height","onMouseEnter","onMouseLeave","videoId","allow","allowFullScreen","platforms","p","platform","released","index","rating","averageRating","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/News.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { fetchAllNews, searchForGame, getGenres } from \"../service/NewsService\";\nimport { useSearchParams, useNavigate } from \"react-router-dom\";\nimport \"../assests/News.css\";\nimport { checkAccountType } from \"../utility/CheckAccountType\";\nimport { fetchGameTrailers } from \"../service/GameTrailersFromYoutubeService\";\n\nfunction News() {\n  const [searchParams] = useSearchParams();\n  const selectedGenre = searchParams.get(\"genre\") || \"\";\n\n  const [newsData, setNewsData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const textRef = useRef(\"\");\n  const navigate = useNavigate();\n  const username = localStorage.getItem(\"username\");\n\n  const [genres, setGenres] = useState([]);\n\n  // Track which game is hovered\n  const [hoveredGameSlug, setHoveredGameSlug] = useState(null);\n  const [hoveredGameName, setHoveredGameName] = useState(null);\n\n  // Store ALL fetched trailers in an object: { [gameName]: arrayOfTrailers }\n  const [gameTrailers, setGameTrailers] = useState({});\n\n  // Use a ref if you want to avoid re-fetching for the same game,\n  // but we still need to set state so the UI updates.\n  const gameTrailersRef = useRef({});\n\n  // -- EVENT HANDLERS --\n\n  // On Enter key, do a search\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\") {\n      handleSearch();\n    }\n  };\n\n  // Optional: fetch trailer on click, then navigate\n  const handleImageClick = async (game) => {\n    // If you want to store the trailer on click, do something like:\n    // const data = await fetchGameTrailers({ gameName: game.name });\n    // (Then store it if needed, or just navigate.)\n    navigate(`/news/game/${game.id}`);\n  };\n\n  // Mouse enters: set hovered states\n  const handleMouseEnter = (game) => {\n    setHoveredGameSlug(game.slug);\n    setHoveredGameName(game.name);\n  };\n\n  // Mouse leaves: clear hovered states\n  const handleMouseLeave = () => {\n    setHoveredGameSlug(null);\n    setHoveredGameName(null);\n  };\n\n  // Searching for games\n  const handleSearch = async () => {\n    const inputValue = textRef.current.value.trim();\n    try {\n      if (!inputValue) {\n        const data = await fetchAllNews(null, selectedGenre || null);\n        setNewsData(data);\n      } else {\n        const results = await searchForGame(inputValue);\n        setNewsData(results || []);\n      }\n    } catch (err) {\n      setError(err);\n    }\n    textRef.current.value = \"\";\n  };\n\n  // -- useEffect: Fetch Trailers Whenever hoveredGameName Changes --\n  useEffect(() => {\n    if (!hoveredGameName) return; // No game => do nothing\n\n    const fetchTrailers = async () => {\n      // 1) If we already have trailers for this game in a ref, just set it from the ref\n      if (gameTrailersRef.current[hoveredGameName]) {\n        setGameTrailers((prev) => ({\n          ...prev,\n          [hoveredGameName]: gameTrailersRef.current[hoveredGameName],\n        }));\n        return;\n      }\n\n      // 2) Otherwise, fetch from API\n      try {\n        const data = await fetchGameTrailers({ gameName: hoveredGameName });\n        if (data?.items && data.items.length > 0) {\n          // Save in the ref\n          gameTrailersRef.current[hoveredGameName] = data.items;\n          // Also save in state so the UI updates\n          setGameTrailers((prev) => ({\n            ...prev,\n            [hoveredGameName]: data.items,\n          }));\n          console.log(\"Fetched trailers for:\", hoveredGameName);\n        } else {\n          // No trailers found => store empty array\n          setGameTrailers((prev) => ({\n            ...prev,\n            [hoveredGameName]: [],\n          }));\n          console.log(\"No trailers found for:\", hoveredGameName);\n        }\n      } catch (error) {\n        console.error(\"Error fetching trailer:\", error);\n        // On error, also store empty so we don't keep trying\n        setGameTrailers((prev) => ({\n          ...prev,\n          [hoveredGameName]: [],\n        }));\n      }\n    };\n\n    fetchTrailers();\n  }, [hoveredGameName]);\n\n  // -- useEffect: Fetch News Data --\n  useEffect(() => {\n    async function getNews() {\n      try {\n        setLoading(true);\n        const data = await fetchAllNews(null, selectedGenre || null);\n        setNewsData(data);\n      } catch (err) {\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getNews();\n  }, [selectedGenre]);\n\n  // -- useEffect: Fetch Genre Options --\n  useEffect(() => {\n    async function fetchGenreOptions() {\n      try {\n        const data = await getGenres();\n        setGenres(data);\n      } catch (err) {\n        console.error(\"Error fetching genres:\", err);\n      }\n    }\n    fetchGenreOptions();\n  }, []);\n\n  // -- RENDER --\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <>\n      <h1>News and Trending Games For {username}</h1>\n\n      {/* Genre Filter */}\n      <div style={{ marginBottom: \"1rem\" }}>\n        <label htmlFor=\"genre-select\" style={{ marginRight: \"0.5rem\" }}>\n          Filter by Genre:\n        </label>\n        <select\n          id=\"genre-select\"\n          value={selectedGenre}\n          onChange={(e) =>\n            navigate(e.target.value ? `/news?genre=${e.target.value}` : \"/news\")\n          }\n        >\n          <option value=\"\">All Genres</option>\n          {genres.map((genre) => (\n            <option key={genre.slug} value={genre.slug}>\n              {genre.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"search-bar\">\n        <input\n          ref={textRef}\n          type=\"text\"\n          placeholder=\"Search for Game\"\n          onKeyDown={handleKeyPress}\n        />\n        <button onClick={handleSearch}>Search</button>\n      </div>\n\n      {/* News Grid */}\n      <div className=\"news-grid\">\n        {newsData.map((item) => (\n          <div className=\"game-item\" key={item.slug || item.id}>\n            <div className=\"card-media\">\n              {/* Game Image */}\n              <img\n                src={item.background_image}\n                alt={item.name}\n                style={{ width: \"300px\", height: \"auto\" }}\n                onClick={() => handleImageClick(item)}\n                onMouseEnter={() => handleMouseEnter(item)}\n                onMouseLeave={handleMouseLeave}\n              />\n\n              {/* Only render the trailer if hovered AND we have trailers in gameTrailers[item.name] */}\n              {hoveredGameSlug === item.slug &&\n                gameTrailers[item.name] &&\n                gameTrailers[item.name].length > 0 && (\n                  <iframe\n                    className=\"card-video\"\n                    src={`https://www.youtube.com/embed/${\n                      gameTrailers[item.name][0].id.videoId\n                    }?autoplay=1&mute=1&rel=0&controls=0`}\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                  ></iframe>\n                )}\n            </div>\n\n            {/* Platforms (using checkAccountType) */}\n            <div>\n              {checkAccountType(item.platforms.map((p) => p.platform.name))}\n            </div>\n\n            {/* Game Name */}\n            <h2>{item.name}</h2>\n\n            {/* Extra details if hovered */}\n            {hoveredGameSlug === item.slug && (\n              <div className=\"game-mini-details\">\n                <p>Release: {item.released}</p>\n                <div className=\"genre-for-game\">\n                  <p>\n                    Genres:{\" \"}\n                    {item.genres.map((genre, index) => (\n                      <span key={index} style={{ marginRight: \"0.5rem\" }}>\n                        {genre.name}\n                      </span>\n                    ))}\n                  </p>\n                </div>\n                <div className=\"game-rating\">\n                  <p>Rating: </p>\n                  {item.rating > 0 ? item.rating : item.averageRating}\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default News;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}