{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/LandingPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { handleLogin, exchangeCodeForTokens } from \"../service/XboxAuthService\";\nimport { fetchXboxProfile } from \"../service/profileService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = 'http://localhost:8080';\nfunction LandingPage() {\n  _s();\n  const navigate = useNavigate();\n  const handlePlatformLogin = async platform => {\n    if (platform === \"xbox\") {\n      await handleLogin();\n      await exchangeCodeForTokens();\n      try {\n        const profile = await fetchXboxProfile();\n        console.log(\"Fetched Xbox profile:\", profile);\n        navigate(\"/main\");\n      } catch (error) {\n        console.error(error);\n        toast.error(\"Failed to fetch Xbox profile.\");\n      }\n    }\n    // Add similar logic for PSN and Steam if needed\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing-page\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to GamerHub\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select a platform to log in:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        gap: \"20px\",\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlatformLogin(\"xbox\"),\n        style: buttonStyle(\"green\"),\n        children: \"Xbox Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlatformLogin(\"psn\"),\n        style: buttonStyle(\"blue\"),\n        children: \"PSN Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlatformLogin(\"steam\"),\n        style: buttonStyle(\"gray\"),\n        children: \"Steam Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(LandingPage, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = LandingPage;\nconst buttonStyle = color => ({\n  padding: \"10px 20px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n  backgroundColor: color,\n  color: \"#ffffff\",\n  border: \"none\",\n  borderRadius: \"5px\"\n});\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","useEffect","useNavigate","toast","handleLogin","exchangeCodeForTokens","fetchXboxProfile","jsxDEV","_jsxDEV","apiUrl","LandingPage","_s","navigate","handlePlatformLogin","platform","profile","console","log","error","className","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","gap","onClick","buttonStyle","_c","color","padding","fontSize","cursor","backgroundColor","border","borderRadius","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/LandingPage.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { toast } from \"react-toastify\";\nimport { handleLogin, exchangeCodeForTokens } from \"../service/XboxAuthService\";\nimport { fetchXboxProfile } from \"../service/profileService\";\n\nconst apiUrl = 'http://localhost:8080';\n\nfunction LandingPage() {\n    const navigate = useNavigate();\n\n    const handlePlatformLogin = async (platform) => {\n        if (platform === \"xbox\") {\n            await handleLogin();\n            await exchangeCodeForTokens();\n            try {\n                const profile = await fetchXboxProfile();\n                console.log(\"Fetched Xbox profile:\", profile);\n                navigate(\"/main\");\n            } catch (error) {\n                console.error(error);\n                toast.error(\"Failed to fetch Xbox profile.\");\n            }\n        }\n        // Add similar logic for PSN and Steam if needed\n    };\n\n    return (\n        <div className=\"landing-page\" style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n            <h1>Welcome to GamerHub</h1>\n            <p>Select a platform to log in:</p>\n            <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"20px\", marginTop: \"20px\" }}>\n                <button onClick={() => handlePlatformLogin(\"xbox\")} style={buttonStyle(\"green\")}>\n                    Xbox Login\n                </button>\n                <button onClick={() => handlePlatformLogin(\"psn\")} style={buttonStyle(\"blue\")}>\n                    PSN Login\n                </button>\n                <button onClick={() => handlePlatformLogin(\"steam\")} style={buttonStyle(\"gray\")}>\n                    Steam Login\n                </button>\n            </div>\n        </div>\n    );\n}\n\nconst buttonStyle = (color) => ({\n    padding: \"10px 20px\",\n    fontSize: \"16px\",\n    cursor: \"pointer\",\n    backgroundColor: color,\n    color: \"#ffffff\",\n    border: \"none\",\n    borderRadius: \"5px\",\n});\n\nexport default LandingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}