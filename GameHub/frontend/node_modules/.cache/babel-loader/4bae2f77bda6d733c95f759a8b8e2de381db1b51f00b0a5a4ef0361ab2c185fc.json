{"ast":null,"code":"const apiUrl = 'http://localhost:8080';\nconst jwtToken = localStorage.getItem(\"jwtToken\");\nexport const getSteamRecentPlayedAndOwnedGames = async () => {\n  try {\n    const response = await fetch(`${apiUrl}/api/steam/userinfo/getUserGameInfo`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + jwtToken\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Steam games. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    // data looks like: { players: null, game_count: 2, owenedAndPlayedGames: [...] }\n\n    // Use the correct property from your JSON\n    const steamGames = data.owenedAndPlayedGames || [];\n\n    // Transform to the UI format\n    const games = steamGames.map(game => ({\n      ...game,\n      displayImage: `https://steamcdn-a.akamaihd.net/steam/apps/${game.appid}/header.jpg`,\n      titleHistory: {\n        lastTimePlayedFormatted: game.rtime_last_played && game.rtime_last_played > 0 ? new Date(game.rtime_last_played * 1000).toLocaleString() : null\n      },\n      devices: [\"PC\"]\n    }));\n    return games;\n  } catch (error) {\n    console.error(\"Failed to fetch Steam recent played and owned games:\", error);\n    throw error;\n  }\n};\n\n// Helper function to format minutes into hours and minutes\nconst formatMinutes = minutes => {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  return `${hours}h ${mins}m`;\n};\nexport const getSteamRecentPlayedGames = async () => {\n  try {\n    const response = await fetch(`${apiUrl}/api/steam/userinfo/recent-played-games`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + jwtToken\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Steam games. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    // Use the correct property from your backend response\n    const steamGames = data.owenedAndPlayedGames || [];\n    console.log(\"Steam recent played games:\", steamGames);\n\n    // Transform UI data: convert playtime values to a readable format\n    const games = steamGames.map(game => ({\n      ...game,\n      displayImage: `https://steamcdn-a.akamaihd.net/steam/apps/${game.appid}/header.jpg`,\n      titleHistory: {\n        // Using playtime_2weeks for recent playtime\n        lastTimePlayedFormatted: game.playtime_2weeks && game.playtime_2weeks > 0 ? formatMinutes(game.playtime_2weeks) : \"Not available\"\n      },\n      totalPlaytime: game.playtime_forever && game.playtime_forever > 0 ? formatMinutes(game.playtime_forever) : \"User has not played this game in the last 2 weeks\",\n      devices: [\"PC\"]\n    }));\n    return games;\n  } catch (error) {\n    console.error(\"Failed to fetch Steam recent played games:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["apiUrl","jwtToken","localStorage","getItem","getSteamRecentPlayedAndOwnedGames","response","fetch","method","headers","ok","Error","status","data","json","steamGames","owenedAndPlayedGames","games","map","game","displayImage","appid","titleHistory","lastTimePlayedFormatted","rtime_last_played","Date","toLocaleString","devices","error","console","formatMinutes","minutes","hours","Math","floor","mins","getSteamRecentPlayedGames","log","playtime_2weeks","totalPlaytime","playtime_forever"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/SteamRecentPlayedAndOwnedGames.js"],"sourcesContent":["const apiUrl = 'http://localhost:8080';\nconst jwtToken = localStorage.getItem(\"jwtToken\");\nexport const getSteamRecentPlayedAndOwnedGames = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/api/steam/userinfo/getUserGameInfo`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + jwtToken,\n        },\n      });\n  \n      if (!response.ok) {\n        throw new Error(`Failed to fetch Steam games. Status: ${response.status}`);\n      }\n  \n      const data = await response.json();\n      // data looks like: { players: null, game_count: 2, owenedAndPlayedGames: [...] }\n  \n      // Use the correct property from your JSON\n      const steamGames = data.owenedAndPlayedGames || [];\n  \n      // Transform to the UI format\n      const games = steamGames.map((game) => ({\n        ...game,\n        displayImage: `https://steamcdn-a.akamaihd.net/steam/apps/${game.appid}/header.jpg`,\n\n        titleHistory: {\n          lastTimePlayedFormatted:\n            game.rtime_last_played && game.rtime_last_played > 0\n              ? new Date(game.rtime_last_played * 1000).toLocaleString()\n              : null,\n        },\n        devices: [\"PC\"], \n      }));\n  \n      return games;\n    } catch (error) {\n      console.error(\"Failed to fetch Steam recent played and owned games:\", error);\n      throw error;\n    }\n  };\n  \n  // Helper function to format minutes into hours and minutes\nconst formatMinutes = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n  \n  export const getSteamRecentPlayedGames = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/api/steam/userinfo/recent-played-games`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \" + jwtToken,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch Steam games. Status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      // Use the correct property from your backend response\n      const steamGames = data.owenedAndPlayedGames || [];\n      console.log(\"Steam recent played games:\", steamGames);\n      \n      // Transform UI data: convert playtime values to a readable format\n      const games = steamGames.map((game) => ({\n        ...game,\n        displayImage: `https://steamcdn-a.akamaihd.net/steam/apps/${game.appid}/header.jpg`,\n        titleHistory: {\n          // Using playtime_2weeks for recent playtime\n          lastTimePlayedFormatted: game.playtime_2weeks && game.playtime_2weeks > 0 \n            ? formatMinutes(game.playtime_2weeks)\n            : \"Not available\",\n        },\n        totalPlaytime: game.playtime_forever && game.playtime_forever > 0\n            ? formatMinutes(game.playtime_forever)\n            : \"User has not played this game in the last 2 weeks\",\n        devices: [\"PC\"],\n      }));\n      \n      return games;\n    } catch (error) {\n      console.error(\"Failed to fetch Steam recent played games:\", error);\n      throw error;\n    }\n  };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}