{"ast":null,"code":"const apiUrl = 'http://localhost:8080';\nconst jwtToken = localStorage.getItem(\"jwtToken\");\nexport const getSteamRecentPlayedAndOwnedGames = async () => {\n  try {\n    const response = await fetch(`${apiUrl}/api/steam/userinfo/getUserGameInfo`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': 'Bearer ' + jwtToken\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Steam recent played and owned games. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    // Transform API games to match UI expected format\n    const games = data.response.games.map(game => ({\n      ...game,\n      displayImage: `https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/${game.appid}/${game.img_icon_url}.jpg`,\n      titleHistory: {\n        lastTimePlayedFormatted: game.rtime_last_played > 0 ? new Date(game.rtime_last_played * 1000).toLocaleString() : null\n      },\n      devices: [] // placeholder for device info if needed\n    }));\n    return games;\n  } catch (error) {\n    console.error(error);\n    console.error(\"Failed to fetch Steam recent played and owned games.\");\n    throw error;\n  }\n};","map":{"version":3,"names":["apiUrl","jwtToken","localStorage","getItem","getSteamRecentPlayedAndOwnedGames","response","fetch","method","headers","ok","Error","status","data","json","games","map","game","displayImage","appid","img_icon_url","titleHistory","lastTimePlayedFormatted","rtime_last_played","Date","toLocaleString","devices","error","console"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/SteamRecentPlayedAndOwnedGames.js"],"sourcesContent":["const apiUrl = 'http://localhost:8080';\nconst jwtToken = localStorage.getItem(\"jwtToken\");\n\nexport const getSteamRecentPlayedAndOwnedGames = async () => {\n    try {\n        const response = await fetch(`${apiUrl}/api/steam/userinfo/getUserGameInfo`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Authorization': 'Bearer ' + jwtToken,\n            },\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch Steam recent played and owned games. Status: ${response.status}`);\n        }\n        const data = await response.json();\n        // Transform API games to match UI expected format\n        const games = data.response.games.map(game => ({\n            ...game,\n            displayImage: `https://steamcdn-a.akamaihd.net/steamcommunity/public/images/apps/${game.appid}/${game.img_icon_url}.jpg`,\n            titleHistory: {\n                lastTimePlayedFormatted: game.rtime_last_played > 0\n                    ? new Date(game.rtime_last_played * 1000).toLocaleString()\n                    : null\n            },\n            devices: [] // placeholder for device info if needed\n        }));\n        return games;\n    } catch (error) {\n        console.error(error);\n        console.error(\"Failed to fetch Steam recent played and owned games.\");\n        throw error;\n    }\n};"],"mappings":"AAAA,MAAMA,MAAM,GAAG,uBAAuB;AACtC,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;AAEjD,OAAO,MAAMC,iCAAiC,GAAG,MAAAA,CAAA,KAAY;EACzD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,MAAM,qCAAqC,EAAE;MACzEO,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGP;MACjC;IACJ,CAAC,CAAC;IACF,IAAI,CAACI,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,gEAAgEL,QAAQ,CAACM,MAAM,EAAE,CAAC;IACtG;IACA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC;IACA,MAAMC,KAAK,GAAGF,IAAI,CAACP,QAAQ,CAACS,KAAK,CAACC,GAAG,CAACC,IAAI,KAAK;MAC3C,GAAGA,IAAI;MACPC,YAAY,EAAE,qEAAqED,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACG,YAAY,MAAM;MACxHC,YAAY,EAAE;QACVC,uBAAuB,EAAEL,IAAI,CAACM,iBAAiB,GAAG,CAAC,GAC7C,IAAIC,IAAI,CAACP,IAAI,CAACM,iBAAiB,GAAG,IAAI,CAAC,CAACE,cAAc,CAAC,CAAC,GACxD;MACV,CAAC;MACDC,OAAO,EAAE,EAAE,CAAC;IAChB,CAAC,CAAC,CAAC;IACH,OAAOX,KAAK;EAChB,CAAC,CAAC,OAAOY,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBC,OAAO,CAACD,KAAK,CAAC,sDAAsD,CAAC;IACrE,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}