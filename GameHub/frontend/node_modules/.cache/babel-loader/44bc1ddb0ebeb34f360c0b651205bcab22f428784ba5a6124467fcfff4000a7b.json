{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\n\n// MSAL Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/consumers/\",\n    // Ensure this is correct\n    redirectUri: \"http://localhost:3000\" // Replace with your application's redirect URI\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: false\n  }\n};\nconst LoginWithMicrosoft = () => {\n  _s();\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [xboxToken, setXboxToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [isInitializing, setIsInitializing] = useState(true);\n  useEffect(() => {\n    const initializeMsal = async () => {\n      try {\n        const instance = new PublicClientApplication(msalConfig);\n        await instance.initialize();\n        setMsalInstance(instance);\n      } catch (err) {\n        setError(\"Failed to initialize MSAL: \" + err.message);\n        console.error(\"MSAL initialization error:\", err);\n      } finally {\n        setIsInitializing(false);\n      }\n    };\n    initializeMsal();\n  }, []);\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n    try {\n      // Trigger MSAL login with correct scopes\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"]\n      });\n      console.log(\"Login response:\", loginResponse);\n\n      // Acquire Azure AD token\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n        account: loginResponse.account\n      });\n      console.log(\"Azure AD Token:\", tokenResponse.accessToken);\n\n      // Exchange Azure AD token for Xbox Live token\n      const xboxLiveToken = await getXboxLiveToken(tokenResponse.accessToken);\n      setXboxToken(xboxLiveToken);\n      console.log(\"Xbox Live Token:\", xboxLiveToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n  const getXboxLiveToken = async azureAdToken => {\n    const url = \"https://user.auth.xboxlive.com/user/authenticate\";\n    const body = {\n      Properties: {\n        AuthMethod: \"RPS\",\n        SiteName: \"user.auth.xboxlive.com\",\n        RpsTicket: `d=${azureAdToken}`\n      },\n      RelyingParty: \"http://auth.xboxlive.com\",\n      TokenType: \"JWT\"\n    };\n    try {\n      var _data$DisplayClaims, _data$DisplayClaims$x, _data$DisplayClaims$x2;\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) {\n        throw new Error(`Xbox Live authentication failed with status ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Xbox Live Data:\", data); // Log full response\n      return {\n        token: data.Token,\n        userHash: (_data$DisplayClaims = data.DisplayClaims) === null || _data$DisplayClaims === void 0 ? void 0 : (_data$DisplayClaims$x = _data$DisplayClaims.xui) === null || _data$DisplayClaims$x === void 0 ? void 0 : (_data$DisplayClaims$x2 = _data$DisplayClaims$x[0]) === null || _data$DisplayClaims$x2 === void 0 ? void 0 : _data$DisplayClaims$x2.uhs\n      };\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error acquiring Xbox Live token:\", err);\n      return null;\n    }\n  };\n  const getXSTSToken = async xboxLiveToken => {\n    const url = \"http://localhost:8080/api/auth/xsts-token\";\n    const body = {\n      xboxLiveToken\n    };\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`XSTS Token Error: ${errorData}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      throw new Error(`XSTS Token Error: ${err.message}`);\n    }\n  };\n  const loginAndSendToken = async () => {\n    if (!xboxToken) {\n      setError(\"No Xbox Live token available. Please log in first.\");\n      return;\n    }\n    try {\n      // Get XSTS token with user hash\n      const xstsResponse = await getXSTSToken(xboxToken.token);\n      const userHash = xboxToken.userHash;\n\n      // Format token for PlayFab\n      const formattedToken = `XBL3.0 x=${userHash};${xstsResponse.Token}`;\n      console.log(\"Formatted token:\", formattedToken);\n\n      // Send to backend\n      const xboxResponse = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          xboxToken: formattedToken,\n          createAccount: false\n        })\n      });\n      if (!xboxResponse.ok) {\n        const errorData = await xboxResponse.text();\n        throw new Error(`Xbox server error: ${errorData}`);\n      }\n      const xboxData = await xboxResponse.json();\n      console.log(\"Xbox server response:\", xboxData);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login and token submission:\", err);\n    }\n  };\n  if (isInitializing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Initializing authentication...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Xbox Token Retrieval\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      disabled: !msalInstance || isInitializing,\n      children: \"Login and Get Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loginAndSendToken,\n      disabled: !xboxToken,\n      children: \"Login Xbox Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), xboxToken && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Xbox Live Token: \", xboxToken.token]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"User Hash: \", xboxToken.userHash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginWithMicrosoft, \"UMjP4gGoS09eJcBmK4FFTtQBoBo=\");\n_c = LoginWithMicrosoft;\nexport default LoginWithMicrosoft;\nvar _c;\n$RefreshReg$(_c, \"LoginWithMicrosoft\");","map":{"version":3,"names":["React","useState","useEffect","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","LoginWithMicrosoft","_s","msalInstance","setMsalInstance","xboxToken","setXboxToken","error","setError","isInitializing","setIsInitializing","initializeMsal","instance","initialize","err","message","console","login","loginResponse","loginPopup","scopes","log","tokenResponse","acquireTokenSilent","account","accessToken","xboxLiveToken","getXboxLiveToken","azureAdToken","url","body","Properties","AuthMethod","SiteName","RpsTicket","RelyingParty","TokenType","_data$DisplayClaims","_data$DisplayClaims$x","_data$DisplayClaims$x2","response","fetch","method","headers","JSON","stringify","ok","Error","status","data","json","token","Token","userHash","DisplayClaims","xui","uhs","getXSTSToken","errorData","text","loginAndSendToken","xstsResponse","formattedToken","xboxResponse","createAccount","xboxData","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","color","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\n\n// MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/consumers/\", // Ensure this is correct\n    redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: false,\n  },\n};\n\nconst LoginWithMicrosoft = () => {\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [xboxToken, setXboxToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [isInitializing, setIsInitializing] = useState(true);\n\n  useEffect(() => {\n    const initializeMsal = async () => {\n      try {\n        const instance = new PublicClientApplication(msalConfig);\n        await instance.initialize();\n        setMsalInstance(instance);\n      } catch (err) {\n        setError(\"Failed to initialize MSAL: \" + err.message);\n        console.error(\"MSAL initialization error:\", err);\n      } finally {\n        setIsInitializing(false);\n      }\n    };\n\n    initializeMsal();\n  }, []);\n\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n\n    try {\n      // Trigger MSAL login with correct scopes\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n      });\n\n      console.log(\"Login response:\", loginResponse);\n\n      // Acquire Azure AD token\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n        account: loginResponse.account,\n      });\n\n      console.log(\"Azure AD Token:\", tokenResponse.accessToken);\n\n      // Exchange Azure AD token for Xbox Live token\n      const xboxLiveToken = await getXboxLiveToken(tokenResponse.accessToken);\n      setXboxToken(xboxLiveToken);\n      console.log(\"Xbox Live Token:\", xboxLiveToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n\n  const getXboxLiveToken = async (azureAdToken) => {\n    const url = \"https://user.auth.xboxlive.com/user/authenticate\";\n    const body = {\n      Properties: {\n        AuthMethod: \"RPS\",\n        SiteName: \"user.auth.xboxlive.com\",\n        RpsTicket: `d=${azureAdToken}`,\n      },\n      RelyingParty: \"http://auth.xboxlive.com\",\n      TokenType: \"JWT\",\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Xbox Live authentication failed with status ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(\"Xbox Live Data:\", data); // Log full response\n      return {\n        token: data.Token,\n        userHash: data.DisplayClaims?.xui?.[0]?.uhs\n      };\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error acquiring Xbox Live token:\", err);\n      return null;\n    }\n  };\n\n  const getXSTSToken = async (xboxLiveToken) => {\n    const url = \"http://localhost:8080/api/auth/xsts-token\";\n    const body = { xboxLiveToken };\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`XSTS Token Error: ${errorData}`);\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      throw new Error(`XSTS Token Error: ${err.message}`);\n    }\n  };\n\n  const loginAndSendToken = async () => {\n    if (!xboxToken) {\n      setError(\"No Xbox Live token available. Please log in first.\");\n      return;\n    }\n    try {\n      // Get XSTS token with user hash\n      const xstsResponse = await getXSTSToken(xboxToken.token);\n      const userHash = xboxToken.userHash;\n      \n      // Format token for PlayFab\n      const formattedToken = `XBL3.0 x=${userHash};${xstsResponse.Token}`;\n      console.log(\"Formatted token:\", formattedToken);\n\n      // Send to backend\n      const xboxResponse = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ xboxToken: formattedToken, createAccount: false }),\n      });\n\n      if (!xboxResponse.ok) {\n        const errorData = await xboxResponse.text();\n        throw new Error(`Xbox server error: ${errorData}`);\n      }\n\n      const xboxData = await xboxResponse.json();\n      console.log(\"Xbox server response:\", xboxData);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login and token submission:\", err);\n    }\n  };\n\n  if (isInitializing) {\n    return <div>Initializing authentication...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Test Xbox Token Retrieval</h1>\n      <button onClick={login} disabled={!msalInstance || isInitializing}>\n        Login and Get Token\n      </button>\n      <button onClick={loginAndSendToken} disabled={!xboxToken}>\n        Login Xbox Server\n      </button>\n      {xboxToken && (\n        <div>\n          <p>Xbox Live Token: {xboxToken.token}</p>\n          <p>User Hash: {xboxToken.userHash}</p>\n        </div>\n      )}\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default LoginWithMicrosoft;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}