{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/XboxLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport { msalInstance } from './msalConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst XboxLogin = () => {\n  _s();\n  const signInWithXbox = useCallback(async () => {\n    try {\n      // Sign the user in using MSAL - this gives a Microsoft access token.\n      const authResult = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"User.Read\"]\n      });\n      const microsoftAccessToken = authResult.accessToken;\n\n      // Exchange the Microsoft access token for an Xbox Live token (XSTS).\n      const xboxToken = await getXboxTokenFromMicrosoftAccessToken(microsoftAccessToken);\n\n      // Send the obtained Xbox token to your backend\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          XboxToken: xboxToken,\n          CreateAccount: true\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to log in via Xbox: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"Login successful:\", data);\n    } catch (error) {\n      console.error(\"Error during sign-in:\", error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: signInWithXbox,\n    children: \"Sign in with Xbox\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n// Implement the logic to get XBL and XSTS tokens.\n// NOTE: You must confirm the exact payload and steps via official Xbox Live documentation.\n_s(XboxLogin, \"RWitseS9vnvZae3Qh8+gAJ8Eu8c=\");\n_c = XboxLogin;\nasync function getXboxTokenFromMicrosoftAccessToken(msToken) {\n  // Step 1: Get XBL User Token\n  const xblResponse = await fetch(\"https://user.auth.xboxlive.com/user/authenticate\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"RelyingParty\": \"http://auth.xboxlive.com\",\n      \"TokenType\": \"JWT\",\n      \"Properties\": {\n        \"AuthMethod\": \"RPS\",\n        \"SiteName\": \"user.auth.xboxlive.com\",\n        \"RpsTicket\": `d=${msToken}` // 'd=' prefix is required as per Xbox docs\n      }\n    })\n  });\n  if (!xblResponse.ok) {\n    const errorText = await xblResponse.text();\n    throw new Error(`Failed to get XBL token: ${errorText}`);\n  }\n  const xblData = await xblResponse.json();\n  const xblToken = xblData.Token;\n  if (!xblToken) {\n    throw new Error(\"XBL token not found in response\");\n  }\n\n  // Step 2: Use XBL token to get XSTS token\n  const xstsResponse = await fetch(\"https://xsts.auth.xboxlive.com/xsts/authorize\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      \"RelyingParty\": \"http://xboxlive.com\",\n      \"TokenType\": \"JWT\",\n      \"Properties\": {\n        \"SandboxId\": \"RETAIL\",\n        \"UserTokens\": [xblToken]\n      }\n    })\n  });\n  if (!xstsResponse.ok) {\n    const errorText = await xstsResponse.text();\n    throw new Error(`Failed to get XSTS token: ${errorText}`);\n  }\n  const xstsData = await xstsResponse.json();\n  const xstsToken = xstsData.Token;\n  if (!xstsToken) {\n    throw new Error(\"XSTS token not found in response\");\n  }\n  return xstsToken;\n}\nexport default XboxLogin;\nvar _c;\n$RefreshReg$(_c, \"XboxLogin\");","map":{"version":3,"names":["React","useCallback","msalInstance","jsxDEV","_jsxDEV","XboxLogin","_s","signInWithXbox","authResult","loginPopup","scopes","microsoftAccessToken","accessToken","xboxToken","getXboxTokenFromMicrosoftAccessToken","response","fetch","method","headers","body","JSON","stringify","XboxToken","CreateAccount","ok","errorText","text","Error","data","json","console","log","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","msToken","xblResponse","xblData","xblToken","Token","xstsResponse","xstsData","xstsToken","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/XboxLogin.js"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { msalInstance } from './msalConfig';\n\nconst XboxLogin = () => {\n  const signInWithXbox = useCallback(async () => {\n    try {\n      // Sign the user in using MSAL - this gives a Microsoft access token.\n      const authResult = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"User.Read\"], \n      });\n\n      const microsoftAccessToken = authResult.accessToken;\n\n      // Exchange the Microsoft access token for an Xbox Live token (XSTS).\n      const xboxToken = await getXboxTokenFromMicrosoftAccessToken(microsoftAccessToken);\n\n      // Send the obtained Xbox token to your backend\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          XboxToken: xboxToken,\n          CreateAccount: true,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to log in via Xbox: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"Login successful:\", data);\n\n    } catch (error) {\n      console.error(\"Error during sign-in:\", error);\n    }\n  }, []);\n\n  return (\n    <button onClick={signInWithXbox}>Sign in with Xbox</button>\n  );\n};\n\n// Implement the logic to get XBL and XSTS tokens.\n// NOTE: You must confirm the exact payload and steps via official Xbox Live documentation.\nasync function getXboxTokenFromMicrosoftAccessToken(msToken) {\n  // Step 1: Get XBL User Token\n  const xblResponse = await fetch(\"https://user.auth.xboxlive.com/user/authenticate\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      \"RelyingParty\": \"http://auth.xboxlive.com\",\n      \"TokenType\": \"JWT\",\n      \"Properties\": {\n        \"AuthMethod\": \"RPS\",\n        \"SiteName\": \"user.auth.xboxlive.com\",\n        \"RpsTicket\": `d=${msToken}` // 'd=' prefix is required as per Xbox docs\n      }\n    })\n  });\n\n  if (!xblResponse.ok) {\n    const errorText = await xblResponse.text();\n    throw new Error(`Failed to get XBL token: ${errorText}`);\n  }\n\n  const xblData = await xblResponse.json();\n  const xblToken = xblData.Token;\n  if (!xblToken) {\n    throw new Error(\"XBL token not found in response\");\n  }\n\n  // Step 2: Use XBL token to get XSTS token\n  const xstsResponse = await fetch(\"https://xsts.auth.xboxlive.com/xsts/authorize\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({\n      \"RelyingParty\": \"http://xboxlive.com\",\n      \"TokenType\": \"JWT\",\n      \"Properties\": {\n        \"SandboxId\": \"RETAIL\",\n        \"UserTokens\": [xblToken]\n      }\n    })\n  });\n\n  if (!xstsResponse.ok) {\n    const errorText = await xstsResponse.text();\n    throw new Error(`Failed to get XSTS token: ${errorText}`);\n  }\n\n  const xstsData = await xstsResponse.json();\n  const xstsToken = xstsData.Token;\n  if (!xstsToken) {\n    throw new Error(\"XSTS token not found in response\");\n  }\n\n  return xstsToken;\n}\n\nexport default XboxLogin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}