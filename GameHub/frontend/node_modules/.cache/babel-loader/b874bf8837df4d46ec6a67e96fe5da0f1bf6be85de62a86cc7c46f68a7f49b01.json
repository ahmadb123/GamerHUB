{"ast":null,"code":"// src/service/XboxAchievements.js\n\nimport React from \"react\";\nconst apiUrl = 'http://localhost:8080';\nexport const getXboxAchievements = async () => {\n  const uhs = localStorage.getItem(\"uhs\");\n  const XSTS_token = localStorage.getItem(\"XSTS_token\");\n\n  // Fix the condition so that we return early if either is missing\n  if (!uhs || !XSTS_token) {\n    console.error(\"User is not authenticated\");\n    // Return an empty array (or handle it however you like)\n    return [];\n  }\n  try {\n    const response = await fetch(`${apiUrl}/api/xbox/profile/achievements`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `XBL3.0 x=${uhs};${XSTS_token}`\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n\n      // Make sure we return an array to avoid .map() errors.\n      return Array.isArray(data) ? data : [];\n    } else {\n      console.error(\"Failed to fetch achievements. Status:\", response.status);\n      return [];\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};","map":{"version":3,"names":["React","apiUrl","getXboxAchievements","uhs","localStorage","getItem","XSTS_token","console","error","response","fetch","method","headers","Authorization","ok","data","json","Array","isArray","status"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/XboxAchievements.js"],"sourcesContent":["// src/service/XboxAchievements.js\n\nimport React from \"react\";\n\nconst apiUrl = 'http://localhost:8080';\n\nexport const getXboxAchievements = async () => {\n  const uhs = localStorage.getItem(\"uhs\");\n  const XSTS_token = localStorage.getItem(\"XSTS_token\");\n\n  // Fix the condition so that we return early if either is missing\n  if (!uhs || !XSTS_token) {\n    console.error(\"User is not authenticated\");\n    // Return an empty array (or handle it however you like)\n    return [];\n  }\n\n  try {\n    const response = await fetch(`${apiUrl}/api/xbox/profile/achievements`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `XBL3.0 x=${uhs};${XSTS_token}`,\n      },\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n\n      // Make sure we return an array to avoid .map() errors.\n      return Array.isArray(data) ? data : [];\n    } else {\n      console.error(\"Failed to fetch achievements. Status:\", response.status);\n      return [];\n    }\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,uBAAuB;AAEtC,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;EACvC,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;;EAErD;EACA,IAAI,CAACF,GAAG,IAAI,CAACG,UAAU,EAAE;IACvBC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;IAC1C;IACA,OAAO,EAAE;EACX;EAEA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,MAAM,gCAAgC,EAAE;MACtEU,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,YAAYV,GAAG,IAAIG,UAAU;MAC9C;IACF,CAAC,CAAC;IAEF,IAAIG,QAAQ,CAACK,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;;MAElC;MACA,OAAOC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE;IACxC,CAAC,MAAM;MACLR,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEC,QAAQ,CAACU,MAAM,CAAC;MACvE,OAAO,EAAE;IACX;EACF,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}