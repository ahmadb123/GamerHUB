{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/utility/CheckAccountType.js\";\nimport { FaDesktop, FaXbox, FaPlaystation, FaGamepad } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const checkAccountType = platforms => {\n  if (!Array.isArray(platforms)) {\n    throw new Error(\"Expected an array of platforms\");\n  }\n  const platformCount = {\n    pc: 0,\n    xbox: 0,\n    playstation: 0,\n    other: 0\n  };\n\n  // Count each platform category\n  platforms.forEach(platform => {\n    switch (platform.toLowerCase()) {\n      case \"pc\":\n        platformCount.pc++;\n        break;\n      case \"xbox one\":\n      case \"xbox series s/x\":\n      case \"xbox\":\n        platformCount.xbox++;\n        break;\n      case \"playstation 5\":\n      case \"ps4\":\n      case \"ps5\":\n      case \"playstation\":\n        platformCount.playstation++;\n        break;\n      default:\n        platformCount.other++;\n        break;\n    }\n  });\n\n  // Adjust counts to a maximum of 1 for each category\n  const keys = Object.keys(platformCount);\n  let maxCount = Math.max(...Object.values(platformCount));\n  while (maxCount > 1) {\n    keys.forEach(key => {\n      if (platformCount[key] > 1) {\n        platformCount[key] = 1; // Reduce to 1\n      }\n    });\n    maxCount = Math.max(...Object.values(platformCount)); // Recalculate the max\n  }\n\n  // Prepare the icons to display based on detected platforms\n  const icons = [];\n  if (platformCount.pc > 0) icons.push(/*#__PURE__*/_jsxDEV(FaDesktop, {\n    style: {\n      marginRight: \"5px\"\n    }\n  }, \"pc\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 42\n  }, this));\n  if (platformCount.xbox > 0) icons.push(/*#__PURE__*/_jsxDEV(FaXbox, {\n    style: {\n      marginRight: \"5px\"\n    }\n  }, \"xbox\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 44\n  }, this));\n  if (platformCount.playstation > 0) icons.push(/*#__PURE__*/_jsxDEV(FaPlaystation, {\n    style: {\n      marginRight: \"5px\"\n    }\n  }, \"playstation\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 51\n  }, this));\n  if (icons.length === 0) icons.push(/*#__PURE__*/_jsxDEV(FaGamepad, {\n    style: {\n      marginRight: \"5px\"\n    }\n  }, \"other\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 40\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: icons\n  }, void 0, false);\n};","map":{"version":3,"names":["FaDesktop","FaXbox","FaPlaystation","FaGamepad","jsxDEV","_jsxDEV","Fragment","_Fragment","checkAccountType","platforms","Array","isArray","Error","platformCount","pc","xbox","playstation","other","forEach","platform","toLowerCase","keys","Object","maxCount","Math","max","values","key","icons","push","style","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","length","children"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/utility/CheckAccountType.js"],"sourcesContent":["import { FaDesktop, FaXbox, FaPlaystation, FaGamepad } from \"react-icons/fa\";\n\nexport const checkAccountType = (platforms) => {\n    if (!Array.isArray(platforms)) {\n        throw new Error(\"Expected an array of platforms\");\n    }\n\n    const platformCount = {\n        pc: 0,\n        xbox: 0,\n        playstation: 0,\n        other: 0,\n    };\n\n    // Count each platform category\n    platforms.forEach((platform) => {\n        switch (platform.toLowerCase()) {\n            case \"pc\":\n                platformCount.pc++;\n                break;\n            case \"xbox one\":\n            case \"xbox series s/x\":\n            case \"xbox\":\n                platformCount.xbox++;\n                break;\n            case \"playstation 5\":\n            case \"ps4\":\n            case \"ps5\":\n            case \"playstation\":\n                platformCount.playstation++;\n                break;\n            default:\n                platformCount.other++;\n                break;\n        }\n    });\n\n    // Adjust counts to a maximum of 1 for each category\n    const keys = Object.keys(platformCount);\n    let maxCount = Math.max(...Object.values(platformCount));\n\n    while (maxCount > 1) {\n        keys.forEach((key) => {\n            if (platformCount[key] > 1) {\n                platformCount[key] = 1; // Reduce to 1\n            }\n        });\n        maxCount = Math.max(...Object.values(platformCount)); // Recalculate the max\n    }\n\n    // Prepare the icons to display based on detected platforms\n    const icons = [];\n    if (platformCount.pc > 0) icons.push(<FaDesktop key=\"pc\" style={{ marginRight: \"5px\" }} />);\n    if (platformCount.xbox > 0) icons.push(<FaXbox key=\"xbox\" style={{ marginRight: \"5px\" }} />);\n    if (platformCount.playstation > 0) icons.push(<FaPlaystation key=\"playstation\" style={{ marginRight: \"5px\" }} />);\n    if (icons.length === 0) icons.push(<FaGamepad key=\"other\" style={{ marginRight: \"5px\" }} />);\n\n    return <>{icons}</>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}