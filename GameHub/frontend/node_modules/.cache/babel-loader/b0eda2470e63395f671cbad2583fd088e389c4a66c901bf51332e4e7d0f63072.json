{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/News.js\",\n  _s = $RefreshSig$();\n// src/components/News.jsx\nimport React, { useEffect, useState } from 'react';\nimport { fetchAllNews } from \"../service/NewsService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction News() {\n  _s();\n  // Store the full news data and the filtered subset\n  const [allNews, setAllNews] = useState([]);\n  const [filteredNews, setFilteredNews] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Filter state\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [selectedPlatform, setSelectedPlatform] = useState('');\n\n  // Options for the filters, extracted from the news data\n  const [availableGenres, setAvailableGenres] = useState([]);\n  const [availablePlatforms, setAvailablePlatforms] = useState([]);\n\n  // Fetch news on mount (backend returns an array of news with genres & platforms)\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const data = await fetchAllNews(); // no filter parameters initially\n        setAllNews(data);\n        setFilteredNews(data);\n\n        // Extract unique genres and platforms from the fetched news\n        const genresSet = new Set();\n        const platformsSet = new Set();\n        data.forEach(item => {\n          // Each news item contains an array of genres\n          if (item.genres) {\n            item.genres.forEach(g => {\n              if (g.name) {\n                genresSet.add(g.name);\n              }\n            });\n          }\n          // Each news item contains an array of platforms\n          if (item.platforms) {\n            item.platforms.forEach(p => {\n              if (p.platform && p.platform.slug) {\n                platformsSet.add(p.platform.slug);\n              }\n            });\n          }\n        });\n        setAvailableGenres(Array.from(genresSet));\n        setAvailablePlatforms(Array.from(platformsSet));\n      } catch (error) {\n        console.error(\"Error fetching news:\", error);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n\n  // Whenever a filter changes, update the filtered news list\n  useEffect(() => {\n    let filtered = allNews;\n    if (selectedGenre) {\n      filtered = filtered.filter(item => item.genres && item.genres.some(g => g.name === selectedGenre));\n    }\n    if (selectedPlatform) {\n      filtered = filtered.filter(item => item.platforms && item.platforms.some(p => p.platform.slug === selectedPlatform));\n    }\n    setFilteredNews(filtered);\n  }, [selectedGenre, selectedPlatform, allNews]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"news\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"News Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Genre:\\xA0\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedGenre,\n          onChange: e => setSelectedGenre(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"All Genres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), availableGenres.map((genre, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: genre,\n            children: genre\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), \"\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Platform:\\xA0\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPlatform,\n          onChange: e => setSelectedPlatform(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"All Platforms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), availablePlatforms.map((platform, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: platform,\n            children: platform\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Page is loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this) : filteredNews.length > 0 ? filteredNews.map((newsItem, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"news-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: newsItem.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), newsItem.background_image && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: newsItem.background_image,\n        alt: newsItem.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Released: \", newsItem.released]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this), newsItem.genres && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genres\",\n        children: newsItem.genres.map((g, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: g.name\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No news found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(News, \"eyX8RmN0C63RlyMdTcZxnvqVArc=\");\n_c = News;\nexport default News;\nvar _c;\n$RefreshReg$(_c, \"News\");","map":{"version":3,"names":["React","useEffect","useState","fetchAllNews","jsxDEV","_jsxDEV","News","_s","allNews","setAllNews","filteredNews","setFilteredNews","loading","setLoading","selectedGenre","setSelectedGenre","selectedPlatform","setSelectedPlatform","availableGenres","setAvailableGenres","availablePlatforms","setAvailablePlatforms","fetchData","data","genresSet","Set","platformsSet","forEach","item","genres","g","name","add","platforms","p","platform","slug","Array","from","error","console","filtered","filter","some","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","genre","index","length","newsItem","background_image","src","alt","released","idx","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/News.js"],"sourcesContent":["// src/components/News.jsx\nimport React, { useEffect, useState } from 'react';\nimport { fetchAllNews } from \"../service/NewsService\";\n\nfunction News() {\n  // Store the full news data and the filtered subset\n  const [allNews, setAllNews] = useState([]);\n  const [filteredNews, setFilteredNews] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  // Filter state\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [selectedPlatform, setSelectedPlatform] = useState('');\n  \n  // Options for the filters, extracted from the news data\n  const [availableGenres, setAvailableGenres] = useState([]);\n  const [availablePlatforms, setAvailablePlatforms] = useState([]);\n\n  // Fetch news on mount (backend returns an array of news with genres & platforms)\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const data = await fetchAllNews(); // no filter parameters initially\n        setAllNews(data);\n        setFilteredNews(data);\n\n        // Extract unique genres and platforms from the fetched news\n        const genresSet = new Set();\n        const platformsSet = new Set();\n        data.forEach(item => {\n          // Each news item contains an array of genres\n          if (item.genres) {\n            item.genres.forEach(g => {\n              if (g.name) {\n                genresSet.add(g.name);\n              }\n            });\n          }\n          // Each news item contains an array of platforms\n          if (item.platforms) {\n            item.platforms.forEach(p => {\n              if (p.platform && p.platform.slug) {\n                platformsSet.add(p.platform.slug);\n              }\n            });\n          }\n        });\n        setAvailableGenres(Array.from(genresSet));\n        setAvailablePlatforms(Array.from(platformsSet));\n      } catch (error) {\n        console.error(\"Error fetching news:\", error);\n      }\n      setLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n  // Whenever a filter changes, update the filtered news list\n  useEffect(() => {\n    let filtered = allNews;\n\n    if (selectedGenre) {\n      filtered = filtered.filter(item =>\n        item.genres &&\n        item.genres.some(g => g.name === selectedGenre)\n      );\n    }\n    if (selectedPlatform) {\n      filtered = filtered.filter(item =>\n        item.platforms &&\n        item.platforms.some(p => p.platform.slug === selectedPlatform)\n      );\n    }\n\n    setFilteredNews(filtered);\n  }, [selectedGenre, selectedPlatform, allNews]);\n\n  return (\n    <div className=\"news\">\n      <h1>News Page</h1>\n      <div className=\"filters\">\n        <label>\n          Genre:&nbsp;\n          <select\n            value={selectedGenre}\n            onChange={e => setSelectedGenre(e.target.value)}\n          >\n            <option value=\"\">All Genres</option>\n            {availableGenres.map((genre, index) => (\n              <option key={index} value={genre}>{genre}</option>\n            ))}\n          </select>\n        </label>\n        &nbsp;&nbsp;\n        <label>\n          Platform:&nbsp;\n          <select\n            value={selectedPlatform}\n            onChange={e => setSelectedPlatform(e.target.value)}\n          >\n            <option value=\"\">All Platforms</option>\n            {availablePlatforms.map((platform, index) => (\n              <option key={index} value={platform}>{platform}</option>\n            ))}\n          </select>\n        </label>\n      </div>\n\n      {loading ? (\n        <p>Page is loading...</p>\n      ) : filteredNews.length > 0 ? (\n        filteredNews.map((newsItem, index) => (\n          <div key={index} className=\"news-item\">\n            <h2>{newsItem.name}</h2>\n            {newsItem.background_image && (\n              <img src={newsItem.background_image} alt={newsItem.name} />\n            )}\n            <p>Released: {newsItem.released}</p>\n            {newsItem.genres && (\n              <div className=\"genres\">\n                {newsItem.genres.map((g, idx) => (\n                  <span key={idx}>{g.name}</span>\n                ))}\n              </div>\n            )}\n          </div>\n        ))\n      ) : (\n        <p>No news found.</p>\n      )}\n    </div>\n  );\n}\n\nexport default News;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}