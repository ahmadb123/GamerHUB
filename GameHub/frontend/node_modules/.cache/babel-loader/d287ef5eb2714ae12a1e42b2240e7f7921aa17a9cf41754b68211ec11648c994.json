{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\n\n// MSAL Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/consumers/\",\n    // Ensure this is correct\n    redirectUri: \"http://localhost:3000\" // Replace with your application's redirect URI\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: false\n  }\n};\nconst LoginWithMicrosoft = () => {\n  _s();\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [xboxToken, setXboxToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [isInitializing, setIsInitializing] = useState(true);\n  useEffect(() => {\n    const initializeMsal = async () => {\n      try {\n        const instance = new PublicClientApplication(msalConfig);\n        await instance.initialize();\n        setMsalInstance(instance);\n      } catch (err) {\n        setError(\"Failed to initialize MSAL: \" + err.message);\n        console.error(\"MSAL initialization error:\", err);\n      } finally {\n        setIsInitializing(false);\n      }\n    };\n    initializeMsal();\n  }, []);\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n    try {\n      // Trigger MSAL login with correct scopes\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"]\n      });\n      console.log(\"Login response:\", loginResponse);\n\n      // Acquire Azure AD token\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n        account: loginResponse.account\n      });\n      console.log(\"Azure AD Token:\", tokenResponse.accessToken);\n\n      // Exchange Azure AD token for Xbox Live token\n      const xboxLiveToken = await getXboxLiveToken(tokenResponse.accessToken);\n      setXboxToken(xboxLiveToken);\n      console.log(\"Xbox Live Token:\", xboxLiveToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n  const getXboxLiveToken = async azureAdToken => {\n    const url = \"https://user.auth.xboxlive.com/user/authenticate\";\n    const body = {\n      Properties: {\n        AuthMethod: \"RPS\",\n        SiteName: \"user.auth.xboxlive.com\",\n        RpsTicket: `d=${azureAdToken}` // Add 'd=' prefix\n      },\n      RelyingParty: \"http://auth.xboxlive.com\",\n      TokenType: \"JWT\"\n    };\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (!response.ok) {\n        throw new Error(`Xbox Live authentication failed with status ${response.status}`);\n      }\n      const data = await response.json();\n      return data.Token; // This is the Xbox Live token\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error acquiring Xbox Live token:\", err);\n      return null;\n    }\n  };\n  const safeDecodeToken = token => {\n    try {\n      // Make the token URL safe by replacing URL-unsafe chars and padding\n      const base64 = token.split('.')[1].replace(/-/g, '+').replace(/_/g, '/').replace(/\\s/g, '');\n\n      // Add padding if needed\n      const pad = base64.length % 4;\n      const paddedBase64 = pad ? base64 + '='.repeat(4 - pad) : base64;\n      return JSON.parse(atob(paddedBase64));\n    } catch (err) {\n      console.error('Token decode error:', err);\n      return null;\n    }\n  };\n  const loginAndSendToken = async () => {\n    if (!xboxToken) {\n      setError(\"No Xbox Live token available. Please log in first.\");\n      return;\n    }\n    try {\n      // Format the Xbox token with safe decoding\n      let formattedToken = xboxToken;\n      if (xboxToken.includes('.')) {\n        const decodedToken = safeDecodeToken(xboxToken);\n        if (decodedToken && decodedToken.Token) {\n          formattedToken = decodedToken.Token;\n        }\n      }\n\n      // Send Xbox Live token to backend\n      const tokenResponse = await fetch(\"http://localhost:8080/api/auth/xbox-token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          xboxToken: formattedToken,\n          createAccount: false\n        })\n      });\n      if (!tokenResponse.ok) {\n        throw new Error(`Token server responded with ${tokenResponse.status}`);\n      }\n      const tokenData = await tokenResponse.text();\n      console.log(\"Token sent to server:\", tokenData);\n\n      // Initiate Xbox login with PlayFab\n      const xboxResponse = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          xboxToken: formattedToken,\n          createAccount: false\n        })\n      });\n      if (!xboxResponse.ok) {\n        throw new Error(`Xbox server responded with ${xboxResponse.status}`);\n      }\n      const xboxData = await xboxResponse.json();\n      console.log(\"Xbox server response:\", xboxData);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login and token submission:\", err);\n    }\n  };\n  if (isInitializing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Initializing authentication...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Xbox Token Retrieval\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      disabled: !msalInstance || isInitializing,\n      children: \"Login and Get Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loginAndSendToken,\n      disabled: !xboxToken,\n      children: \"Login Xbox Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), xboxToken && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Xbox Live Token retrieved: \", xboxToken]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginWithMicrosoft, \"UMjP4gGoS09eJcBmK4FFTtQBoBo=\");\n_c = LoginWithMicrosoft;\nexport default LoginWithMicrosoft;\nvar _c;\n$RefreshReg$(_c, \"LoginWithMicrosoft\");","map":{"version":3,"names":["React","useState","useEffect","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","cache","cacheLocation","storeAuthStateInCookie","LoginWithMicrosoft","_s","msalInstance","setMsalInstance","xboxToken","setXboxToken","error","setError","isInitializing","setIsInitializing","initializeMsal","instance","initialize","err","message","console","login","loginResponse","loginPopup","scopes","log","tokenResponse","acquireTokenSilent","account","accessToken","xboxLiveToken","getXboxLiveToken","azureAdToken","url","body","Properties","AuthMethod","SiteName","RpsTicket","RelyingParty","TokenType","response","fetch","method","headers","JSON","stringify","ok","Error","status","data","json","Token","safeDecodeToken","token","base64","split","replace","pad","length","paddedBase64","repeat","parse","atob","loginAndSendToken","formattedToken","includes","decodedToken","createAccount","tokenData","text","xboxResponse","xboxData","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","style","color","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { PublicClientApplication } from '@azure/msal-browser';\n\n// MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/consumers/\", // Ensure this is correct\n    redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    storeAuthStateInCookie: false,\n  },\n};\n\nconst LoginWithMicrosoft = () => {\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [xboxToken, setXboxToken] = useState(null);\n  const [error, setError] = useState(null);\n  const [isInitializing, setIsInitializing] = useState(true);\n\n  useEffect(() => {\n    const initializeMsal = async () => {\n      try {\n        const instance = new PublicClientApplication(msalConfig);\n        await instance.initialize();\n        setMsalInstance(instance);\n      } catch (err) {\n        setError(\"Failed to initialize MSAL: \" + err.message);\n        console.error(\"MSAL initialization error:\", err);\n      } finally {\n        setIsInitializing(false);\n      }\n    };\n\n    initializeMsal();\n  }, []);\n\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n\n    try {\n      // Trigger MSAL login with correct scopes\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n      });\n\n      console.log(\"Login response:\", loginResponse);\n\n      // Acquire Azure AD token\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n        account: loginResponse.account,\n      });\n\n      console.log(\"Azure AD Token:\", tokenResponse.accessToken);\n\n      // Exchange Azure AD token for Xbox Live token\n      const xboxLiveToken = await getXboxLiveToken(tokenResponse.accessToken);\n      setXboxToken(xboxLiveToken);\n      console.log(\"Xbox Live Token:\", xboxLiveToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n\n  const getXboxLiveToken = async (azureAdToken) => {\n    const url = \"https://user.auth.xboxlive.com/user/authenticate\";\n    const body = {\n      Properties: {\n        AuthMethod: \"RPS\",\n        SiteName: \"user.auth.xboxlive.com\",\n        RpsTicket: `d=${azureAdToken}`, // Add 'd=' prefix\n      },\n      RelyingParty: \"http://auth.xboxlive.com\",\n      TokenType: \"JWT\",\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Xbox Live authentication failed with status ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.Token; // This is the Xbox Live token\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error acquiring Xbox Live token:\", err);\n      return null;\n    }\n  };\n\n  const safeDecodeToken = (token) => {\n    try {\n      // Make the token URL safe by replacing URL-unsafe chars and padding\n      const base64 = token.split('.')[1]\n        .replace(/-/g, '+')\n        .replace(/_/g, '/')\n        .replace(/\\s/g, '');\n      \n      // Add padding if needed\n      const pad = base64.length % 4;\n      const paddedBase64 = pad ? base64 + '='.repeat(4 - pad) : base64;\n      \n      return JSON.parse(atob(paddedBase64));\n    } catch (err) {\n      console.error('Token decode error:', err);\n      return null;\n    }\n  };\n\n  const loginAndSendToken = async () => {\n    if (!xboxToken) {\n      setError(\"No Xbox Live token available. Please log in first.\");\n      return;\n    }\n    try {\n      // Format the Xbox token with safe decoding\n      let formattedToken = xboxToken;\n      if (xboxToken.includes('.')) {\n        const decodedToken = safeDecodeToken(xboxToken);\n        if (decodedToken && decodedToken.Token) {\n          formattedToken = decodedToken.Token;\n        }\n      }\n\n      // Send Xbox Live token to backend\n      const tokenResponse = await fetch(\"http://localhost:8080/api/auth/xbox-token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ xboxToken: formattedToken, createAccount: false }),\n      });\n\n      if (!tokenResponse.ok) {\n        throw new Error(`Token server responded with ${tokenResponse.status}`);\n      }\n\n      const tokenData = await tokenResponse.text();\n      console.log(\"Token sent to server:\", tokenData);\n\n      // Initiate Xbox login with PlayFab\n      const xboxResponse = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ xboxToken: formattedToken, createAccount: false }),\n      });\n\n      if (!xboxResponse.ok) {\n        throw new Error(`Xbox server responded with ${xboxResponse.status}`);\n      }\n\n      const xboxData = await xboxResponse.json();\n      console.log(\"Xbox server response:\", xboxData);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login and token submission:\", err);\n    }\n  };\n\n  if (isInitializing) {\n    return <div>Initializing authentication...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Test Xbox Token Retrieval</h1>\n      <button onClick={login} disabled={!msalInstance || isInitializing}>\n        Login and Get Token\n      </button>\n      <button onClick={loginAndSendToken} disabled={!xboxToken}>\n        Login Xbox Server\n      </button>\n      {xboxToken && <p>Xbox Live Token retrieved: {xboxToken}</p>}\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default LoginWithMicrosoft;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}