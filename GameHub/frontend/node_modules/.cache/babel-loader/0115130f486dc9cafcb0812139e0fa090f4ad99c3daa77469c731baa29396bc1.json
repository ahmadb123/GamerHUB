{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\n{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n HTTP\n Copy\n POST https://titleId.playfabapi.com/Server/LoginWithXbox\n Request Header\n Name\tRequired\tType\tDescription\n X-SecretKey\tTrue\t\n string\n This API requires a title secret key, available to title admins, from PlayFab Game Manager.\n Request Body\n Name\tRequired\tType\tDescription\n XboxToken\tTrue\t\n string\n Token provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\n */}\nimport React, { useState } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// MSAL Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    authority: \"https://login.microsoftonline.com/682302df-55ed-430a-bb15-cf8852a65331\",\n    redirectUri: \"http://localhost:3000\" // Update with your app's redirect URI\n  }\n};\nconst msalInstance = new PublicClientApplication(msalConfig);\nconst AuthenticationPage = () => {\n  _s();\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n  const handleLogin = async () => {\n    try {\n      // Login and get an access token\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"Xbox.Live.SignIn\"]\n      });\n\n      // Obtain the Xbox Live Token\n      const xboxToken = await getXboxLiveToken(loginResponse.accessToken);\n\n      // Send the Xbox token to PlayFab\n      const playFabResponse = await loginWithXbox(xboxToken);\n\n      // Send the PlayFab session token to your backend\n      await sendTokenToBackend(playFabResponse.SessionTicket);\n      setToken(playFabResponse.SessionTicket);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n  const getXboxLiveToken = async accessToken => {\n    // Replace this with actual Xbox Live SDK implementation\n    return \"mockXboxToken\"; // Replace with GetTokenAndSignatureAsync or equivalent\n  };\n  const loginWithXbox = async xboxToken => {\n    const response = await fetch(\"https://titleId.playfabapi.com/Server/LoginWithXbox\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-SecretKey\": \"JY9ZPRZAYYH98ZB6CG8Z1GCZNKGHP4DXW4ERAAXOARXXNIAS5S\"\n      },\n      body: JSON.stringify({\n        XboxToken: xboxToken\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to login with Xbox\");\n    }\n    return response.json();\n  };\n  const sendTokenToBackend = async sessionToken => {\n    const response = await fetch(\"/api/authenticate\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        sessionToken\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to send token to backend\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Authentication Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), token ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Authentication successful! Token: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Microsoft\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthenticationPage, \"nfS37zQFpPmfVO5pRBjF5Jb6zvc=\");\n_c = AuthenticationPage;\nexport default AuthenticationPage;\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["React","useState","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","msalInstance","AuthenticationPage","_s","token","setToken","error","setError","handleLogin","loginResponse","loginPopup","scopes","xboxToken","getXboxLiveToken","accessToken","playFabResponse","loginWithXbox","sendTokenToBackend","SessionTicket","err","message","response","fetch","method","headers","body","JSON","stringify","XboxToken","ok","Error","json","sessionToken","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["{/*\n    This page will be used to retrieve msla token from the user when they login their miscrosoft account\n    using azuro microsoft, playfab and react\n    currently the backend is making an api call that requests the token as a header.. however the token needs to be exchanged\n    from msla.. this page will be used to retrieve the token and send it to the backendSigns the user in using a Xbox Live Token from an external server backend, returning a session identifier that can subsequently be used for API calls which require an authenticated user\n\nHTTP\n\nCopy\nPOST https://titleId.playfabapi.com/Server/LoginWithXbox\nRequest Header\nName\tRequired\tType\tDescription\nX-SecretKey\tTrue\t\nstring\n\nThis API requires a title secret key, available to title admins, from PlayFab Game Manager.\n\nRequest Body\nName\tRequired\tType\tDescription\nXboxToken\tTrue\t\nstring\n\nToken provided by the Xbox Live SDK/XDK method GetTokenAndSignatureAsync(\"POST\", \"https://playfabapi.com/\", \"\").\n*/}\nimport React, { useState } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    authority: \"https://login.microsoftonline.com/682302df-55ed-430a-bb15-cf8852a65331\",\n    redirectUri: \"http://localhost:3000\", // Update with your app's redirect URI\n  },\n};\n\nconst msalInstance = new PublicClientApplication(msalConfig);\n\nconst AuthenticationPage = () => {\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handleLogin = async () => {\n    try {\n      // Login and get an access token\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"Xbox.Live.SignIn\"],\n      });\n\n      // Obtain the Xbox Live Token\n      const xboxToken = await getXboxLiveToken(loginResponse.accessToken);\n\n      // Send the Xbox token to PlayFab\n      const playFabResponse = await loginWithXbox(xboxToken);\n\n      // Send the PlayFab session token to your backend\n      await sendTokenToBackend(playFabResponse.SessionTicket);\n\n      setToken(playFabResponse.SessionTicket);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const getXboxLiveToken = async (accessToken) => {\n    // Replace this with actual Xbox Live SDK implementation\n    return \"mockXboxToken\"; // Replace with GetTokenAndSignatureAsync or equivalent\n  };\n\n  const loginWithXbox = async (xboxToken) => {\n    const response = await fetch(\n      \"https://titleId.playfabapi.com/Server/LoginWithXbox\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-SecretKey\": \"JY9ZPRZAYYH98ZB6CG8Z1GCZNKGHP4DXW4ERAAXOARXXNIAS5S\",\n        },\n        body: JSON.stringify({\n          XboxToken: xboxToken,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Failed to login with Xbox\");\n    }\n\n    return response.json();\n  };\n\n  const sendTokenToBackend = async (sessionToken) => {\n    const response = await fetch(\"/api/authenticate\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ sessionToken }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to send token to backend\");\n    }\n  };\n\n  return (\n    <div>\n      <h1>Authentication Page</h1>\n      {token ? (\n        <p>Authentication successful! Token: {token}</p>\n      ) : (\n        <button onClick={handleLogin}>Login with Microsoft</button>\n      )}\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default AuthenticationPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}