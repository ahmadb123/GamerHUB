{"ast":null,"code":"const apiUrl = \"http://localhost:8080\";\n\n// function to post news to the community insight\nexport const postNews = async (contentText, sharedNewsId, sharedClipsId = null) => {\n  const token = localStorage.getItem(\"jwtToken\"); // Get the JWT token from local storage\n\n  if (!token) {\n    console.error(\"User is not authenticated\");\n    return {\n      success: false,\n      message: \"User is not authenticated\"\n    };\n  }\n  const postData = {\n    contentText,\n    sharedNewsId,\n    sharedClipsId\n  };\n  try {\n    const response = await fetch(`${apiUrl}/api/community-insight/post-news`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': 'Bearer ' + token\n      },\n      body: JSON.stringify(postData)\n    });\n    if (response.ok) {\n      const data = await response.json();\n      return {\n        success: true,\n        data\n      }; // Return success and response data\n    } else {\n      const error = await response.text();\n      console.error(\"Failed to share post. Status:\", response.status, error);\n      return {\n        success: false,\n        message: error\n      };\n    }\n  } catch (error) {\n    console.error(\"Error sharing post:\", error);\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n};\n\n// function to get all news from the community insight\n\nexport const getAllNews = async () => {\n  try {\n    const response = await fetch(`${apiUrl}/api/community-insight/news/all`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      return data;\n    } else {\n      const error = await response.text();\n      console.error(\"Failed to fetch news. Status:\", response.status, error);\n      return {\n        success: false,\n        message: error\n      };\n    }\n  } catch (error) {\n    console.error(\"Error fetching news:\", error);\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["apiUrl","postNews","contentText","sharedNewsId","sharedClipsId","token","localStorage","getItem","console","error","success","message","postData","response","fetch","method","headers","body","JSON","stringify","ok","data","json","text","status","getAllNews"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/PostNewsService.js"],"sourcesContent":["const apiUrl = \"http://localhost:8080\";\n\n\n// function to post news to the community insight\nexport const postNews = async (contentText, sharedNewsId, sharedClipsId = null) => {\n  const token = localStorage.getItem(\"jwtToken\"); // Get the JWT token from local storage\n\n  if (!token) {\n    console.error(\"User is not authenticated\");\n    return { success: false, message: \"User is not authenticated\" };\n  }\n\n  const postData = {\n    contentText,\n    sharedNewsId,\n    sharedClipsId,\n  };\n\n  try {\n    const response = await fetch(`${apiUrl}/api/community-insight/post-news`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': 'Bearer ' + token,\n    },\n      body: JSON.stringify(postData),\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      return { success: true, data }; // Return success and response data\n    } else {\n      const error = await response.text();\n      console.error(\"Failed to share post. Status:\", response.status, error);\n      return { success: false, message: error };\n    }\n  } catch (error) {\n    console.error(\"Error sharing post:\", error);\n    return { success: false, message: error.message };\n  }\n};\n\n// function to get all news from the community insight\n\nexport const getAllNews = async () => {\n  try{\n    const response = await fetch(`${apiUrl}/api/community-insight/news/all`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if(response.ok){\n      const data = await response.json();\n      return data;\n    }else{\n      const error = await response.text();\n      console.error(\"Failed to fetch news. Status:\", response.status, error);\n      return { success: false, message: error };\n    }\n  }catch(error){\n    console.error(\"Error fetching news:\", error);\n    return { success: false, message: error.message };\n  }\n};\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,uBAAuB;;AAGtC;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,WAAW,EAAEC,YAAY,EAAEC,aAAa,GAAG,IAAI,KAAK;EACjF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;EAEhD,IAAI,CAACF,KAAK,EAAE;IACVG,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;IAC1C,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA4B,CAAC;EACjE;EAEA,MAAMC,QAAQ,GAAG;IACfV,WAAW;IACXC,YAAY;IACZC;EACF,CAAC;EAED,IAAI;IACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,MAAM,kCAAkC,EAAE;MACxEe,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,SAAS,GAAGX;MACjC,CAAC;MACCY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,OAAO;QAAEZ,OAAO,EAAE,IAAI;QAAEW;MAAK,CAAC,CAAC,CAAC;IAClC,CAAC,MAAM;MACL,MAAMZ,KAAK,GAAG,MAAMI,QAAQ,CAACU,IAAI,CAAC,CAAC;MACnCf,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEI,QAAQ,CAACW,MAAM,EAAEf,KAAK,CAAC;MACtE,OAAO;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEF;MAAM,CAAC;IAC3C;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAEF,KAAK,CAACE;IAAQ,CAAC;EACnD;AACF,CAAC;;AAED;;AAEA,OAAO,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,IAAG;IACD,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGd,MAAM,iCAAiC,EAAE;MACvEe,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,IAAGH,QAAQ,CAACO,EAAE,EAAC;MACb,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACb,CAAC,MAAI;MACH,MAAMZ,KAAK,GAAG,MAAMI,QAAQ,CAACU,IAAI,CAAC,CAAC;MACnCf,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEI,QAAQ,CAACW,MAAM,EAAEf,KAAK,CAAC;MACtE,OAAO;QAAEC,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAEF;MAAM,CAAC;IAC3C;EACF,CAAC,QAAMA,KAAK,EAAC;IACXD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAEF,KAAK,CAACE;IAAQ,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}