{"ast":null,"code":"import { toast } from \"react-toastify\";\nconst apiUrl = 'http://localhost:8080';\nexport const exchangeOAuthTokens = async (platform, code) => {\n  try {\n    const response = await fetch(`${apiUrl}/api/auth/callback/${platform}?code=${code}`, {\n      method: \"GET\",\n      credentials: \"include\"\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to retrieve tokens for ${platform}. Status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Store tokens based on platform\n    if (platform === \"xbox\") {\n      localStorage.setItem(\"uhs\", data.uhs);\n      localStorage.setItem(\"XSTS_token\", data.XSTS_token);\n    } else {\n      localStorage.setItem(`${platform}Token`, data.token); // Generic token storage\n    }\n    toast.success(`${platform.toUpperCase()} login successful!`);\n  } catch (error) {\n    toast.error(`Error during ${platform} login: ${error.message}`);\n    throw error;\n  }\n};","map":{"version":3,"names":["toast","apiUrl","exchangeOAuthTokens","platform","code","response","fetch","method","credentials","ok","Error","status","data","json","localStorage","setItem","uhs","XSTS_token","token","success","toUpperCase","error","message"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/authService.js"],"sourcesContent":["import { toast } from \"react-toastify\";\n\nconst apiUrl = 'http://localhost:8080';\n\nexport const exchangeOAuthTokens = async (platform, code) => {\n    try {\n        const response = await fetch(`${apiUrl}/api/auth/callback/${platform}?code=${code}`, {\n            method: \"GET\",\n            credentials: \"include\",\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to retrieve tokens for ${platform}. Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Store tokens based on platform\n        if (platform === \"xbox\") {\n            localStorage.setItem(\"uhs\", data.uhs);\n            localStorage.setItem(\"XSTS_token\", data.XSTS_token);\n        } else {\n            localStorage.setItem(`${platform}Token`, data.token); // Generic token storage\n        }\n\n        toast.success(`${platform.toUpperCase()} login successful!`);\n    } catch (error) {\n        toast.error(`Error during ${platform} login: ${error.message}`);\n        throw error;\n    }\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,MAAM,GAAG,uBAAuB;AAEtC,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,KAAK;EACzD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,MAAM,sBAAsBE,QAAQ,SAASC,IAAI,EAAE,EAAE;MACjFG,MAAM,EAAE,KAAK;MACbC,WAAW,EAAE;IACjB,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,iCAAiCP,QAAQ,aAAaE,QAAQ,CAACM,MAAM,EAAE,CAAC;IAC5F;IAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;IAElC;IACA,IAAIV,QAAQ,KAAK,MAAM,EAAE;MACrBW,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC;MACrCF,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEH,IAAI,CAACK,UAAU,CAAC;IACvD,CAAC,MAAM;MACHH,YAAY,CAACC,OAAO,CAAC,GAAGZ,QAAQ,OAAO,EAAES,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC;IAC1D;IAEAlB,KAAK,CAACmB,OAAO,CAAC,GAAGhB,QAAQ,CAACiB,WAAW,CAAC,CAAC,oBAAoB,CAAC;EAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZrB,KAAK,CAACqB,KAAK,CAAC,gBAAgBlB,QAAQ,WAAWkB,KAAK,CAACC,OAAO,EAAE,CAAC;IAC/D,MAAMD,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}