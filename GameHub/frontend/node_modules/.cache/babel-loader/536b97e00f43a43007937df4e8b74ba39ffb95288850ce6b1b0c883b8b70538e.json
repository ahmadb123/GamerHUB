{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { getGameClips } from \"../service/XboxGameClips\";\n\n// function ClipsPage() {\n//     const [gameClips, setGameClips] = useState([]);\n//     const [isFetchingClips, setIsFetchingClips] = useState(true);\n//     const [error, setError] = useState(null);\n//     const [filter, setFilter] = useState(\"\"); // Filter by game title\n//     const [currentPage, setCurrentPage] = useState(1); // Pagination\n//     const clipsPerPage = 10;\n\n//     const fetchGameClips = async () => {\n//         try {\n//             const clips = await getGameClips();\n//             setGameClips(clips);\n//         } catch (err) {\n//             console.error(\"Error fetching game clips:\", err);\n//             setError(\"Failed to load game clips. Please try again.\");\n//         } finally {\n//             setIsFetchingClips(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         fetchGameClips();\n//     }, []);\n\n//     const filteredClips = filter\n//         ? gameClips.filter((clip) =>\n//               clip.titleName?.toLowerCase().includes(filter.toLowerCase())\n//           )\n//         : gameClips;\n\n//     const totalPages = Math.ceil(filteredClips.length / clipsPerPage);\n//     const paginatedClips = filteredClips.slice(\n//         (currentPage - 1) * clipsPerPage,\n//         currentPage * clipsPerPage\n//     );\n\n//     const handlePageChange = (pageNumber) => {\n//         setCurrentPage(pageNumber);\n//     };\n\n//     return (\n//         <div className=\"clips-container\">\n//             <h2>Xbox Game Clips</h2>\n//             <div className=\"filter-bar\">\n//                 <label htmlFor=\"filter\">Filter by Game:</label>\n//                 <input\n//                     id=\"filter\"\n//                     type=\"text\"\n//                     value={filter}\n//                     onChange={(e) => setFilter(e.target.value)}\n//                     placeholder=\"Enter game title\"\n//                 />\n//             </div>\n//             {isFetchingClips ? (\n//                 <p>Loading game clips...</p>\n//             ) : error ? (\n//                 <p>{error}</p>\n//             ) : filteredClips.length === 0 ? (\n//                 <p>No game clips found.</p>\n//             ) : (\n//                 <>\n//                     <div className=\"clips-grid\">\n//                         {paginatedClips.map((clip) => (\n//                             <div key={clip.gameClipId} className=\"clip-card\">\n//                                 <h1>{clip.titleName || \"Untitled Clip\"}</h1>\n//                                 <p>\n//                                     Recorded on:{\" \"}\n//                                     {new Date(\n//                                         clip.dateRecorded\n//                                     ).toLocaleDateString()}\n//                                 </p>\n//                                 {clip.thumbnails?.map((thumbnail, index) => (\n//                                     <img\n//                                         src={thumbnail.uri}\n//                                         alt=\"Game clip thumbnail\"\n//                                         key={index}\n//                                         className=\"clip-thumbnail\"\n//                                     />\n//                                 ))}\n//                                 {clip.gameClipUris?.map((uri, index) => (\n//                                     <video\n//                                         src={uri.uri}\n//                                         controls\n//                                         key={index}\n//                                         className=\"clip-video\"\n//                                     >\n//                                         Your browser does not support the video\n//                                         tag.\n//                                     </video>\n//                                 ))}\n//                             </div>\n//                         ))}\n//                     </div>\n//                     <div className=\"pagination\">\n//                         {Array.from({ length: totalPages }, (_, index) => (\n//                             <button\n//                                 key={index}\n//                                 className={`pagination-button ${\n//                                     currentPage === index + 1 ? \"active\" : \"\"\n//                                 }`}\n//                                 onClick={() => handlePageChange(index + 1)}\n//                             >\n//                                 {index + 1}\n//                             </button>\n//                         ))}\n//                     </div>\n//                 </>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default ClipsPage;","map":{"version":3,"names":[],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/ClipsPage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { getGameClips } from \"../service/XboxGameClips\";\n\n// function ClipsPage() {\n//     const [gameClips, setGameClips] = useState([]);\n//     const [isFetchingClips, setIsFetchingClips] = useState(true);\n//     const [error, setError] = useState(null);\n//     const [filter, setFilter] = useState(\"\"); // Filter by game title\n//     const [currentPage, setCurrentPage] = useState(1); // Pagination\n//     const clipsPerPage = 10;\n\n//     const fetchGameClips = async () => {\n//         try {\n//             const clips = await getGameClips();\n//             setGameClips(clips);\n//         } catch (err) {\n//             console.error(\"Error fetching game clips:\", err);\n//             setError(\"Failed to load game clips. Please try again.\");\n//         } finally {\n//             setIsFetchingClips(false);\n//         }\n//     };\n\n//     useEffect(() => {\n//         fetchGameClips();\n//     }, []);\n\n//     const filteredClips = filter\n//         ? gameClips.filter((clip) =>\n//               clip.titleName?.toLowerCase().includes(filter.toLowerCase())\n//           )\n//         : gameClips;\n\n//     const totalPages = Math.ceil(filteredClips.length / clipsPerPage);\n//     const paginatedClips = filteredClips.slice(\n//         (currentPage - 1) * clipsPerPage,\n//         currentPage * clipsPerPage\n//     );\n\n//     const handlePageChange = (pageNumber) => {\n//         setCurrentPage(pageNumber);\n//     };\n\n//     return (\n//         <div className=\"clips-container\">\n//             <h2>Xbox Game Clips</h2>\n//             <div className=\"filter-bar\">\n//                 <label htmlFor=\"filter\">Filter by Game:</label>\n//                 <input\n//                     id=\"filter\"\n//                     type=\"text\"\n//                     value={filter}\n//                     onChange={(e) => setFilter(e.target.value)}\n//                     placeholder=\"Enter game title\"\n//                 />\n//             </div>\n//             {isFetchingClips ? (\n//                 <p>Loading game clips...</p>\n//             ) : error ? (\n//                 <p>{error}</p>\n//             ) : filteredClips.length === 0 ? (\n//                 <p>No game clips found.</p>\n//             ) : (\n//                 <>\n//                     <div className=\"clips-grid\">\n//                         {paginatedClips.map((clip) => (\n//                             <div key={clip.gameClipId} className=\"clip-card\">\n//                                 <h1>{clip.titleName || \"Untitled Clip\"}</h1>\n//                                 <p>\n//                                     Recorded on:{\" \"}\n//                                     {new Date(\n//                                         clip.dateRecorded\n//                                     ).toLocaleDateString()}\n//                                 </p>\n//                                 {clip.thumbnails?.map((thumbnail, index) => (\n//                                     <img\n//                                         src={thumbnail.uri}\n//                                         alt=\"Game clip thumbnail\"\n//                                         key={index}\n//                                         className=\"clip-thumbnail\"\n//                                     />\n//                                 ))}\n//                                 {clip.gameClipUris?.map((uri, index) => (\n//                                     <video\n//                                         src={uri.uri}\n//                                         controls\n//                                         key={index}\n//                                         className=\"clip-video\"\n//                                     >\n//                                         Your browser does not support the video\n//                                         tag.\n//                                     </video>\n//                                 ))}\n//                             </div>\n//                         ))}\n//                     </div>\n//                     <div className=\"pagination\">\n//                         {Array.from({ length: totalPages }, (_, index) => (\n//                             <button\n//                                 key={index}\n//                                 className={`pagination-button ${\n//                                     currentPage === index + 1 ? \"active\" : \"\"\n//                                 }`}\n//                                 onClick={() => handlePageChange(index + 1)}\n//                             >\n//                                 {index + 1}\n//                             </button>\n//                         ))}\n//                     </div>\n//                 </>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default ClipsPage;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}