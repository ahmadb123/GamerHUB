{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\";\n// import React, { useState, useEffect } from \"react\";\n// import { PublicClientApplication } from \"@azure/msal-browser\";\n\n// // MSAL Configuration\n// const msalConfig = {\n//   auth: {\n//     clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n//     authority: \"https://login.microsoftonline.com/consumers/\", // Common authority for all Microsoft accounts\n//     redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n//   },\n// };\n\n// const LoginWithMicrosoft = () => {\n//   const [msalInstance, setMsalInstance] = useState(null);\n//   const [token, setToken] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const initializeMsal = async () => {\n//       const instance = new PublicClientApplication(msalConfig);\n//       await instance.initialize(); // Initialize MSAL\n//       setMsalInstance(instance);\n//     };\n\n//     initializeMsal();\n//   }, []);\n\n//   const login = async () => {\n//     if (!msalInstance) {\n//       setError(\"MSAL instance not initialized yet.\");\n//       return;\n//     }\n\n//     try {\n//       // MSAL login to retrieve token\n//       const loginResponse = await msalInstance.loginPopup({\n//         scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n//       });\n\n//       const tokenResponse = await msalInstance.acquireTokenSilent({\n//         scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n//         account: loginResponse.account,\n//       });\n\n//       console.log(\"Token response:\", tokenResponse);\n//       setToken(tokenResponse.accessToken);\n\n//       // Automatically send the token to the server\n//       await sendTokenToServer(tokenResponse.accessToken);\n//     } catch (err) {\n//       setError(err.message);\n//       console.error(\"Error during login:\", err);\n//     }\n//   };\n\n//   // Modify sendTokenToServer to accept a token parameter\n//   const sendTokenToServer = async (tokenToSend) => {\n//     if (!tokenToSend) {\n//       setError(\"No token to send to server.\");\n//       return;\n//     }\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/auth/xbox-token\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ xboxToken: tokenToSend }),\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.text();\n//         throw new Error(`Backend server error: ${errorData}`);\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Server response:\", data);\n//     } catch (error) {\n//       setError(error.message);\n//       console.error(\"Error sending token to server:\", error);\n//     }\n//   };\n\n//   const loginxbox = async () => {  \n//     try{\n//       const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n//         method: \"POST\", // Ensure the method is POST\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ \n//           xboxToken: token,\n//           createAccount: true // Include the required field\n//         }),\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.text();\n//         throw new Error(`Backend server error: ${errorData}`);\n//       }\n//       const data = await response.json();\n//       console.log(\"Server response:\", data);\n//     }\n//     catch (error) {\n//       setError(error.message);\n//       console.error(\"Error sending token to server:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Test Xbox Token Retrieval</h1>\n//       <button onClick={login}>Login and Get Token</button>\n//       <button onClick={loginxbox}>Login with Xbox</button>\n//       {token && <p>Token retrieved: {token}</p>}\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n//     </div>\n//   );\n// };\n\n// export default LoginWithMicrosoft;\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  const fabPlayAuthUrl = `https://28282.playfabapi.com/oauth2/authorize?response_type=code&client_id=0a23b968-9e79-4cba-b337-862adab7a8e2&redirect_uri=http://localhost:3000/callback&scope=XboxLive.signin`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"20%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to GamerHub\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Login using your Xbox gamertag to get started!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: fabPlayAuthUrl,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\"\n        },\n        children: \"Login with Xbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n};\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Login","fabPlayAuthUrl","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","href","padding","fontSize","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { PublicClientApplication } from \"@azure/msal-browser\";\n\n// // MSAL Configuration\n// const msalConfig = {\n//   auth: {\n//     clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n//     authority: \"https://login.microsoftonline.com/consumers/\", // Common authority for all Microsoft accounts\n//     redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n//   },\n// };\n\n// const LoginWithMicrosoft = () => {\n//   const [msalInstance, setMsalInstance] = useState(null);\n//   const [token, setToken] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const initializeMsal = async () => {\n//       const instance = new PublicClientApplication(msalConfig);\n//       await instance.initialize(); // Initialize MSAL\n//       setMsalInstance(instance);\n//     };\n\n//     initializeMsal();\n//   }, []);\n\n//   const login = async () => {\n//     if (!msalInstance) {\n//       setError(\"MSAL instance not initialized yet.\");\n//       return;\n//     }\n\n//     try {\n//       // MSAL login to retrieve token\n//       const loginResponse = await msalInstance.loginPopup({\n//         scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n//       });\n\n//       const tokenResponse = await msalInstance.acquireTokenSilent({\n//         scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n//         account: loginResponse.account,\n//       });\n\n//       console.log(\"Token response:\", tokenResponse);\n//       setToken(tokenResponse.accessToken);\n\n//       // Automatically send the token to the server\n//       await sendTokenToServer(tokenResponse.accessToken);\n//     } catch (err) {\n//       setError(err.message);\n//       console.error(\"Error during login:\", err);\n//     }\n//   };\n\n//   // Modify sendTokenToServer to accept a token parameter\n//   const sendTokenToServer = async (tokenToSend) => {\n//     if (!tokenToSend) {\n//       setError(\"No token to send to server.\");\n//       return;\n//     }\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/auth/xbox-token\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ xboxToken: tokenToSend }),\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.text();\n//         throw new Error(`Backend server error: ${errorData}`);\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Server response:\", data);\n//     } catch (error) {\n//       setError(error.message);\n//       console.error(\"Error sending token to server:\", error);\n//     }\n//   };\n\n//   const loginxbox = async () => {  \n//     try{\n//       const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n//         method: \"POST\", // Ensure the method is POST\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ \n//           xboxToken: token,\n//           createAccount: true // Include the required field\n//         }),\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.text();\n//         throw new Error(`Backend server error: ${errorData}`);\n//       }\n//       const data = await response.json();\n//       console.log(\"Server response:\", data);\n//     }\n//     catch (error) {\n//       setError(error.message);\n//       console.error(\"Error sending token to server:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Test Xbox Token Retrieval</h1>\n//       <button onClick={login}>Login and Get Token</button>\n//       <button onClick={loginxbox}>Login with Xbox</button>\n//       {token && <p>Token retrieved: {token}</p>}\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n//     </div>\n//   );\n// };\n\n// export default LoginWithMicrosoft;\n\n\nimport React from \"react\";\n\nconst Login = () => {\n    const fabPlayAuthUrl = `https://28282.playfabapi.com/oauth2/authorize?response_type=code&client_id=0a23b968-9e79-4cba-b337-862adab7a8e2&redirect_uri=http://localhost:3000/callback&scope=XboxLive.signin`;\n\n    return (\n        <div style={{ textAlign: \"center\", marginTop: \"20%\" }}>\n            <h1>Welcome to GamerHub</h1>\n            <p>Login using your Xbox gamertag to get started!</p>\n            <a href={fabPlayAuthUrl}>\n                <button style={{ padding: \"10px 20px\", fontSize: \"16px\" }}>\n                    Login with Xbox\n                </button>\n            </a>\n        </div>\n    );\n};\n\nexport default Login;\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAChB,MAAMC,cAAc,GAAG,mLAAmL;EAE1M,oBACIF,OAAA;IAAKG,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAM,CAAE;IAAAC,QAAA,gBAClDN,OAAA;MAAAM,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BV,OAAA;MAAAM,QAAA,EAAG;IAA8C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACrDV,OAAA;MAAGW,IAAI,EAAET,cAAe;MAAAI,QAAA,eACpBN,OAAA;QAAQG,KAAK,EAAE;UAAES,OAAO,EAAE,WAAW;UAAEC,QAAQ,EAAE;QAAO,CAAE;QAAAP,QAAA,EAAC;MAE3D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEd,CAAC;AAACI,EAAA,GAdIb,KAAK;AAgBX,eAAeA,KAAK;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}