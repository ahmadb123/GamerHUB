{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/LoginWithMicrosoft.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = 'http://localhost:8080';\nfunction MicrosoftLogin() {\n  _s();\n  useEffect(() => {\n    // Handle callback and exchange code for tokens\n    const exchangeCodeForTokens = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get(\"code\");\n      if (code) {\n        try {\n          const response = await fetch(`${apiUrl}/api/auth/callback?code=${code}`, {\n            method: \"GET\",\n            credentials: \"include\"\n          });\n          if (!response.ok) {\n            throw new Error(`Failed to retrieve tokens. Status: ${response.status}`);\n          }\n          const data = await response.json();\n          localStorage.setItem(\"uhs\", data.uhs);\n          localStorage.setItem(\"XSTS_token\", data.XSTS_token);\n          toast.success(\"Logged in successfully!\");\n          window.location.href = \"/main\"; // Redirect to the main page\n        } catch (error) {\n          toast.error(`Error during login: ${error.message}`);\n        }\n      }\n    };\n    exchangeCodeForTokens();\n  }, []);\n  const login = async () => {\n    try {\n      const response = await fetch(`${apiUrl}/api/auth/login`, {\n        method: \"GET\",\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.redirectUrl) {\n        window.location.href = data.redirectUrl; // Redirect to Xbox login\n      } else {\n        toast.error(\"Redirect URL not found\");\n      }\n    } catch (error) {\n      toast.error(`Login failed: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"microsoft-login\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login with Microsoft\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(MicrosoftLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MicrosoftLogin;\nexport default MicrosoftLogin;\nvar _c;\n$RefreshReg$(_c, \"MicrosoftLogin\");","map":{"version":3,"names":["React","useEffect","toast","jsxDEV","_jsxDEV","apiUrl","MicrosoftLogin","_s","exchangeCodeForTokens","urlParams","URLSearchParams","window","location","search","code","get","response","fetch","method","credentials","ok","Error","status","data","json","localStorage","setItem","uhs","XSTS_token","success","href","error","message","login","redirectUrl","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/LoginWithMicrosoft.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\n\nconst apiUrl = 'http://localhost:8080';\n\nfunction MicrosoftLogin() {\n    useEffect(() => {\n        // Handle callback and exchange code for tokens\n        const exchangeCodeForTokens = async () => {\n            const urlParams = new URLSearchParams(window.location.search);\n            const code = urlParams.get(\"code\");\n\n            if (code) {\n                try {\n                    const response = await fetch(`${apiUrl}/api/auth/callback?code=${code}`, {\n                        method: \"GET\",\n                        credentials: \"include\",\n                    });\n\n                    if (!response.ok) {\n                        throw new Error(`Failed to retrieve tokens. Status: ${response.status}`);\n                    }\n\n                    const data = await response.json();\n                    localStorage.setItem(\"uhs\", data.uhs);\n                    localStorage.setItem(\"XSTS_token\", data.XSTS_token);\n\n                    toast.success(\"Logged in successfully!\");\n                    window.location.href = \"/main\"; // Redirect to the main page\n                } catch (error) {\n                    toast.error(`Error during login: ${error.message}`);\n                }\n            }\n        };\n\n        exchangeCodeForTokens();\n    }, []);\n\n    const login = async () => {\n        try {\n            const response = await fetch(`${apiUrl}/api/auth/login`, {\n                method: \"GET\",\n                credentials: \"include\",\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            if (data.redirectUrl) {\n                window.location.href = data.redirectUrl; // Redirect to Xbox login\n            } else {\n                toast.error(\"Redirect URL not found\");\n            }\n        } catch (error) {\n            toast.error(`Login failed: ${error.message}`);\n        }\n    };\n\n    return (\n        <div className=\"microsoft-login\">\n            <h1>Login with Microsoft</h1>\n            <button onClick={login} >\n                Login\n            </button>\n        </div>\n    );\n}\n\n\nexport default MicrosoftLogin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}