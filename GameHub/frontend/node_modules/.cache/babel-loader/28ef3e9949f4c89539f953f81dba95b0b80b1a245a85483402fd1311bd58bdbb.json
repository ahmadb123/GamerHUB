{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/LandingPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from \"react\";\n// import { useNavigate } from 'react-router-dom';\n// import { toast } from \"react-toastify\";\n\n// const apiUrl = 'http://localhost:8080';\n\n// function LandingPage() {\n//     const navigate = useNavigate();\n\n//     const validateLocalSession = () => {\n//         const platform = localStorage.getItem(\"platform\");\n\n//         console.log(\"Validating session for platform:\", platform);\n\n//         if (platform) {\n//             // Check for platform-specific tokens\n//             if (platform === \"xbox\") {\n//                 const uhs = localStorage.getItem(\"uhs\");\n//                 const XSTS_token = localStorage.getItem(\"XSTS_token\");\n//                 console.log(\"Xbox tokens - UHS:\", uhs, \"XSTS_token:\", XSTS_token);\n//                 if (uhs && XSTS_token) {\n//                     return true; // Xbox tokens are valid\n//                 }\n//             } else {\n//                 const token = localStorage.getItem(`${platform}Token`);\n//                 console.log(`${platform} token:`, token);\n//                 if (token) {\n//                     return true; // Generic token for PSN/Steam is valid\n//                 }\n//             }\n//         }\n\n//         // If tokens are missing or invalid\n//         console.log(\"Invalid or missing tokens. Clearing platform.\");\n//         localStorage.removeItem(\"platform\");\n//         return false;\n//     };\n\n//     useEffect(() => {\n//         if (validateLocalSession()) {\n//             navigate(\"/main\"); // Navigate to the main page if session is valid\n//         }\n//     }, [navigate]);\n\n//     const handleLogin = async (platform) => {\n//         try {\n//             const response = await fetch(`${apiUrl}/api/auth/login/${platform}`, {\n//                 method: \"GET\",\n//                 credentials: \"include\",\n//             });\n\n//             if (!response.ok) {\n//                 throw new Error(`Failed to initiate login for ${platform}. Status: ${response.status}`);\n//             }\n\n//             const data = await response.json();\n//             if (data.redirectUrl) {\n//                 localStorage.setItem(\"platform\", platform);\n//                 window.location.href = data.redirectUrl; // Redirect to platform login page\n//             } else {\n//                 toast.error(\"Redirect URL not found.\");\n//             }\n//         } catch (error) {\n//             toast.error(`Login failed: ${error.message}`);\n//         }\n//     };\n\n//     return (\n//         <div className=\"landing-page\" style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n//             <h1>Welcome to GamerHub</h1>\n//             <p>Select a platform to log in:</p>\n//             <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"20px\", marginTop: \"20px\" }}>\n//                 <button onClick={() => handleLogin(\"xbox\")} style={buttonStyle(\"green\")}>\n//                     Xbox Login\n//                 </button>\n//                 <button onClick={() => handleLogin(\"psn\")} style={buttonStyle(\"blue\")}>\n//                     PSN Login\n//                 </button>\n//                 <button onClick={() => handleLogin(\"steam\")} style={buttonStyle(\"gray\")}>\n//                     Steam Login\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// const buttonStyle = (color) => ({\n//     padding: \"10px 20px\",\n//     fontSize: \"16px\",\n//     cursor: \"pointer\",\n//     backgroundColor: color,\n//     color: \"#ffffff\",\n//     border: \"none\",\n//     borderRadius: \"5px\",\n// });\n\n// export default LandingPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = \"http://localhost:8080\";\nfunction LandingPage() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [profile, setProfile] = useState(null);\n  const [platform, setPlatform] = useState(localStorage.getItem(\"platform\") || null);\n\n  // Check authentication state on component load\n  useEffect(() => {\n    if (platform) {\n      const tokens = getTokens(platform);\n      if (tokens) {\n        fetchProfile(platform, tokens); // Fetch profile if tokens exist\n      }\n    }\n  }, [platform]);\n\n  // Get tokens based on platform\n  const getTokens = platform => {\n    if (platform === \"xbox\") {\n      const uhs = localStorage.getItem(\"uhs\");\n      const XSTS_token = localStorage.getItem(\"XSTS_token\");\n      if (uhs && XSTS_token) return {\n        uhs,\n        XSTS_token\n      };\n    } else {\n      const token = localStorage.getItem(`${platform}Token`);\n      if (token) return {\n        token\n      };\n    }\n    return null;\n  };\n\n  // Fetch profile data\n  const fetchProfile = async (platform, tokens) => {\n    try {\n      let response;\n      if (platform === \"xbox\") {\n        response = await fetch(`${apiUrl}/api/xbox/profile`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `XBL3.0 x=${tokens.uhs};${tokens.XSTS_token}`\n          },\n          credentials: \"include\"\n        });\n      } else if (platform === \"psn\") {\n        response = await fetch(`${apiUrl}/api/psn/profile`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${tokens.token}`\n          },\n          credentials: \"include\"\n        });\n      } else if (platform === \"steam\") {\n        response = await fetch(`${apiUrl}/api/steam/profile`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${tokens.token}`\n          },\n          credentials: \"include\"\n        });\n      }\n      if (!response.ok) {\n        throw new Error(`Failed to fetch profile data for ${platform}`);\n      }\n      const data = await response.json();\n      setProfile(data); // Save profile data in state\n      setIsAuthenticated(true); // Mark as authenticated\n    } catch (error) {\n      console.error(error);\n      toast.error(`Error fetching profile for ${platform}. Please log in again.`);\n      localStorage.clear(); // Clear invalid tokens\n      setIsAuthenticated(false); // Reset authentication state\n    }\n  };\n\n  // Handle platform login\n  const handleLogin = async platform => {\n    try {\n      const response = await fetch(`${apiUrl}/api/auth/login/${platform}`, {\n        method: \"GET\",\n        credentials: \"include\"\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to initiate login for ${platform}. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.redirectUrl) {\n        localStorage.setItem(\"platform\", platform); // Save platform\n        setPlatform(platform); // Update platform state\n        window.location.href = data.redirectUrl; // Redirect to login\n      } else {\n        toast.error(\"Redirect URL not found.\");\n      }\n    } catch (error) {\n      toast.error(`Login failed for ${platform}: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing-page\",\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: isAuthenticated ?\n    /*#__PURE__*/\n    // Render home page content if authenticated\n    _jsxDEV(\"div\", {\n      className: \"home-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome, \", (profile === null || profile === void 0 ? void 0 : profile.gamertag) || (profile === null || profile === void 0 ? void 0 : profile.username) || \"Gamer\", \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Platform: \", platform === null || platform === void 0 ? void 0 : platform.toUpperCase()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this), (profile === null || profile === void 0 ? void 0 : profile.appDisplayPicRaw) && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: profile.appDisplayPicRaw,\n        alt: \"Profile Pic\",\n        style: {\n          borderRadius: \"50%\",\n          width: \"100px\",\n          height: \"100px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Display Name: \", (profile === null || profile === void 0 ? void 0 : profile.gameDisplayName) || (profile === null || profile === void 0 ? void 0 : profile.displayName)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // Render login options if not authenticated\n    _jsxDEV(\"div\", {\n      className: \"login-options\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to GamerHub\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a platform to log in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          gap: \"20px\",\n          marginTop: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleLogin(\"xbox\"),\n          style: buttonStyle(\"green\"),\n          children: \"Xbox Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleLogin(\"psn\"),\n          style: buttonStyle(\"blue\"),\n          children: \"PSN Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleLogin(\"steam\"),\n          style: buttonStyle(\"gray\"),\n          children: \"Steam Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n_s(LandingPage, \"jklLe+0LgsLogzSXL4MpJAtGB3s=\");\n_c = LandingPage;\nconst buttonStyle = color => ({\n  padding: \"10px 20px\",\n  fontSize: \"16px\",\n  cursor: \"pointer\",\n  backgroundColor: color,\n  color: \"#ffffff\",\n  border: \"none\",\n  borderRadius: \"5px\"\n});\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","useState","useEffect","toast","jsxDEV","_jsxDEV","apiUrl","LandingPage","_s","isAuthenticated","setIsAuthenticated","profile","setProfile","platform","setPlatform","localStorage","getItem","tokens","getTokens","fetchProfile","uhs","XSTS_token","token","response","fetch","method","headers","Authorization","credentials","ok","Error","data","json","error","console","clear","handleLogin","status","redirectUrl","setItem","window","location","href","message","className","style","textAlign","marginTop","children","gamertag","username","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","appDisplayPicRaw","src","alt","borderRadius","width","height","gameDisplayName","displayName","display","justifyContent","gap","onClick","buttonStyle","_c","color","padding","fontSize","cursor","backgroundColor","border","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/LandingPage.js"],"sourcesContent":["// import React, { useEffect } from \"react\";\n// import { useNavigate } from 'react-router-dom';\n// import { toast } from \"react-toastify\";\n\n// const apiUrl = 'http://localhost:8080';\n\n// function LandingPage() {\n//     const navigate = useNavigate();\n\n//     const validateLocalSession = () => {\n//         const platform = localStorage.getItem(\"platform\");\n\n//         console.log(\"Validating session for platform:\", platform);\n\n//         if (platform) {\n//             // Check for platform-specific tokens\n//             if (platform === \"xbox\") {\n//                 const uhs = localStorage.getItem(\"uhs\");\n//                 const XSTS_token = localStorage.getItem(\"XSTS_token\");\n//                 console.log(\"Xbox tokens - UHS:\", uhs, \"XSTS_token:\", XSTS_token);\n//                 if (uhs && XSTS_token) {\n//                     return true; // Xbox tokens are valid\n//                 }\n//             } else {\n//                 const token = localStorage.getItem(`${platform}Token`);\n//                 console.log(`${platform} token:`, token);\n//                 if (token) {\n//                     return true; // Generic token for PSN/Steam is valid\n//                 }\n//             }\n//         }\n\n//         // If tokens are missing or invalid\n//         console.log(\"Invalid or missing tokens. Clearing platform.\");\n//         localStorage.removeItem(\"platform\");\n//         return false;\n//     };\n\n//     useEffect(() => {\n//         if (validateLocalSession()) {\n//             navigate(\"/main\"); // Navigate to the main page if session is valid\n//         }\n//     }, [navigate]);\n\n//     const handleLogin = async (platform) => {\n//         try {\n//             const response = await fetch(`${apiUrl}/api/auth/login/${platform}`, {\n//                 method: \"GET\",\n//                 credentials: \"include\",\n//             });\n\n//             if (!response.ok) {\n//                 throw new Error(`Failed to initiate login for ${platform}. Status: ${response.status}`);\n//             }\n\n//             const data = await response.json();\n//             if (data.redirectUrl) {\n//                 localStorage.setItem(\"platform\", platform);\n//                 window.location.href = data.redirectUrl; // Redirect to platform login page\n//             } else {\n//                 toast.error(\"Redirect URL not found.\");\n//             }\n//         } catch (error) {\n//             toast.error(`Login failed: ${error.message}`);\n//         }\n//     };\n\n//     return (\n//         <div className=\"landing-page\" style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n//             <h1>Welcome to GamerHub</h1>\n//             <p>Select a platform to log in:</p>\n//             <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"20px\", marginTop: \"20px\" }}>\n//                 <button onClick={() => handleLogin(\"xbox\")} style={buttonStyle(\"green\")}>\n//                     Xbox Login\n//                 </button>\n//                 <button onClick={() => handleLogin(\"psn\")} style={buttonStyle(\"blue\")}>\n//                     PSN Login\n//                 </button>\n//                 <button onClick={() => handleLogin(\"steam\")} style={buttonStyle(\"gray\")}>\n//                     Steam Login\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// }\n\n// const buttonStyle = (color) => ({\n//     padding: \"10px 20px\",\n//     fontSize: \"16px\",\n//     cursor: \"pointer\",\n//     backgroundColor: color,\n//     color: \"#ffffff\",\n//     border: \"none\",\n//     borderRadius: \"5px\",\n// });\n\n// export default LandingPage;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\n\nconst apiUrl = \"http://localhost:8080\";\n\nfunction LandingPage() {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [profile, setProfile] = useState(null);\n    const [platform, setPlatform] = useState(localStorage.getItem(\"platform\") || null);\n\n    // Check authentication state on component load\n    useEffect(() => {\n        if (platform) {\n            const tokens = getTokens(platform);\n            if (tokens) {\n                fetchProfile(platform, tokens); // Fetch profile if tokens exist\n            }\n        }\n    }, [platform]);\n\n    // Get tokens based on platform\n    const getTokens = (platform) => {\n        if (platform === \"xbox\") {\n            const uhs = localStorage.getItem(\"uhs\");\n            const XSTS_token = localStorage.getItem(\"XSTS_token\");\n            if (uhs && XSTS_token) return { uhs, XSTS_token };\n        } else {\n            const token = localStorage.getItem(`${platform}Token`);\n            if (token) return { token };\n        }\n        return null;\n    };\n\n    // Fetch profile data\n    const fetchProfile = async (platform, tokens) => {\n        try {\n            let response;\n\n            if (platform === \"xbox\") {\n                response = await fetch(`${apiUrl}/api/xbox/profile`, {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: `XBL3.0 x=${tokens.uhs};${tokens.XSTS_token}`,\n                    },\n                    credentials: \"include\",\n                });\n            } else if (platform === \"psn\") {\n                response = await fetch(`${apiUrl}/api/psn/profile`, {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: `Bearer ${tokens.token}`,\n                    },\n                    credentials: \"include\",\n                });\n            } else if (platform === \"steam\") {\n                response = await fetch(`${apiUrl}/api/steam/profile`, {\n                    method: \"GET\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: `Bearer ${tokens.token}`,\n                    },\n                    credentials: \"include\",\n                });\n            }\n\n            if (!response.ok) {\n                throw new Error(`Failed to fetch profile data for ${platform}`);\n            }\n\n            const data = await response.json();\n            setProfile(data); // Save profile data in state\n            setIsAuthenticated(true); // Mark as authenticated\n        } catch (error) {\n            console.error(error);\n            toast.error(`Error fetching profile for ${platform}. Please log in again.`);\n            localStorage.clear(); // Clear invalid tokens\n            setIsAuthenticated(false); // Reset authentication state\n        }\n    };\n\n    // Handle platform login\n    const handleLogin = async (platform) => {\n        try {\n            const response = await fetch(`${apiUrl}/api/auth/login/${platform}`, {\n                method: \"GET\",\n                credentials: \"include\",\n            });\n\n            if (!response.ok) {\n                throw new Error(`Failed to initiate login for ${platform}. Status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            if (data.redirectUrl) {\n                localStorage.setItem(\"platform\", platform); // Save platform\n                setPlatform(platform); // Update platform state\n                window.location.href = data.redirectUrl; // Redirect to login\n            } else {\n                toast.error(\"Redirect URL not found.\");\n            }\n        } catch (error) {\n            toast.error(`Login failed for ${platform}: ${error.message}`);\n        }\n    };\n\n    return (\n        <div className=\"landing-page\" style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n            {isAuthenticated ? (\n                // Render home page content if authenticated\n                <div className=\"home-page\">\n                    <h1>Welcome, {profile?.gamertag || profile?.username || \"Gamer\"}!</h1>\n                    <h2>Platform: {platform?.toUpperCase()}</h2>\n                    {profile?.appDisplayPicRaw && (\n                        <img\n                            src={profile.appDisplayPicRaw}\n                            alt=\"Profile Pic\"\n                            style={{ borderRadius: \"50%\", width: \"100px\", height: \"100px\" }}\n                        />\n                    )}\n                    <p>Display Name: {profile?.gameDisplayName || profile?.displayName}</p>\n                </div>\n            ) : (\n                // Render login options if not authenticated\n                <div className=\"login-options\">\n                    <h1>Welcome to GamerHub</h1>\n                    <p>Select a platform to log in:</p>\n                    <div style={{ display: \"flex\", justifyContent: \"center\", gap: \"20px\", marginTop: \"20px\" }}>\n                        <button onClick={() => handleLogin(\"xbox\")} style={buttonStyle(\"green\")}>\n                            Xbox Login\n                        </button>\n                        <button onClick={() => handleLogin(\"psn\")} style={buttonStyle(\"blue\")}>\n                            PSN Login\n                        </button>\n                        <button onClick={() => handleLogin(\"steam\")} style={buttonStyle(\"gray\")}>\n                            Steam Login\n                        </button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nconst buttonStyle = (color) => ({\n    padding: \"10px 20px\",\n    fontSize: \"16px\",\n    cursor: \"pointer\",\n    backgroundColor: color,\n    color: \"#ffffff\",\n    border: \"none\",\n    borderRadius: \"5px\",\n});\n\nexport default LandingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}