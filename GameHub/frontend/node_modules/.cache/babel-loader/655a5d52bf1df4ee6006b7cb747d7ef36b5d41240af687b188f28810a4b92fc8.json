{"ast":null,"code":"const apiUrl = 'http://localhost:8080';\nconst jwtToken = localStorage.getItem(\"jwtToken\");\n\n// Fetch Xbox profile\nexport const fetchXboxProfile = async () => {\n  const uhs = localStorage.getItem(\"uhs\");\n  const XSTS_token = localStorage.getItem(\"XSTS_token\");\n\n  // Debugging: Log the retrieved tokens\n  console.log(\"Fetched tokens - UHS:\", uhs, \"XSTS_token:\", XSTS_token);\n  if (!uhs || !XSTS_token) {\n    console.error(\"Xbox authentication tokens missing. Please log in again.\");\n    throw new Error(\"Xbox authentication tokens missing.\");\n  }\n  try {\n    const response = await fetch(`${apiUrl}/api/xbox/profile`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `XBL3.0 x=${uhs};${XSTS_token}`,\n        'Authorization': 'Bearer ' + jwtToken\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Xbox profile. Status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n    console.error(\"Failed to fetch Xbox profile.\");\n    throw error;\n  }\n};\n\n// Fetch PSN profile\nexport const fetchPSNProfile = async () => {\n  try {\n    const response = await fetch(`${apiUrl}/api/psn/profile`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch PSN profile. Status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n    console.error(\"Failed to fetch PSN profile.\");\n    throw error;\n  }\n};\nexport const fetchSteamProfile = async () => {\n  const steamId = localStorage.getItem(\"steamId\");\n  console.log(\"Fetching Steam profile with steamId:\", steamId);\n  try {\n    const response = await fetch(`${apiUrl}/api/steam/userinfo/getUserInfo?steamId=${steamId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Authorization': 'Bearer ' + jwtToken\n      }\n    });\n    console.log(\"Steam profile response status:\", response.status);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Steam profile. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"Steam profile data:\", data);\n    // Map Steam data to a common format\n    if (data.players && data.players.length > 0) {\n      const player = data.players[0];\n      return {\n        gamertag: player.personaname,\n        // use personaname as gamertag\n        appDisplayPicRaw: player.avatarfull,\n        // use avatarfull as profile pic\n        realname: player.realname,\n        profileurl: player.profileurl\n        // include any other fields your UI expects\n      };\n    }\n    throw new Error(\"No Steam player found\");\n  } catch (error) {\n    console.error(error);\n    console.error(\"Failed to fetch Steam profile.\");\n    throw error;\n  }\n};","map":{"version":3,"names":["apiUrl","jwtToken","localStorage","getItem","fetchXboxProfile","uhs","XSTS_token","console","log","error","Error","response","fetch","method","headers","Authorization","ok","status","json","fetchPSNProfile","fetchSteamProfile","steamId","data","players","length","player","gamertag","personaname","appDisplayPicRaw","avatarfull","realname","profileurl"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/service/profileService.js"],"sourcesContent":["\nconst apiUrl = 'http://localhost:8080';\nconst jwtToken = localStorage.getItem(\"jwtToken\");\n\n// Fetch Xbox profile\nexport const fetchXboxProfile = async () => {\n    const uhs = localStorage.getItem(\"uhs\");\n    const XSTS_token = localStorage.getItem(\"XSTS_token\");\n\n    // Debugging: Log the retrieved tokens\n    console.log(\"Fetched tokens - UHS:\", uhs, \"XSTS_token:\", XSTS_token);\n\n    if (!uhs || !XSTS_token) {\n        console.error(\"Xbox authentication tokens missing. Please log in again.\");\n        throw new Error(\"Xbox authentication tokens missing.\");\n    }\n\n    try {\n        const response = await fetch(`${apiUrl}/api/xbox/profile`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `XBL3.0 x=${uhs};${XSTS_token}`,\n                'Authorization': 'Bearer ' + jwtToken\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch Xbox profile. Status: ${response.status}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n        console.error(\"Failed to fetch Xbox profile.\");\n        throw error;\n    }\n};\n\n// Fetch PSN profile\nexport const fetchPSNProfile = async () => {\n    try {\n        const response = await fetch(`${apiUrl}/api/psn/profile`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to fetch PSN profile. Status: ${response.status}`);\n        }\n\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n        console.error(\"Failed to fetch PSN profile.\");\n        throw error;\n    }\n};\nexport const fetchSteamProfile = async () => {\n    const steamId = localStorage.getItem(\"steamId\");\n    console.log(\"Fetching Steam profile with steamId:\", steamId);\n    try {\n      const response = await fetch(`${apiUrl}/api/steam/userinfo/getUserInfo?steamId=${steamId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': 'Bearer ' + jwtToken\n        },\n      });\n      console.log(\"Steam profile response status:\", response.status);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch Steam profile. Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Steam profile data:\", data);\n      // Map Steam data to a common format\n      if (data.players && data.players.length > 0) {\n        const player = data.players[0];\n        return {\n          gamertag: player.personaname, // use personaname as gamertag\n          appDisplayPicRaw: player.avatarfull, // use avatarfull as profile pic\n          realname: player.realname,\n          profileurl: player.profileurl,\n          // include any other fields your UI expects\n        };\n      }\n      throw new Error(\"No Steam player found\");\n    } catch (error) {\n      console.error(error);\n      console.error(\"Failed to fetch Steam profile.\");\n      throw error;\n    }\n};\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}