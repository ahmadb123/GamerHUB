{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { PublicClientApplication } from \"@azure/msal-browser\";\n\n// // MSAL Configuration\n// const msalConfig = {\n//   auth: {\n//     clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n//     authority: \"https://login.microsoftonline.com/consumers/\", // Common authority for all Microsoft accounts\n//     redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n//   },\n// };\n\n// const LoginWithMicrosoft = () => {\n//   const [msalInstance, setMsalInstance] = useState(null);\n//   const [token, setToken] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const initializeMsal = async () => {\n//       const instance = new PublicClientApplication(msalConfig);\n//       await instance.initialize(); // Initialize MSAL\n//       setMsalInstance(instance);\n//     };\n\n//     initializeMsal();\n//   }, []);\n\n//   const login = async () => {\n//     if (!msalInstance) {\n//       setError(\"MSAL instance not initialized yet.\");\n//       return;\n//     }\n\n//     try {\n//       // MSAL login to retrieve token\n//       const loginResponse = await msalInstance.loginPopup({\n//         scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n//       });\n\n//       const tokenResponse = await msalInstance.acquireTokenSilent({\n//         scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n//         account: loginResponse.account,\n//       });\n\n//       console.log(\"Token response:\", tokenResponse);\n//       setToken(tokenResponse.accessToken);\n\n//       // Automatically send the token to the server\n//       await sendTokenToServer(tokenResponse.accessToken);\n//     } catch (err) {\n//       setError(err.message);\n//       console.error(\"Error during login:\", err);\n//     }\n//   };\n\n//   // Modify sendTokenToServer to accept a token parameter\n//   const sendTokenToServer = async (tokenToSend) => {\n//     if (!tokenToSend) {\n//       setError(\"No token to send to server.\");\n//       return;\n//     }\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/auth/xbox-token\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ xboxToken: tokenToSend }),\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.text();\n//         throw new Error(`Backend server error: ${errorData}`);\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Server response:\", data);\n//     } catch (error) {\n//       setError(error.message);\n//       console.error(\"Error sending token to server:\", error);\n//     }\n//   };\n\n//   const loginxbox = async () => {  \n//     try{\n//       const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n//         method: \"POST\", // Ensure the method is POST\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ \n//           xboxToken: token,\n//           createAccount: true // Include the required field\n//         }),\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.text();\n//         throw new Error(`Backend server error: ${errorData}`);\n//       }\n//       const data = await response.json();\n//       console.log(\"Server response:\", data);\n//     }\n//     catch (error) {\n//       setError(error.message);\n//       console.error(\"Error sending token to server:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Test Xbox Token Retrieval</h1>\n//       <button onClick={login}>Login and Get Token</button>\n//       <button onClick={loginxbox}>Login with Xbox</button>\n//       {token && <p>Token retrieved: {token}</p>}\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n//     </div>\n//   );\n// };\n\n// export default LoginWithMicrosoft;","map":{"version":3,"names":[],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/LoginWithMicrosoft.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { PublicClientApplication } from \"@azure/msal-browser\";\n\n// // MSAL Configuration\n// const msalConfig = {\n//   auth: {\n//     clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n//     authority: \"https://login.microsoftonline.com/consumers/\", // Common authority for all Microsoft accounts\n//     redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n//   },\n// };\n\n// const LoginWithMicrosoft = () => {\n//   const [msalInstance, setMsalInstance] = useState(null);\n//   const [token, setToken] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const initializeMsal = async () => {\n//       const instance = new PublicClientApplication(msalConfig);\n//       await instance.initialize(); // Initialize MSAL\n//       setMsalInstance(instance);\n//     };\n\n//     initializeMsal();\n//   }, []);\n\n//   const login = async () => {\n//     if (!msalInstance) {\n//       setError(\"MSAL instance not initialized yet.\");\n//       return;\n//     }\n\n//     try {\n//       // MSAL login to retrieve token\n//       const loginResponse = await msalInstance.loginPopup({\n//         scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n//       });\n\n//       const tokenResponse = await msalInstance.acquireTokenSilent({\n//         scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n//         account: loginResponse.account,\n//       });\n\n//       console.log(\"Token response:\", tokenResponse);\n//       setToken(tokenResponse.accessToken);\n\n//       // Automatically send the token to the server\n//       await sendTokenToServer(tokenResponse.accessToken);\n//     } catch (err) {\n//       setError(err.message);\n//       console.error(\"Error during login:\", err);\n//     }\n//   };\n\n//   // Modify sendTokenToServer to accept a token parameter\n//   const sendTokenToServer = async (tokenToSend) => {\n//     if (!tokenToSend) {\n//       setError(\"No token to send to server.\");\n//       return;\n//     }\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/auth/xbox-token\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ xboxToken: tokenToSend }),\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.text();\n//         throw new Error(`Backend server error: ${errorData}`);\n//       }\n\n//       const data = await response.json();\n//       console.log(\"Server response:\", data);\n//     } catch (error) {\n//       setError(error.message);\n//       console.error(\"Error sending token to server:\", error);\n//     }\n//   };\n\n//   const loginxbox = async () => {  \n//     try{\n//       const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n//         method: \"POST\", // Ensure the method is POST\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ \n//           xboxToken: token,\n//           createAccount: true // Include the required field\n//         }),\n//       });\n//       if (!response.ok) {\n//         const errorData = await response.text();\n//         throw new Error(`Backend server error: ${errorData}`);\n//       }\n//       const data = await response.json();\n//       console.log(\"Server response:\", data);\n//     }\n//     catch (error) {\n//       setError(error.message);\n//       console.error(\"Error sending token to server:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Test Xbox Token Retrieval</h1>\n//       <button onClick={login}>Login and Get Token</button>\n//       <button onClick={loginxbox}>Login with Xbox</button>\n//       {token && <p>Token retrieved: {token}</p>}\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n//     </div>\n//   );\n// };\n\n// export default LoginWithMicrosoft;\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}