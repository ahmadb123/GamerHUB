{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/components/XboxLiveComponents.js\",\n  _s = $RefreshSig$();\n// src/components/XboxLogin.js\n\nimport React, { useEffect, useState } from 'react';\nimport { generateRandomString, generateCodeChallenge } from './utils/oauth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = '0a23b968-9e79-4cba-b337-862adab7a8e2'; // Replace with your MSA Application (client) ID\nconst REDIRECT_URI = 'http://localhost:3000'; // Ensure this matches your registered redirect URI\nconst AUTHORIZATION_ENDPOINT = 'https://login.live.com/oauth20_authorize.srf';\nconst TOKEN_ENDPOINT = 'https://login.live.com/oauth20_token.srf';\nconst SCOPES = 'XboxLive.signin XboxLive.offline_access'; // Scopes required for Xbox Live\n\nconst XboxLogin = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Function to initiate the OAuth flow\n  const initiateOAuth = async () => {\n    const state = generateRandomString(16);\n    const codeVerifier = generateRandomString(64);\n    const codeChallenge = generateCodeChallenge(codeVerifier);\n\n    // Store codeVerifier and state in session storage\n    sessionStorage.setItem('code_verifier', codeVerifier);\n    sessionStorage.setItem('state', state);\n    const params = new URLSearchParams({\n      client_id: CLIENT_ID,\n      response_type: 'code',\n      redirect_uri: REDIRECT_URI,\n      scope: SCOPES,\n      state: state,\n      code_challenge: codeChallenge,\n      code_challenge_method: 'S256'\n    });\n\n    // Redirect to Microsoft's authorization endpoint\n    window.location.href = `${AUTHORIZATION_ENDPOINT}?${params.toString()}`;\n  };\n\n  // Function to handle the redirect back with authorization code\n  const handleRedirect = async () => {\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('code');\n    const state = params.get('state');\n    const storedState = sessionStorage.getItem('state');\n    const codeVerifier = sessionStorage.getItem('code_verifier');\n    if (code) {\n      // Verify state matches\n      if (state !== storedState) {\n        console.error('State mismatch');\n        return;\n      }\n      setIsLoading(true);\n      try {\n        // Exchange authorization code for access token\n        const response = await fetch(TOKEN_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: new URLSearchParams({\n            client_id: CLIENT_ID,\n            redirect_uri: REDIRECT_URI,\n            grant_type: 'authorization_code',\n            code: code,\n            code_verifier: codeVerifier\n          })\n        });\n        const data = await response.json();\n        if (data.error) {\n          throw new Error(data.error_description || 'Token exchange failed');\n        }\n        const msaAccessToken = data.access_token;\n        console.log('MSA Access Token:', msaAccessToken);\n\n        // Send the MSA access token to your backend for Xbox Live authentication\n        const backendResponse = await fetch('http://localhost:8080/api/auth/xboxExchange', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            msToken: msaAccessToken\n          })\n        });\n        if (!backendResponse.ok) {\n          const errorText = await backendResponse.text();\n          throw new Error(`Backend exchange failed: ${errorText}`);\n        }\n        const backendData = await backendResponse.json();\n        console.log('PlayFab login successful:', backendData);\n\n        // Clear URL parameters after processing\n        window.history.replaceState({}, document.title, '/');\n      } catch (error) {\n        console.error('Error during OAuth flow:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    handleRedirect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initiateOAuth,\n      children: \"Sign in with Xbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(XboxLogin, \"DlrQjwOD5XS1kcZJvMHoaf7KaZ8=\");\n_c = XboxLogin;\nexport default XboxLogin;\nvar _c;\n$RefreshReg$(_c, \"XboxLogin\");","map":{"version":3,"names":["React","useEffect","useState","generateRandomString","generateCodeChallenge","jsxDEV","_jsxDEV","CLIENT_ID","REDIRECT_URI","AUTHORIZATION_ENDPOINT","TOKEN_ENDPOINT","SCOPES","XboxLogin","_s","isLoading","setIsLoading","initiateOAuth","state","codeVerifier","codeChallenge","sessionStorage","setItem","params","URLSearchParams","client_id","response_type","redirect_uri","scope","code_challenge","code_challenge_method","window","location","href","toString","handleRedirect","search","code","get","storedState","getItem","console","error","response","fetch","method","headers","body","grant_type","code_verifier","data","json","Error","error_description","msaAccessToken","access_token","log","backendResponse","JSON","stringify","msToken","ok","errorText","text","backendData","history","replaceState","document","title","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/components/XboxLiveComponents.js"],"sourcesContent":["// src/components/XboxLogin.js\n\nimport React, { useEffect, useState } from 'react';\nimport { generateRandomString, generateCodeChallenge } from './utils/oauth';\n\nconst CLIENT_ID = '0a23b968-9e79-4cba-b337-862adab7a8e2'; // Replace with your MSA Application (client) ID\nconst REDIRECT_URI = 'http://localhost:3000'; // Ensure this matches your registered redirect URI\nconst AUTHORIZATION_ENDPOINT = 'https://login.live.com/oauth20_authorize.srf';\nconst TOKEN_ENDPOINT = 'https://login.live.com/oauth20_token.srf';\nconst SCOPES = 'XboxLive.signin XboxLive.offline_access'; // Scopes required for Xbox Live\n\nconst XboxLogin = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Function to initiate the OAuth flow\n  const initiateOAuth = async () => {\n    const state = generateRandomString(16);\n    const codeVerifier = generateRandomString(64);\n    const codeChallenge = generateCodeChallenge(codeVerifier);\n\n    // Store codeVerifier and state in session storage\n    sessionStorage.setItem('code_verifier', codeVerifier);\n    sessionStorage.setItem('state', state);\n\n    const params = new URLSearchParams({\n      client_id: CLIENT_ID,\n      response_type: 'code',\n      redirect_uri: REDIRECT_URI,\n      scope: SCOPES,\n      state: state,\n      code_challenge: codeChallenge,\n      code_challenge_method: 'S256',\n    });\n\n    // Redirect to Microsoft's authorization endpoint\n    window.location.href = `${AUTHORIZATION_ENDPOINT}?${params.toString()}`;\n  };\n\n  // Function to handle the redirect back with authorization code\n  const handleRedirect = async () => {\n    const params = new URLSearchParams(window.location.search);\n    const code = params.get('code');\n    const state = params.get('state');\n    const storedState = sessionStorage.getItem('state');\n    const codeVerifier = sessionStorage.getItem('code_verifier');\n\n    if (code) {\n      // Verify state matches\n      if (state !== storedState) {\n        console.error('State mismatch');\n        return;\n      }\n\n      setIsLoading(true);\n\n      try {\n        // Exchange authorization code for access token\n        const response = await fetch(TOKEN_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: new URLSearchParams({\n            client_id: CLIENT_ID,\n            redirect_uri: REDIRECT_URI,\n            grant_type: 'authorization_code',\n            code: code,\n            code_verifier: codeVerifier,\n          }),\n        });\n\n        const data = await response.json();\n\n        if (data.error) {\n          throw new Error(data.error_description || 'Token exchange failed');\n        }\n\n        const msaAccessToken = data.access_token;\n        console.log('MSA Access Token:', msaAccessToken);\n\n        // Send the MSA access token to your backend for Xbox Live authentication\n        const backendResponse = await fetch('http://localhost:8080/api/auth/xboxExchange', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ msToken: msaAccessToken }),\n        });\n\n        if (!backendResponse.ok) {\n          const errorText = await backendResponse.text();\n          throw new Error(`Backend exchange failed: ${errorText}`);\n        }\n\n        const backendData = await backendResponse.json();\n        console.log('PlayFab login successful:', backendData);\n\n        // Clear URL parameters after processing\n        window.history.replaceState({}, document.title, '/');\n      } catch (error) {\n        console.error('Error during OAuth flow:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    handleRedirect();\n  }, []);\n\n  return (\n    <div>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <button onClick={initiateOAuth}>Sign in with Xbox</button>\n      )}\n    </div>\n  );\n};\n\nexport default XboxLogin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}