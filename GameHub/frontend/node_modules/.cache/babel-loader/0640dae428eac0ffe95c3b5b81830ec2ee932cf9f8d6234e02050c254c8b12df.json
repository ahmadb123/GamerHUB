{"ast":null,"code":"// SwitchUserAccount.js\n\n{\n  /*\n  This function switches the user\n  account by updating user current platform\n  */\n}\n{\n  /*\n  This function switches the user\n  account by updating user current platform\n  */\n}\nimport { getAllLinkedProfiles } from \"../service/UserLinkedProfiles\";\n// SwitchUserAccount.js\n{\n  /* \n      *This function switches the user account by updating user current platform\n      * to do so -> \n      * 1.  Find the user's record in DB by userId\n      * 2.  Retrieve the tokens / credentials for the requested platform\n      * 3.  Update the user’s \"activePlatform\" in their session\n      * 4.  Now your server calls the correct provider using the correct tokens\n  */\n}\n// function to return the user xbox xuid and uhs-> \nlet userXuid = null;\nlet userUhs = null;\nlet userSteamId = null;\nconst getXboxUserInfo = async () => {\n  const response = await getAllLinkedProfiles();\n  // Ensure comparison is case-insensitive\n  const xboxProfile = response.find(profile => profile.platform.toLowerCase() === \"xbox\");\n  if (xboxProfile) {\n    userXuid = xboxProfile.xuid;\n    userUhs = xboxProfile.uhs;\n  }\n  console.log(\"Xbox credentials:\", userXuid, userUhs);\n};\n\n// Function to retrieve the Steam credentials\nconst getSteamUserInfo = async () => {\n  const response = await getAllLinkedProfiles();\n  // Ensure comparison is case-insensitive\n  const steamProfile = response.find(profile => profile.platform.toLowerCase() === \"steam\");\n  if (steamProfile) {\n    userSteamId = steamProfile.steamId;\n  }\n  console.log(\"Steam credentials:\", userSteamId);\n};\n\n// switch accounts accoring to the platform\nexport const switchUserAccount = async (platform, nav) => {\n  if (platform === \"xbox\") {\n    await getXboxUserInfo();\n    if (!userXuid || !userUhs) {\n      console.error(\"Xbox user info not found\");\n      nav(\"/landingPage\");\n    }\n    // Update the user's active platform in the session\n    localStorage.setItem(\"platform\", \"xbox\");\n    localStorage.setItem(\"xuid\", userXuid);\n    localStorage.setItem(\"uhs\", userUhs);\n  } else if (platform === \"steam\") {\n    if (!userSteamId) {\n      console.error(\"Steam user info not found\");\n      nav(\"/landingPage\");\n    }\n    await getSteamUserInfo();\n    // Update the user's active platform in the session\n    localStorage.setItem(\"platform\", \"steam\");\n    localStorage.setItem(\"steamId\", userSteamId);\n  }\n  console.log(\"User account switched to: \", platform);\n  nav(\"/main\");\n};","map":{"version":3,"names":["getAllLinkedProfiles","userXuid","userUhs","userSteamId","getXboxUserInfo","response","xboxProfile","find","profile","platform","toLowerCase","xuid","uhs","console","log","getSteamUserInfo","steamProfile","steamId","switchUserAccount","nav","error","localStorage","setItem"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/utility/SwitchUserAccount.js"],"sourcesContent":["// SwitchUserAccount.js\n\n{\n    /*\n    This function switches the user\n    account by updating user current platform\n    */\n}\n  \n{\n    /*\n    This function switches the user\n    account by updating user current platform\n    */\n}\nimport { getAllLinkedProfiles } from \"../service/UserLinkedProfiles\";\n// SwitchUserAccount.js\n{\n    /* \n        *This function switches the user account by updating user current platform\n        * to do so -> \n        * 1.  Find the user's record in DB by userId\n        * 2.  Retrieve the tokens / credentials for the requested platform\n        * 3.  Update the user’s \"activePlatform\" in their session\n        * 4.  Now your server calls the correct provider using the correct tokens\n    */\n}\n   // function to return the user xbox xuid and uhs-> \n   let userXuid = null;\n   let userUhs = null;\n   let userSteamId = null;\n   \n   const getXboxUserInfo = async () => {\n        const response = await getAllLinkedProfiles();\n        // Ensure comparison is case-insensitive\n        const xboxProfile = response.find(\n        profile => profile.platform.toLowerCase() === \"xbox\"\n        );\n        if (xboxProfile) {\n        userXuid = xboxProfile.xuid;\n        userUhs = xboxProfile.uhs;\n        }\n        console.log(\"Xbox credentials:\", userXuid, userUhs);\n    };\n\n    // Function to retrieve the Steam credentials\n    const getSteamUserInfo = async () => {\n        const response = await getAllLinkedProfiles();\n        // Ensure comparison is case-insensitive\n        const steamProfile = response.find(\n        profile => profile.platform.toLowerCase() === \"steam\");\n        if (steamProfile) {\n        userSteamId = steamProfile.steamId;\n        }\n        console.log(\"Steam credentials:\", userSteamId);\n    };\n\n// switch accounts accoring to the platform\nexport const switchUserAccount = async(platform , nav) => {\n    if(platform === \"xbox\"){\n        await getXboxUserInfo();\n        if(!userXuid || !userUhs){\n            console.error(\"Xbox user info not found\");\n            nav(\"/landingPage\");\n        }\n        // Update the user's active platform in the session\n        localStorage.setItem(\"platform\", \"xbox\");\n        localStorage.setItem(\"xuid\", userXuid);\n        localStorage.setItem(\"uhs\", userUhs);\n    }else if(platform === \"steam\"){\n        if(!userSteamId){\n            console.error(\"Steam user info not found\");\n            nav(\"/landingPage\");\n        }\n        await getSteamUserInfo();\n        // Update the user's active platform in the session\n        localStorage.setItem(\"platform\", \"steam\");\n        localStorage.setItem(\"steamId\", userSteamId);\n    }\n    console.log(\"User account switched to: \", platform);\n    nav(\"/main\");\n}"],"mappings":"AAAA;;AAEA;EACI;AACJ;AACA;AACA;AAHI;AAMJ;EACI;AACJ;AACA;AACA;AAHI;AAKJ,SAASA,oBAAoB,QAAQ,+BAA+B;AACpE;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAPI;AASD;AACA,IAAIC,QAAQ,GAAG,IAAI;AACnB,IAAIC,OAAO,GAAG,IAAI;AAClB,IAAIC,WAAW,GAAG,IAAI;AAEtB,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAMC,QAAQ,GAAG,MAAML,oBAAoB,CAAC,CAAC;EAC7C;EACA,MAAMM,WAAW,GAAGD,QAAQ,CAACE,IAAI,CACjCC,OAAO,IAAIA,OAAO,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAK,MAC9C,CAAC;EACD,IAAIJ,WAAW,EAAE;IACjBL,QAAQ,GAAGK,WAAW,CAACK,IAAI;IAC3BT,OAAO,GAAGI,WAAW,CAACM,GAAG;EACzB;EACAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEb,QAAQ,EAAEC,OAAO,CAAC;AACvD,CAAC;;AAED;AACA,MAAMa,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMV,QAAQ,GAAG,MAAML,oBAAoB,CAAC,CAAC;EAC7C;EACA,MAAMgB,YAAY,GAAGX,QAAQ,CAACE,IAAI,CAClCC,OAAO,IAAIA,OAAO,CAACC,QAAQ,CAACC,WAAW,CAAC,CAAC,KAAK,OAAO,CAAC;EACtD,IAAIM,YAAY,EAAE;IAClBb,WAAW,GAAGa,YAAY,CAACC,OAAO;EAClC;EACAJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEX,WAAW,CAAC;AAClD,CAAC;;AAEL;AACA,OAAO,MAAMe,iBAAiB,GAAG,MAAAA,CAAMT,QAAQ,EAAGU,GAAG,KAAK;EACtD,IAAGV,QAAQ,KAAK,MAAM,EAAC;IACnB,MAAML,eAAe,CAAC,CAAC;IACvB,IAAG,CAACH,QAAQ,IAAI,CAACC,OAAO,EAAC;MACrBW,OAAO,CAACO,KAAK,CAAC,0BAA0B,CAAC;MACzCD,GAAG,CAAC,cAAc,CAAC;IACvB;IACA;IACAE,YAAY,CAACC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;IACxCD,YAAY,CAACC,OAAO,CAAC,MAAM,EAAErB,QAAQ,CAAC;IACtCoB,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEpB,OAAO,CAAC;EACxC,CAAC,MAAK,IAAGO,QAAQ,KAAK,OAAO,EAAC;IAC1B,IAAG,CAACN,WAAW,EAAC;MACZU,OAAO,CAACO,KAAK,CAAC,2BAA2B,CAAC;MAC1CD,GAAG,CAAC,cAAc,CAAC;IACvB;IACA,MAAMJ,gBAAgB,CAAC,CAAC;IACxB;IACAM,YAAY,CAACC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC;IACzCD,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEnB,WAAW,CAAC;EAChD;EACAU,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEL,QAAQ,CAAC;EACnDU,GAAG,CAAC,OAAO,CAAC;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}