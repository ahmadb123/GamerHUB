{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/XboxLogin.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport { msalInstance } from './msalConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst XboxLogin = () => {\n  _s();\n  const signInWithXbox = useCallback(async () => {\n    try {\n      // Sign the user in using MSAL - this gives a Microsoft access token.\n      const authResult = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"User.Read\"]\n      });\n      const microsoftAccessToken = authResult.accessToken;\n\n      // Exchange the Microsoft access token for an Xbox Live token (XSTS).\n      const xboxToken = await getXboxTokenFromMicrosoftAccessToken(microsoftAccessToken);\n\n      // Send the obtained Xbox token to your backend\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          XboxToken: xboxToken,\n          CreateAccount: true\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to log in via Xbox: ${errorText}`);\n      }\n      const data = await response.json();\n      console.log(\"Login successful:\", data);\n    } catch (error) {\n      console.error(\"Error during sign-in:\", error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: signInWithXbox,\n    children: \"Sign in with Xbox\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n// Placeholder: You need to implement the actual logic to exchange Microsoft token for Xbox (XSTS) token.\n_s(XboxLogin, \"RWitseS9vnvZae3Qh8+gAJ8Eu8c=\");\n_c = XboxLogin;\nasync function getXboxTokenFromMicrosoftAccessToken(msToken) {\n  // 1. Call Xbox Live user authentication endpoints using msToken to get an XBL token.\n  // 2. Call XSTS authorization endpoint using XBL token to get XSTS token.\n  // 3. Return the XSTS token here.\n  return \"FAKE_XSTS_TOKEN_FOR_EXAMPLE\";\n}\nexport default XboxLogin;\nvar _c;\n$RefreshReg$(_c, \"XboxLogin\");","map":{"version":3,"names":["React","useCallback","msalInstance","jsxDEV","_jsxDEV","XboxLogin","_s","signInWithXbox","authResult","loginPopup","scopes","microsoftAccessToken","accessToken","xboxToken","getXboxTokenFromMicrosoftAccessToken","response","fetch","method","headers","body","JSON","stringify","XboxToken","CreateAccount","ok","errorText","text","Error","data","json","console","log","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","msToken","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GamerHUB/GameHub/frontend/src/XboxLogin.js"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { msalInstance } from './msalConfig';\n\nconst XboxLogin = () => {\n  const signInWithXbox = useCallback(async () => {\n    try {\n      // Sign the user in using MSAL - this gives a Microsoft access token.\n      const authResult = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"User.Read\"], \n      });\n\n      const microsoftAccessToken = authResult.accessToken;\n\n      // Exchange the Microsoft access token for an Xbox Live token (XSTS).\n      const xboxToken = await getXboxTokenFromMicrosoftAccessToken(microsoftAccessToken);\n\n      // Send the obtained Xbox token to your backend\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          XboxToken: xboxToken,\n          CreateAccount: true,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to log in via Xbox: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log(\"Login successful:\", data);\n\n    } catch (error) {\n      console.error(\"Error during sign-in:\", error);\n    }\n  }, []);\n\n  return (\n    <button onClick={signInWithXbox}>Sign in with Xbox</button>\n  );\n};\n\n// Placeholder: You need to implement the actual logic to exchange Microsoft token for Xbox (XSTS) token.\nasync function getXboxTokenFromMicrosoftAccessToken(msToken) {\n  // 1. Call Xbox Live user authentication endpoints using msToken to get an XBL token.\n  // 2. Call XSTS authorization endpoint using XBL token to get XSTS token.\n  // 3. Return the XSTS token here.\n  return \"FAKE_XSTS_TOKEN_FOR_EXAMPLE\";\n}\n\nexport default XboxLogin;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,YAAY,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,cAAc,GAAGN,WAAW,CAAC,YAAY;IAC7C,IAAI;MACF;MACA,MAAMO,UAAU,GAAG,MAAMN,YAAY,CAACO,UAAU,CAAC;QAC/CC,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW;MAC3C,CAAC,CAAC;MAEF,MAAMC,oBAAoB,GAAGH,UAAU,CAACI,WAAW;;MAEnD;MACA,MAAMC,SAAS,GAAG,MAAMC,oCAAoC,CAACH,oBAAoB,CAAC;;MAElF;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,SAAS,EAAET,SAAS;UACpBU,aAAa,EAAE;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAAC,8BAA8BF,SAAS,EAAE,CAAC;MAC5D;MAEA,MAAMG,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,IAAI,CAAC;IAExC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE5B,OAAA;IAAQ6B,OAAO,EAAE1B,cAAe;IAAA2B,QAAA,EAAC;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAE/D,CAAC;;AAED;AAAAhC,EAAA,CA3CMD,SAAS;AAAAkC,EAAA,GAATlC,SAAS;AA4Cf,eAAeS,oCAAoCA,CAAC0B,OAAO,EAAE;EAC3D;EACA;EACA;EACA,OAAO,6BAA6B;AACtC;AAEA,eAAenC,SAAS;AAAC,IAAAkC,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}