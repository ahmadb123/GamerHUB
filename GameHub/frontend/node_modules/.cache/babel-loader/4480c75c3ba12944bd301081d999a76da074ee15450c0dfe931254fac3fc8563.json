{"ast":null,"code":"var _jsxFileName = \"/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// MSAL Configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\",\n    // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/consumers/\",\n    // Common authority for all Microsoft accounts\n    redirectUri: \"http://localhost:3000\" // Replace with your application's redirect URI\n  }\n};\nconst LoginWithMicrosoft = () => {\n  _s();\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initializeMsal = async () => {\n      const instance = new PublicClientApplication(msalConfig);\n      await instance.initialize(); // Initialize MSAL\n      setMsalInstance(instance);\n    };\n    initializeMsal();\n  }, []);\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n    try {\n      // MSAL login to retrieve token\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"]\n      });\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n        account: loginResponse.account\n      });\n      console.log(\"Token response:\", tokenResponse);\n      setToken(tokenResponse.accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n  const sendTokenToServer = async () => {\n    if (!token) {\n      setError(\"No token to send to server.\");\n      return;\n    }\n    // Send formatted token to backend\n    const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        xboxToken: formattedToken,\n        createAccount: false\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.text();\n      throw new Error(`Backend server error: ${errorData}`);\n    }\n    const data = await response.json();\n    console.log(\"Server response:\", data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Test Xbox Token Retrieval\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      children: \"Login and Get Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendTokenToServer,\n      children: \"Send Token to Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), token && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Token retrieved: \", token]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginWithMicrosoft, \"QEAA7ynVfDlXUzgyIHSKC6D9lp0=\");\n_c = LoginWithMicrosoft;\nexport default LoginWithMicrosoft;\nvar _c;\n$RefreshReg$(_c, \"LoginWithMicrosoft\");","map":{"version":3,"names":["React","useState","useEffect","PublicClientApplication","jsxDEV","_jsxDEV","msalConfig","auth","clientId","authority","redirectUri","LoginWithMicrosoft","_s","msalInstance","setMsalInstance","token","setToken","error","setError","initializeMsal","instance","initialize","login","loginResponse","loginPopup","scopes","tokenResponse","acquireTokenSilent","account","console","log","accessToken","err","message","sendTokenToServer","response","fetch","method","headers","body","JSON","stringify","xboxToken","formattedToken","createAccount","ok","errorData","text","Error","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","color","_c","$RefreshReg$"],"sources":["/Users/ahmadbishara/Desktop/GameHub/frontend/src/pages/AuthenticationPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\n// MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: \"0a23b968-9e79-4cba-b337-862adab7a8e2\", // Replace with your Azure AD app's client ID\n    authority: \"https://login.microsoftonline.com/consumers/\", // Common authority for all Microsoft accounts\n    redirectUri: \"http://localhost:3000\", // Replace with your application's redirect URI\n  },\n};\n\nconst LoginWithMicrosoft = () => {\n  const [msalInstance, setMsalInstance] = useState(null);\n  const [token, setToken] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const initializeMsal = async () => {\n      const instance = new PublicClientApplication(msalConfig);\n      await instance.initialize(); // Initialize MSAL\n      setMsalInstance(instance);\n    };\n\n    initializeMsal();\n  }, []);\n\n  const login = async () => {\n    if (!msalInstance) {\n      setError(\"MSAL instance not initialized yet.\");\n      return;\n    }\n\n    try {\n      // MSAL login to retrieve token\n      const loginResponse = await msalInstance.loginPopup({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n      });\n\n      const tokenResponse = await msalInstance.acquireTokenSilent({\n        scopes: [\"openid\", \"profile\", \"offline_access\", \"XboxLive.signin\"],\n        account: loginResponse.account,\n      });\n\n      console.log(\"Token response:\", tokenResponse);\n      setToken(tokenResponse.accessToken);\n    } catch (err) {\n      setError(err.message);\n      console.error(\"Error during login:\", err);\n    }\n  };\n\n  const sendTokenToServer = async () => {\n    if (!token) {\n      setError(\"No token to send to server.\");\n      return;\n    }\n      // Send formatted token to backend\n      const response = await fetch(\"http://localhost:8080/api/auth/xbox\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ xboxToken: formattedToken, createAccount: false }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`Backend server error: ${errorData}`);\n      }\n\n      const data = await response.json();\n      console.log(\"Server response:\", data);\n    };\n\n  return (\n    <div>\n      <h1>Test Xbox Token Retrieval</h1>\n      <button onClick={login}>Login and Get Token</button>\n      <button onClick={sendTokenToServer}>Send Token to Server</button>\n      {token && <p>Token retrieved: {token}</p>}\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n    </div>\n  );\n};\n\nexport default LoginWithMicrosoft;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}